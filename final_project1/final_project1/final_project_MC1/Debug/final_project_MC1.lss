
final_project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00005074  00005108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080010e  0080010e  000051b6  2**0
                  ALLOC
  3 .stab         000045b4  00000000  00000000  000051b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001593  00000000  00000000  0000976c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000acff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000afaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e890  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f44b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <main>
      8a:	0c 94 38 28 	jmp	0x5070	; 0x5070 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 27 	jmp	0x4f78	; 0x4f78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 27 	jmp	0x4f78	; 0x4f78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <UART_init>:
#include "avr/io.h"
#include "../../libirary/std_types.h"
#include "../../libirary/common_macros.h" /* To use the macros like SET_BIT */
#include "avr/interrupt.h"

void UART_init(UART_config * config){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <UART_init+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <UART_init+0x8>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    11d2:	1a 82       	std	Y+2, r1	; 0x02
    11d4:	19 82       	std	Y+1, r1	; 0x01
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
    11d6:	eb 81       	ldd	r30, Y+3	; 0x03
    11d8:	fc 81       	ldd	r31, Y+4	; 0x04
    11da:	83 81       	ldd	r24, Z+3	; 0x03
    11dc:	94 81       	ldd	r25, Z+4	; 0x04
    11de:	a5 81       	ldd	r26, Z+5	; 0x05
    11e0:	b6 81       	ldd	r27, Z+6	; 0x06
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	aa 1f       	adc	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	aa 1f       	adc	r26, r26
    11f0:	bb 1f       	adc	r27, r27
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	aa 1f       	adc	r26, r26
    11f8:	bb 1f       	adc	r27, r27
    11fa:	9c 01       	movw	r18, r24
    11fc:	ad 01       	movw	r20, r26
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	92 e1       	ldi	r25, 0x12	; 18
    1202:	aa e7       	ldi	r26, 0x7A	; 122
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__udivmodsi4>
    120e:	da 01       	movw	r26, r20
    1210:	c9 01       	movw	r24, r18
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
	UCSRA =(1<<U2X);
    1218:	eb e2       	ldi	r30, 0x2B	; 43
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);
    1220:	ea e2       	ldi	r30, 0x2A	; 42
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	88 e1       	ldi	r24, 0x18	; 24
    1226:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|((config->no_of_bit_data)<<1)|((config->stopbit)<<3)|((config->parity)<<4);
    1228:	a0 e4       	ldi	r26, 0x40	; 64
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb 81       	ldd	r30, Y+3	; 0x03
    122e:	fc 81       	ldd	r31, Y+4	; 0x04
    1230:	80 81       	ld	r24, Z
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	28 2f       	mov	r18, r24
    123c:	20 68       	ori	r18, 0x80	; 128
    123e:	eb 81       	ldd	r30, Y+3	; 0x03
    1240:	fc 81       	ldd	r31, Y+4	; 0x04
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	28 2b       	or	r18, r24
    1256:	eb 81       	ldd	r30, Y+3	; 0x03
    1258:	fc 81       	ldd	r31, Y+4	; 0x04
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	82 95       	swap	r24
    1262:	92 95       	swap	r25
    1264:	90 7f       	andi	r25, 0xF0	; 240
    1266:	98 27       	eor	r25, r24
    1268:	80 7f       	andi	r24, 0xF0	; 240
    126a:	98 27       	eor	r25, r24
    126c:	82 2b       	or	r24, r18
    126e:	8c 93       	st	X, r24
	UBRRH=(ubrr_value>>8);
    1270:	e0 e4       	ldi	r30, 0x40	; 64
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	89 2f       	mov	r24, r25
    127a:	99 27       	eor	r25, r25
    127c:	80 83       	st	Z, r24
	UBRRL=(ubrr_value);
    127e:	e9 e2       	ldi	r30, 0x29	; 41
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	80 83       	st	Z, r24

}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <UART_send_byte>:


void UART_send_byte(uint8 byte){
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	0f 92       	push	r0
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    12a0:	eb e2       	ldi	r30, 0x2B	; 43
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	80 72       	andi	r24, 0x20	; 32
    12ac:	90 70       	andi	r25, 0x00	; 0
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	b9 f3       	breq	.-18     	; 0x12a0 <UART_send_byte+0xc>
	UDR=byte;
    12b2:	ec e2       	ldi	r30, 0x2C	; 44
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	80 83       	st	Z, r24
}
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <UART_receive_byte>:

uint8 UART_receive_byte(){
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    12ca:	eb e2       	ldi	r30, 0x2B	; 43
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	dc f7       	brge	.-10     	; 0x12ca <UART_receive_byte+0x8>
	return UDR;
    12d4:	ec e2       	ldi	r30, 0x2C	; 44
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
}
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <UART_send_string>:

void UART_send_string(uint8 *str){
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <UART_send_string+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <UART_send_string+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;str[i]!='\0';i++){
    12f0:	1a 82       	std	Y+2, r1	; 0x02
    12f2:	19 82       	std	Y+1, r1	; 0x01
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <UART_send_string+0x34>
		UART_send_byte(str[i]);
    12f6:	29 81       	ldd	r18, Y+1	; 0x01
    12f8:	3a 81       	ldd	r19, Y+2	; 0x02
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	fc 01       	movw	r30, r24
    1300:	e2 0f       	add	r30, r18
    1302:	f3 1f       	adc	r31, r19
    1304:	80 81       	ld	r24, Z
    1306:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
	return UDR;
}

void UART_send_string(uint8 *str){

	for(int i=0;str[i]!='\0';i++){
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	29 81       	ldd	r18, Y+1	; 0x01
    1316:	3a 81       	ldd	r19, Y+2	; 0x02
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	fc 01       	movw	r30, r24
    131e:	e2 0f       	add	r30, r18
    1320:	f3 1f       	adc	r31, r19
    1322:	80 81       	ld	r24, Z
    1324:	88 23       	and	r24, r24
    1326:	39 f7       	brne	.-50     	; 0x12f6 <UART_send_string+0x16>
		UART_send_byte(str[i]);
	}

}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
	{
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <UART_receiveString+0xa>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9b 83       	std	Y+3, r25	; 0x03
    1348:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    134a:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_receive_byte();
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	8c 01       	movw	r16, r24
    1358:	02 0f       	add	r16, r18
    135a:	13 1f       	adc	r17, r19
    135c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <UART_receive_byte>
    1360:	f8 01       	movw	r30, r16
    1362:	80 83       	st	Z, r24
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_receive_byte();
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	8c 01       	movw	r16, r24
    1378:	02 0f       	add	r16, r18
    137a:	13 1f       	adc	r17, r19
    137c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <UART_receive_byte>
    1380:	f8 01       	movw	r30, r16
    1382:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_receive_byte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	fc 01       	movw	r30, r24
    1390:	e2 0f       	add	r30, r18
    1392:	f3 1f       	adc	r31, r19
    1394:	80 81       	ld	r24, Z
    1396:	83 32       	cpi	r24, 0x23	; 35
    1398:	31 f7       	brne	.-52     	; 0x1366 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_receive_byte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	9b 81       	ldd	r25, Y+3	; 0x03
    13a4:	fc 01       	movw	r30, r24
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	10 82       	st	Z, r1
	}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <__vector_7>:
#include "avr/interrupt.h"
#include "avr/io.h"

static volatile void(*function_ptr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect){
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
	if(function_ptr!=NULL_PTR)
    13e6:	80 91 0e 01 	lds	r24, 0x010E
    13ea:	90 91 0f 01 	lds	r25, 0x010F
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	29 f0       	breq	.+10     	; 0x13fc <__vector_7+0x40>
		{
			function_ptr();
    13f2:	e0 91 0e 01 	lds	r30, 0x010E
    13f6:	f0 91 0f 01 	lds	r31, 0x010F
    13fa:	09 95       	icall
		}
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	if(function_ptr!=NULL_PTR)
    144c:	80 91 0e 01 	lds	r24, 0x010E
    1450:	90 91 0f 01 	lds	r25, 0x010F
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	29 f0       	breq	.+10     	; 0x1462 <__vector_9+0x40>
			{
				function_ptr();
    1458:	e0 91 0e 01 	lds	r30, 0x010E
    145c:	f0 91 0f 01 	lds	r31, 0x010F
    1460:	09 95       	icall
			}
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	ff 91       	pop	r31
    1468:	ef 91       	pop	r30
    146a:	bf 91       	pop	r27
    146c:	af 91       	pop	r26
    146e:	9f 91       	pop	r25
    1470:	8f 91       	pop	r24
    1472:	7f 91       	pop	r23
    1474:	6f 91       	pop	r22
    1476:	5f 91       	pop	r21
    1478:	4f 91       	pop	r20
    147a:	3f 91       	pop	r19
    147c:	2f 91       	pop	r18
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	0f 90       	pop	r0
    1484:	1f 90       	pop	r1
    1486:	18 95       	reti

00001488 <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * config){
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <Timer1_init+0x6>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config->initial_value;
    1496:	ac e4       	ldi	r26, 0x4C	; 76
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e9 81       	ldd	r30, Y+1	; 0x01
    149c:	fa 81       	ldd	r31, Y+2	; 0x02
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	9c 93       	st	X, r25
    14a6:	8e 93       	st	-X, r24
	OCR1A = config->compare_value;
    14a8:	aa e4       	ldi	r26, 0x4A	; 74
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
	if(config->mode == Normal){
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	85 81       	ldd	r24, Z+5	; 0x05
    14c0:	88 23       	and	r24, r24
    14c2:	29 f4       	brne	.+10     	; 0x14ce <Timer1_init+0x46>
		TIMSK = 1 << TOIE1;
    14c4:	e9 e5       	ldi	r30, 0x59	; 89
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	84 e0       	ldi	r24, 0x04	; 4
    14ca:	80 83       	st	Z, r24
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <Timer1_init+0x4e>
	}
	else
		TIMSK = 1 << OCIE1A;
    14ce:	e9 e5       	ldi	r30, 0x59	; 89
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 e1       	ldi	r24, 0x10	; 16
    14d4:	80 83       	st	Z, r24
	TCCR1A= (1<<FOC1A) | (1<<FOC1B) | ((TCCR1A & 0XFC )| (config->mode & 0x3));
    14d6:	af e4       	ldi	r26, 0x4F	; 79
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ef e4       	ldi	r30, 0x4F	; 79
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	98 2f       	mov	r25, r24
    14e2:	9c 7f       	andi	r25, 0xFC	; 252
    14e4:	e9 81       	ldd	r30, Y+1	; 0x01
    14e6:	fa 81       	ldd	r31, Y+2	; 0x02
    14e8:	85 81       	ldd	r24, Z+5	; 0x05
    14ea:	83 70       	andi	r24, 0x03	; 3
    14ec:	89 2b       	or	r24, r25
    14ee:	8c 60       	ori	r24, 0x0C	; 12
    14f0:	8c 93       	st	X, r24
	TCCR1B = ((TCCR1B & 0XE7)|((config->mode & 0xC)<<1)) | (config->prescaler);
    14f2:	ae e4       	ldi	r26, 0x4E	; 78
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ee e4       	ldi	r30, 0x4E	; 78
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	27 7e       	andi	r18, 0xE7	; 231
    1500:	e9 81       	ldd	r30, Y+1	; 0x01
    1502:	fa 81       	ldd	r31, Y+2	; 0x02
    1504:	85 81       	ldd	r24, Z+5	; 0x05
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	8c 70       	andi	r24, 0x0C	; 12
    150c:	90 70       	andi	r25, 0x00	; 0
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	92 2f       	mov	r25, r18
    1514:	98 2b       	or	r25, r24
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	84 81       	ldd	r24, Z+4	; 0x04
    151c:	89 2b       	or	r24, r25
    151e:	8c 93       	st	X, r24

}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <Timer1_deInit>:

void Timer1_deInit(){
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1532:	ef e4       	ldi	r30, 0x4F	; 79
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	10 82       	st	Z, r1
	TCCR1B=0;
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	10 82       	st	Z, r1
	TCNT1=0;
    153e:	ec e4       	ldi	r30, 0x4C	; 76
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	11 82       	std	Z+1, r1	; 0x01
    1544:	10 82       	st	Z, r1
	OCR1A=0;
    1546:	ea e4       	ldi	r30, 0x4A	; 74
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	11 82       	std	Z+1, r1	; 0x01
    154c:	10 82       	st	Z, r1
	TIMSK=0;
    154e:	e9 e5       	ldi	r30, 0x59	; 89
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	10 82       	st	Z, r1
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <Timer1_setCallBack+0x6>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	89 83       	std	Y+1, r24	; 0x01

  function_ptr=a_ptr;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	90 93 0f 01 	sts	0x010F, r25
    1570:	80 93 0e 01 	sts	0x010E, r24
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <KEYPAD_getPressedKey>:
#include <util/delay.h>

uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	a2 97       	sbiw	r28, 0x22	; 34
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    1592:	1a a2       	std	Y+34, r1	; 0x22
    1594:	19 a2       	std	Y+33, r1	; 0x21
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <KEYPAD_getPressedKey+0x34>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i,PIN_INPUT);
    1598:	89 a1       	ldd	r24, Y+33	; 0x21
    159a:	98 2f       	mov	r25, r24
    159c:	9c 5f       	subi	r25, 0xFC	; 252
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	69 2f       	mov	r22, r25
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    15a8:	89 a1       	ldd	r24, Y+33	; 0x21
    15aa:	9a a1       	ldd	r25, Y+34	; 0x22
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	9a a3       	std	Y+34, r25	; 0x22
    15b0:	89 a3       	std	Y+33, r24	; 0x21
    15b2:	89 a1       	ldd	r24, Y+33	; 0x21
    15b4:	9a a1       	ldd	r25, Y+34	; 0x22
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	91 05       	cpc	r25, r1
    15ba:	74 f3       	brlt	.-36     	; 0x1598 <KEYPAD_getPressedKey+0x1a>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i,PIN_INPUT);

	while(1)
	{

		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    15bc:	18 a2       	std	Y+32, r1	; 0x20
    15be:	1f 8e       	std	Y+31, r1	; 0x1f
    15c0:	2d c1       	rjmp	.+602    	; 0x181c <KEYPAD_getPressedKey+0x29e>
		{
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_OUTPUT);
    15c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	69 2f       	mov	r22, r25
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);
    15ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	69 2f       	mov	r22, r25
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 e2       	ldi	r26, 0x20	; 32
    15e0:	b1 e4       	ldi	r27, 0x41	; 65
    15e2:	89 8f       	std	Y+25, r24	; 0x19
    15e4:	9a 8f       	std	Y+26, r25	; 0x1a
    15e6:	ab 8f       	std	Y+27, r26	; 0x1b
    15e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ea:	69 8d       	ldd	r22, Y+25	; 0x19
    15ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a ef       	ldi	r20, 0xFA	; 250
    15f8:	54 e4       	ldi	r21, 0x44	; 68
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	8d 8b       	std	Y+21, r24	; 0x15
    1604:	9e 8b       	std	Y+22, r25	; 0x16
    1606:	af 8b       	std	Y+23, r26	; 0x17
    1608:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161e:	88 23       	and	r24, r24
    1620:	2c f4       	brge	.+10     	; 0x162c <KEYPAD_getPressedKey+0xae>
		__ticks = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9c 8b       	std	Y+20, r25	; 0x14
    1628:	8b 8b       	std	Y+19, r24	; 0x13
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <KEYPAD_getPressedKey+0x12c>
	else if (__tmp > 65535)
    162c:	6d 89       	ldd	r22, Y+21	; 0x15
    162e:	7e 89       	ldd	r23, Y+22	; 0x16
    1630:	8f 89       	ldd	r24, Y+23	; 0x17
    1632:	98 8d       	ldd	r25, Y+24	; 0x18
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	4c f5       	brge	.+82     	; 0x1696 <KEYPAD_getPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1644:	69 8d       	ldd	r22, Y+25	; 0x19
    1646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    164a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e2       	ldi	r20, 0x20	; 32
    1652:	51 e4       	ldi	r21, 0x41	; 65
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	0f c0       	rjmp	.+30     	; 0x168c <KEYPAD_getPressedKey+0x10e>
    166e:	88 ec       	ldi	r24, 0xC8	; 200
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9a 8b       	std	Y+18, r25	; 0x12
    1674:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1676:	89 89       	ldd	r24, Y+17	; 0x11
    1678:	9a 89       	ldd	r25, Y+18	; 0x12
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <KEYPAD_getPressedKey+0xfc>
    167e:	9a 8b       	std	Y+18, r25	; 0x12
    1680:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	8b 89       	ldd	r24, Y+19	; 0x13
    1684:	9c 89       	ldd	r25, Y+20	; 0x14
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	9c 8b       	std	Y+20, r25	; 0x14
    168a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168c:	8b 89       	ldd	r24, Y+19	; 0x13
    168e:	9c 89       	ldd	r25, Y+20	; 0x14
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	69 f7       	brne	.-38     	; 0x166e <KEYPAD_getPressedKey+0xf0>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <KEYPAD_getPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1696:	6d 89       	ldd	r22, Y+21	; 0x15
    1698:	7e 89       	ldd	r23, Y+22	; 0x16
    169a:	8f 89       	ldd	r24, Y+23	; 0x17
    169c:	98 8d       	ldd	r25, Y+24	; 0x18
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9c 8b       	std	Y+20, r25	; 0x14
    16a8:	8b 8b       	std	Y+19, r24	; 0x13
    16aa:	8b 89       	ldd	r24, Y+19	; 0x13
    16ac:	9c 89       	ldd	r25, Y+20	; 0x14
    16ae:	98 8b       	std	Y+16, r25	; 0x10
    16b0:	8f 87       	std	Y+15, r24	; 0x0f
    16b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b4:	98 89       	ldd	r25, Y+16	; 0x10
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <KEYPAD_getPressedKey+0x138>
    16ba:	98 8b       	std	Y+16, r25	; 0x10
    16bc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    16be:	1e 8e       	std	Y+30, r1	; 0x1e
    16c0:	1d 8e       	std	Y+29, r1	; 0x1d
    16c2:	9b c0       	rjmp	.+310    	; 0x17fa <KEYPAD_getPressedKey+0x27c>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID , KEYPAD_COL_START_PIN_ID+col) == BUTTON_IS_PRESSED )
    16c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c6:	98 2f       	mov	r25, r24
    16c8:	9c 5f       	subi	r25, 0xFC	; 252
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	69 2f       	mov	r22, r25
    16ce:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    16d2:	88 23       	and	r24, r24
    16d4:	d9 f4       	brne	.+54     	; 0x170c <KEYPAD_getPressedKey+0x18e>
				{
					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
    16d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	69 2f       	mov	r22, r25
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
					return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
    16e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16e4:	98 a1       	ldd	r25, Y+32	; 0x20
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	98 2f       	mov	r25, r24
    16f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f2:	89 0f       	add	r24, r25
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	0e 94 15 0c 	call	0x182a	; 0x182a <KEYPAD_adjustKeyNumber>
			}
			/*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
		}
	}
}
    16fa:	a2 96       	adiw	r28, 0x22	; 34
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID , KEYPAD_COL_START_PIN_ID+col) == BUTTON_IS_PRESSED )
				{
					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
					return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e2       	ldi	r26, 0x20	; 32
    1712:	b1 e4       	ldi	r27, 0x41	; 65
    1714:	8b 87       	std	Y+11, r24	; 0x0b
    1716:	9c 87       	std	Y+12, r25	; 0x0c
    1718:	ad 87       	std	Y+13, r26	; 0x0d
    171a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171c:	6b 85       	ldd	r22, Y+11	; 0x0b
    171e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a ef       	ldi	r20, 0xFA	; 250
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8f 83       	std	Y+7, r24	; 0x07
    1736:	98 87       	std	Y+8, r25	; 0x08
    1738:	a9 87       	std	Y+9, r26	; 0x09
    173a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <KEYPAD_getPressedKey+0x1e0>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <KEYPAD_getPressedKey+0x25e>
	else if (__tmp > 65535)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <KEYPAD_getPressedKey+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1776:	6b 85       	ldd	r22, Y+11	; 0x0b
    1778:	7c 85       	ldd	r23, Y+12	; 0x0c
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	0f c0       	rjmp	.+30     	; 0x17be <KEYPAD_getPressedKey+0x240>
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <KEYPAD_getPressedKey+0x22e>
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <KEYPAD_getPressedKey+0x222>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <KEYPAD_getPressedKey+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <KEYPAD_getPressedKey+0x26a>
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);
			_delay_ms(10);
			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    17f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	9e 8f       	std	Y+30, r25	; 0x1e
    17f8:	8d 8f       	std	Y+29, r24	; 0x1d
    17fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fe:	84 30       	cpi	r24, 0x04	; 4
    1800:	91 05       	cpc	r25, r1
    1802:	0c f4       	brge	.+2      	; 0x1806 <KEYPAD_getPressedKey+0x288>
    1804:	5f cf       	rjmp	.-322    	; 0x16c4 <KEYPAD_getPressedKey+0x146>
					return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
				}
				_delay_ms(10);
			}
			/*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , PIN_INPUT);
    1806:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	69 2f       	mov	r22, r25
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i,PIN_INPUT);

	while(1)
	{

		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    1812:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1814:	98 a1       	ldd	r25, Y+32	; 0x20
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	98 a3       	std	Y+32, r25	; 0x20
    181a:	8f 8f       	std	Y+31, r24	; 0x1f
    181c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181e:	98 a1       	ldd	r25, Y+32	; 0x20
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	91 05       	cpc	r25, r1
    1824:	0c f4       	brge	.+2      	; 0x1828 <KEYPAD_getPressedKey+0x2aa>
    1826:	cd ce       	rjmp	.-614    	; 0x15c2 <KEYPAD_getPressedKey+0x44>
    1828:	c9 ce       	rjmp	.-622    	; 0x15bc <KEYPAD_getPressedKey+0x3e>

0000182a <KEYPAD_adjustKeyNumber>:
	}
}


uint8 KEYPAD_adjustKeyNumber(uint8 button_num)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <KEYPAD_adjustKeyNumber+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <KEYPAD_adjustKeyNumber+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	8a 83       	std	Y+2, r24	; 0x02
	uint8 adjustNum=0;
    1838:	19 82       	std	Y+1, r1	; 0x01
	switch(button_num)
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3c 83       	std	Y+4, r19	; 0x04
    1842:	2b 83       	std	Y+3, r18	; 0x03
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <KEYPAD_adjustKeyNumber+0x26>
    184e:	70 c0       	rjmp	.+224    	; 0x1930 <KEYPAD_adjustKeyNumber+0x106>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	29 30       	cpi	r18, 0x09	; 9
    1856:	31 05       	cpc	r19, r1
    1858:	5c f5       	brge	.+86     	; 0x18b0 <KEYPAD_adjustKeyNumber+0x86>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <KEYPAD_adjustKeyNumber+0x3c>
    1864:	59 c0       	rjmp	.+178    	; 0x1918 <KEYPAD_adjustKeyNumber+0xee>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	25 30       	cpi	r18, 0x05	; 5
    186c:	31 05       	cpc	r19, r1
    186e:	9c f4       	brge	.+38     	; 0x1896 <KEYPAD_adjustKeyNumber+0x6c>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <KEYPAD_adjustKeyNumber+0x52>
    187a:	48 c0       	rjmp	.+144    	; 0x190c <KEYPAD_adjustKeyNumber+0xe2>
    187c:	2b 81       	ldd	r18, Y+3	; 0x03
    187e:	3c 81       	ldd	r19, Y+4	; 0x04
    1880:	23 30       	cpi	r18, 0x03	; 3
    1882:	31 05       	cpc	r19, r1
    1884:	0c f0       	brlt	.+2      	; 0x1888 <KEYPAD_adjustKeyNumber+0x5e>
    1886:	45 c0       	rjmp	.+138    	; 0x1912 <KEYPAD_adjustKeyNumber+0xe8>
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <KEYPAD_adjustKeyNumber+0x6a>
    1892:	39 c0       	rjmp	.+114    	; 0x1906 <KEYPAD_adjustKeyNumber+0xdc>
    1894:	66 c0       	rjmp	.+204    	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	26 30       	cpi	r18, 0x06	; 6
    189c:	31 05       	cpc	r19, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <KEYPAD_adjustKeyNumber+0x78>
    18a0:	41 c0       	rjmp	.+130    	; 0x1924 <KEYPAD_adjustKeyNumber+0xfa>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	87 30       	cpi	r24, 0x07	; 7
    18a8:	91 05       	cpc	r25, r1
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <KEYPAD_adjustKeyNumber+0x84>
    18ac:	3e c0       	rjmp	.+124    	; 0x192a <KEYPAD_adjustKeyNumber+0x100>
    18ae:	37 c0       	rjmp	.+110    	; 0x191e <KEYPAD_adjustKeyNumber+0xf4>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	2c 30       	cpi	r18, 0x0C	; 12
    18b6:	31 05       	cpc	r19, r1
    18b8:	09 f4       	brne	.+2      	; 0x18bc <KEYPAD_adjustKeyNumber+0x92>
    18ba:	46 c0       	rjmp	.+140    	; 0x1948 <KEYPAD_adjustKeyNumber+0x11e>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	8d 30       	cpi	r24, 0x0D	; 13
    18c2:	91 05       	cpc	r25, r1
    18c4:	5c f4       	brge	.+22     	; 0x18dc <KEYPAD_adjustKeyNumber+0xb2>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	2a 30       	cpi	r18, 0x0A	; 10
    18cc:	31 05       	cpc	r19, r1
    18ce:	b1 f1       	breq	.+108    	; 0x193c <KEYPAD_adjustKeyNumber+0x112>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	8b 30       	cpi	r24, 0x0B	; 11
    18d6:	91 05       	cpc	r25, r1
    18d8:	a4 f5       	brge	.+104    	; 0x1942 <KEYPAD_adjustKeyNumber+0x118>
    18da:	2d c0       	rjmp	.+90     	; 0x1936 <KEYPAD_adjustKeyNumber+0x10c>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	2e 30       	cpi	r18, 0x0E	; 14
    18e2:	31 05       	cpc	r19, r1
    18e4:	b9 f1       	breq	.+110    	; 0x1954 <KEYPAD_adjustKeyNumber+0x12a>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	8e 30       	cpi	r24, 0x0E	; 14
    18ec:	91 05       	cpc	r25, r1
    18ee:	7c f1       	brlt	.+94     	; 0x194e <KEYPAD_adjustKeyNumber+0x124>
    18f0:	2b 81       	ldd	r18, Y+3	; 0x03
    18f2:	3c 81       	ldd	r19, Y+4	; 0x04
    18f4:	2f 30       	cpi	r18, 0x0F	; 15
    18f6:	31 05       	cpc	r19, r1
    18f8:	79 f1       	breq	.+94     	; 0x1958 <KEYPAD_adjustKeyNumber+0x12e>
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	80 31       	cpi	r24, 0x10	; 16
    1900:	91 05       	cpc	r25, r1
    1902:	69 f1       	breq	.+90     	; 0x195e <KEYPAD_adjustKeyNumber+0x134>
    1904:	2e c0       	rjmp	.+92     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
	{
	case 1:
		adjustNum = BUTTON1;
    1906:	87 e0       	ldi	r24, 0x07	; 7
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	2b c0       	rjmp	.+86     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 2:
		adjustNum = BUTTON2;
    190c:	88 e0       	ldi	r24, 0x08	; 8
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	28 c0       	rjmp	.+80     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 3:
		adjustNum = BUTTON3;
    1912:	89 e0       	ldi	r24, 0x09	; 9
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	25 c0       	rjmp	.+74     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 4:
		adjustNum = BUTTON4;
    1918:	8f e2       	ldi	r24, 0x2F	; 47
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	22 c0       	rjmp	.+68     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 5:
		adjustNum = BUTTON5;
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	1f c0       	rjmp	.+62     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 6:
		adjustNum = BUTTON6;
    1924:	85 e0       	ldi	r24, 0x05	; 5
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	1c c0       	rjmp	.+56     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 7:
		adjustNum = BUTTON7;
    192a:	86 e0       	ldi	r24, 0x06	; 6
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	19 c0       	rjmp	.+50     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 8:
		adjustNum = BUTTON8;
    1930:	8a e2       	ldi	r24, 0x2A	; 42
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	16 c0       	rjmp	.+44     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 9:
		adjustNum = BUTTON9;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	13 c0       	rjmp	.+38     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 10:
		adjustNum = BUTTON10;
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	10 c0       	rjmp	.+32     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 11:
		adjustNum = BUTTON11;
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 12:
		adjustNum = BUTTON12;
    1948:	8d e2       	ldi	r24, 0x2D	; 45
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	0a c0       	rjmp	.+20     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 13:
		adjustNum = BUTTON13;
    194e:	8d e0       	ldi	r24, 0x0D	; 13
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	07 c0       	rjmp	.+14     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 14:
		adjustNum = BUTTON14;
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 15:
		adjustNum = BUTTON15;
    1958:	8d e3       	ldi	r24, 0x3D	; 61
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <KEYPAD_adjustKeyNumber+0x138>
		break;
	case 16:
		adjustNum = BUTTON16;
    195e:	8b e2       	ldi	r24, 0x2B	; 43
    1960:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return adjustNum;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	2e 97       	sbiw	r28, 0x0e	; 14
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	62 e0       	ldi	r22, 0x02	; 2
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 ea       	ldi	r26, 0xA0	; 160
    19a0:	b1 e4       	ldi	r27, 0x41	; 65
    19a2:	8b 87       	std	Y+11, r24	; 0x0b
    19a4:	9c 87       	std	Y+12, r25	; 0x0c
    19a6:	ad 87       	std	Y+13, r26	; 0x0d
    19a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a ef       	ldi	r20, 0xFA	; 250
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8f 83       	std	Y+7, r24	; 0x07
    19c4:	98 87       	std	Y+8, r25	; 0x08
    19c6:	a9 87       	std	Y+9, r26	; 0x09
    19c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <LCD_init+0x7a>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <LCD_init+0xf8>
	else if (__tmp > 65535)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <LCD_init+0xda>
    1a2e:	88 ec       	ldi	r24, 0xC8	; 200
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_init+0xc8>
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <LCD_init+0xbc>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_init+0x104>
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	64 e0       	ldi	r22, 0x04	; 4
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	65 e0       	ldi	r22, 0x05	; 5
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	66 e0       	ldi	r22, 0x06	; 6
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	67 e0       	ldi	r22, 0x07	; 7
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1aa6:	83 e3       	ldi	r24, 0x33	; 51
    1aa8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1aac:	82 e3       	ldi	r24, 0x32	; 50
    1aae:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1ab2:	88 e2       	ldi	r24, 0x28	; 40
    1ab4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ab8:	8c e0       	ldi	r24, 0x0C	; 12
    1aba:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>
}
    1ac4:	2e 96       	adiw	r28, 0x0e	; 14
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	c3 56       	subi	r28, 0x63	; 99
    1ae4:	d0 40       	sbci	r29, 0x00	; 0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	fe 01       	movw	r30, r28
    1af2:	ed 59       	subi	r30, 0x9D	; 157
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e1 5a       	subi	r30, 0xA1	; 161
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	a2 83       	std	Z+2, r26	; 0x02
    1b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	8e 01       	movw	r16, r28
    1b1a:	05 5a       	subi	r16, 0xA5	; 165
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e1 5a       	subi	r30, 0xA1	; 161
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	80 83       	st	Z, r24
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	a2 83       	std	Z+2, r26	; 0x02
    1b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b46:	fe 01       	movw	r30, r28
    1b48:	e5 5a       	subi	r30, 0xA5	; 165
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	44 f4       	brge	.+16     	; 0x1b74 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b64:	fe 01       	movw	r30, r28
    1b66:	e7 5a       	subi	r30, 0xA7	; 167
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	64 c0       	rjmp	.+200    	; 0x1c3c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b74:	fe 01       	movw	r30, r28
    1b76:	e5 5a       	subi	r30, 0xA5	; 165
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <LCD_sendCommand+0xbe>
    1b92:	43 c0       	rjmp	.+134    	; 0x1c1a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	fe 01       	movw	r30, r28
    1b96:	e1 5a       	subi	r30, 0xA1	; 161
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	07 5a       	subi	r16, 0xA7	; 167
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
    1bca:	1f c0       	rjmp	.+62     	; 0x1c0a <LCD_sendCommand+0x134>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e9 5a       	subi	r30, 0xA9	; 169
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e9 5a       	subi	r30, 0xA9	; 169
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x10e>
    1be8:	fe 01       	movw	r30, r28
    1bea:	e9 5a       	subi	r30, 0xA9	; 169
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	de 01       	movw	r26, r28
    1bf4:	a7 5a       	subi	r26, 0xA7	; 167
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e7 5a       	subi	r30, 0xA7	; 167
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	9c 93       	st	X, r25
    1c08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 5a       	subi	r30, 0xA7	; 167
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	d1 f6       	brne	.-76     	; 0x1bcc <LCD_sendCommand+0xf6>
    1c18:	27 c0       	rjmp	.+78     	; 0x1c68 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	07 5a       	subi	r16, 0xA7	; 167
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	e5 5a       	subi	r30, 0xA5	; 165
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	de 01       	movw	r26, r28
    1c3e:	ab 5a       	subi	r26, 0xAB	; 171
    1c40:	bf 4f       	sbci	r27, 0xFF	; 255
    1c42:	fe 01       	movw	r30, r28
    1c44:	e7 5a       	subi	r30, 0xA7	; 167
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	8d 93       	st	X+, r24
    1c4e:	9c 93       	st	X, r25
    1c50:	fe 01       	movw	r30, r28
    1c52:	eb 5a       	subi	r30, 0xAB	; 171
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_sendCommand+0x184>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	eb 5a       	subi	r30, 0xAB	; 171
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	62 e0       	ldi	r22, 0x02	; 2
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c72:	fe 01       	movw	r30, r28
    1c74:	ef 5a       	subi	r30, 0xAF	; 175
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	80 83       	st	Z, r24
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	03 5b       	subi	r16, 0xB3	; 179
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 5a       	subi	r30, 0xAF	; 175
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e3 5b       	subi	r30, 0xB3	; 179
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	44 f4       	brge	.+16     	; 0x1ce4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e5 5b       	subi	r30, 0xB5	; 181
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	64 c0       	rjmp	.+200    	; 0x1dac <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e3 5b       	subi	r30, 0xB3	; 179
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <LCD_sendCommand+0x22e>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	fe 01       	movw	r30, r28
    1d06:	ef 5a       	subi	r30, 0xAF	; 175
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8e 01       	movw	r16, r28
    1d24:	05 5b       	subi	r16, 0xB5	; 181
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <LCD_sendCommand+0x2a4>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e7 5b       	subi	r30, 0xB7	; 183
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e7 5b       	subi	r30, 0xB7	; 183
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_sendCommand+0x27e>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e7 5b       	subi	r30, 0xB7	; 183
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	de 01       	movw	r26, r28
    1d64:	a5 5b       	subi	r26, 0xB5	; 181
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e5 5b       	subi	r30, 0xB5	; 181
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	9c 93       	st	X, r25
    1d78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e5 5b       	subi	r30, 0xB5	; 181
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	d1 f6       	brne	.-76     	; 0x1d3c <LCD_sendCommand+0x266>
    1d88:	27 c0       	rjmp	.+78     	; 0x1dd8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	05 5b       	subi	r16, 0xB5	; 181
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e3 5b       	subi	r30, 0xB3	; 179
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	de 01       	movw	r26, r28
    1dae:	a9 5b       	subi	r26, 0xB9	; 185
    1db0:	bf 4f       	sbci	r27, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5b       	subi	r30, 0xB5	; 181
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	8d 93       	st	X+, r24
    1dbe:	9c 93       	st	X, r25
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e9 5b       	subi	r30, 0xB9	; 185
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_sendCommand+0x2f4>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 5b       	subi	r30, 0xB9	; 185
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ed 59       	subi	r30, 0x9D	; 157
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 71       	andi	r24, 0x10	; 16
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	95 95       	asr	r25
    1dea:	87 95       	ror	r24
    1dec:	95 95       	asr	r25
    1dee:	87 95       	ror	r24
    1df0:	95 95       	asr	r25
    1df2:	87 95       	ror	r24
    1df4:	95 95       	asr	r25
    1df6:	87 95       	ror	r24
    1df8:	98 2f       	mov	r25, r24
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	49 2f       	mov	r20, r25
    1e00:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1e04:	fe 01       	movw	r30, r28
    1e06:	ed 59       	subi	r30, 0x9D	; 157
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	80 72       	andi	r24, 0x20	; 32
    1e12:	90 70       	andi	r25, 0x00	; 0
    1e14:	95 95       	asr	r25
    1e16:	87 95       	ror	r24
    1e18:	95 95       	asr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	95 95       	asr	r25
    1e1e:	87 95       	ror	r24
    1e20:	95 95       	asr	r25
    1e22:	87 95       	ror	r24
    1e24:	95 95       	asr	r25
    1e26:	87 95       	ror	r24
    1e28:	98 2f       	mov	r25, r24
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	49 2f       	mov	r20, r25
    1e30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 59       	subi	r30, 0x9D	; 157
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	80 74       	andi	r24, 0x40	; 64
    1e42:	90 70       	andi	r25, 0x00	; 0
    1e44:	08 2e       	mov	r0, r24
    1e46:	89 2f       	mov	r24, r25
    1e48:	00 0c       	add	r0, r0
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	99 0b       	sbc	r25, r25
    1e4e:	00 0c       	add	r0, r0
    1e50:	88 1f       	adc	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	98 2f       	mov	r25, r24
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	66 e0       	ldi	r22, 0x06	; 6
    1e5a:	49 2f       	mov	r20, r25
    1e5c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1e60:	fe 01       	movw	r30, r28
    1e62:	ed 59       	subi	r30, 0x9D	; 157
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	98 2f       	mov	r25, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	99 27       	eor	r25, r25
    1e6e:	99 1f       	adc	r25, r25
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	67 e0       	ldi	r22, 0x07	; 7
    1e74:	49 2f       	mov	r20, r25
    1e76:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 5b       	subi	r30, 0xBD	; 189
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e8       	ldi	r26, 0x80	; 128
    1e86:	bf e3       	ldi	r27, 0x3F	; 63
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	8e 01       	movw	r16, r28
    1e92:	01 5c       	subi	r16, 0xC1	; 193
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 5b       	subi	r30, 0xBD	; 189
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ff 96       	adiw	r30, 0x3f	; 63
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9e af       	std	Y+62, r25	; 0x3e
    1ee0:	8d af       	std	Y+61, r24	; 0x3d
    1ee2:	46 c0       	rjmp	.+140    	; 0x1f70 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ff 96       	adiw	r30, 0x3f	; 63
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	64 f5       	brge	.+88     	; 0x1f58 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f00:	fe 01       	movw	r30, r28
    1f02:	ed 5b       	subi	r30, 0xBD	; 189
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e af       	std	Y+62, r25	; 0x3e
    1f2c:	8d af       	std	Y+61, r24	; 0x3d
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_sendCommand+0x478>
    1f30:	88 ec       	ldi	r24, 0xC8	; 200
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9c af       	std	Y+60, r25	; 0x3c
    1f36:	8b af       	std	Y+59, r24	; 0x3b
    1f38:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_sendCommand+0x466>
    1f40:	9c af       	std	Y+60, r25	; 0x3c
    1f42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9e af       	std	Y+62, r25	; 0x3e
    1f4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <LCD_sendCommand+0x45a>
    1f56:	16 c0       	rjmp	.+44     	; 0x1f84 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ff 96       	adiw	r30, 0x3f	; 63
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e af       	std	Y+62, r25	; 0x3e
    1f6e:	8d af       	std	Y+61, r24	; 0x3d
    1f70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f74:	9a af       	std	Y+58, r25	; 0x3a
    1f76:	89 af       	std	Y+57, r24	; 0x39
    1f78:	89 ad       	ldd	r24, Y+57	; 0x39
    1f7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_sendCommand+0x4a6>
    1f80:	9a af       	std	Y+58, r25	; 0x3a
    1f82:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e8       	ldi	r26, 0x80	; 128
    1f94:	bf e3       	ldi	r27, 0x3F	; 63
    1f96:	8d ab       	std	Y+53, r24	; 0x35
    1f98:	9e ab       	std	Y+54, r25	; 0x36
    1f9a:	af ab       	std	Y+55, r26	; 0x37
    1f9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	89 ab       	std	Y+49, r24	; 0x31
    1fb8:	9a ab       	std	Y+50, r25	; 0x32
    1fba:	ab ab       	std	Y+51, r26	; 0x33
    1fbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	8f a7       	std	Y+47, r24	; 0x2f
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	6d a9       	ldd	r22, Y+53	; 0x35
    1ffa:	7e a9       	ldd	r23, Y+54	; 0x36
    1ffc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	98 ab       	std	Y+48, r25	; 0x30
    201e:	8f a7       	std	Y+47, r24	; 0x2f
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <LCD_sendCommand+0x56a>
    2022:	88 ec       	ldi	r24, 0xC8	; 200
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e a7       	std	Y+46, r25	; 0x2e
    2028:	8d a7       	std	Y+45, r24	; 0x2d
    202a:	8d a5       	ldd	r24, Y+45	; 0x2d
    202c:	9e a5       	ldd	r25, Y+46	; 0x2e
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_sendCommand+0x558>
    2032:	9e a7       	std	Y+46, r25	; 0x2e
    2034:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8f a5       	ldd	r24, Y+47	; 0x2f
    2038:	98 a9       	ldd	r25, Y+48	; 0x30
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	98 ab       	std	Y+48, r25	; 0x30
    203e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8f a5       	ldd	r24, Y+47	; 0x2f
    2042:	98 a9       	ldd	r25, Y+48	; 0x30
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <LCD_sendCommand+0x54c>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	69 a9       	ldd	r22, Y+49	; 0x31
    204c:	7a a9       	ldd	r23, Y+50	; 0x32
    204e:	8b a9       	ldd	r24, Y+51	; 0x33
    2050:	9c a9       	ldd	r25, Y+52	; 0x34
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	9c a7       	std	Y+44, r25	; 0x2c
    2064:	8b a7       	std	Y+43, r24	; 0x2b
    2066:	8b a5       	ldd	r24, Y+43	; 0x2b
    2068:	9c a5       	ldd	r25, Y+44	; 0x2c
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_sendCommand+0x594>
    206e:	9c a7       	std	Y+44, r25	; 0x2c
    2070:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	62 e0       	ldi	r22, 0x02	; 2
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e8       	ldi	r26, 0x80	; 128
    2082:	bf e3       	ldi	r27, 0x3F	; 63
    2084:	8f a3       	std	Y+39, r24	; 0x27
    2086:	98 a7       	std	Y+40, r25	; 0x28
    2088:	a9 a7       	std	Y+41, r26	; 0x29
    208a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6f a1       	ldd	r22, Y+39	; 0x27
    208e:	78 a5       	ldd	r23, Y+40	; 0x28
    2090:	89 a5       	ldd	r24, Y+41	; 0x29
    2092:	9a a5       	ldd	r25, Y+42	; 0x2a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8b a3       	std	Y+35, r24	; 0x23
    20a6:	9c a3       	std	Y+36, r25	; 0x24
    20a8:	ad a3       	std	Y+37, r26	; 0x25
    20aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_sendCommand+0x5f8>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9a a3       	std	Y+34, r25	; 0x22
    20ca:	89 a3       	std	Y+33, r24	; 0x21
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    20ce:	6b a1       	ldd	r22, Y+35	; 0x23
    20d0:	7c a1       	ldd	r23, Y+36	; 0x24
    20d2:	8d a1       	ldd	r24, Y+37	; 0x25
    20d4:	9e a1       	ldd	r25, Y+38	; 0x26
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6f a1       	ldd	r22, Y+39	; 0x27
    20e8:	78 a5       	ldd	r23, Y+40	; 0x28
    20ea:	89 a5       	ldd	r24, Y+41	; 0x29
    20ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_sendCommand+0x658>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	98 a3       	std	Y+32, r25	; 0x20
    2116:	8f 8f       	std	Y+31, r24	; 0x1f
    2118:	8f 8d       	ldd	r24, Y+31	; 0x1f
    211a:	98 a1       	ldd	r25, Y+32	; 0x20
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0x646>
    2120:	98 a3       	std	Y+32, r25	; 0x20
    2122:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	89 a1       	ldd	r24, Y+33	; 0x21
    2126:	9a a1       	ldd	r25, Y+34	; 0x22
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_sendCommand+0x63a>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	6b a1       	ldd	r22, Y+35	; 0x23
    213a:	7c a1       	ldd	r23, Y+36	; 0x24
    213c:	8d a1       	ldd	r24, Y+37	; 0x25
    213e:	9e a1       	ldd	r25, Y+38	; 0x26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	9e 8f       	std	Y+30, r25	; 0x1e
    2152:	8d 8f       	std	Y+29, r24	; 0x1d
    2154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_sendCommand+0x682>
    215c:	9e 8f       	std	Y+30, r25	; 0x1e
    215e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2160:	fe 01       	movw	r30, r28
    2162:	ed 59       	subi	r30, 0x9D	; 157
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	98 2f       	mov	r25, r24
    216a:	91 70       	andi	r25, 0x01	; 1
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	64 e0       	ldi	r22, 0x04	; 4
    2170:	49 2f       	mov	r20, r25
    2172:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2176:	fe 01       	movw	r30, r28
    2178:	ed 59       	subi	r30, 0x9D	; 157
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	82 70       	andi	r24, 0x02	; 2
    2184:	90 70       	andi	r25, 0x00	; 0
    2186:	95 95       	asr	r25
    2188:	87 95       	ror	r24
    218a:	98 2f       	mov	r25, r24
    218c:	83 e0       	ldi	r24, 0x03	; 3
    218e:	65 e0       	ldi	r22, 0x05	; 5
    2190:	49 2f       	mov	r20, r25
    2192:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2196:	fe 01       	movw	r30, r28
    2198:	ed 59       	subi	r30, 0x9D	; 157
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	84 70       	andi	r24, 0x04	; 4
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	95 95       	asr	r25
    21a8:	87 95       	ror	r24
    21aa:	95 95       	asr	r25
    21ac:	87 95       	ror	r24
    21ae:	98 2f       	mov	r25, r24
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	66 e0       	ldi	r22, 0x06	; 6
    21b4:	49 2f       	mov	r20, r25
    21b6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    21ba:	fe 01       	movw	r30, r28
    21bc:	ed 59       	subi	r30, 0x9D	; 157
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	88 70       	andi	r24, 0x08	; 8
    21c8:	90 70       	andi	r25, 0x00	; 0
    21ca:	95 95       	asr	r25
    21cc:	87 95       	ror	r24
    21ce:	95 95       	asr	r25
    21d0:	87 95       	ror	r24
    21d2:	95 95       	asr	r25
    21d4:	87 95       	ror	r24
    21d6:	98 2f       	mov	r25, r24
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	67 e0       	ldi	r22, 0x07	; 7
    21dc:	49 2f       	mov	r20, r25
    21de:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	89 8f       	std	Y+25, r24	; 0x19
    21ec:	9a 8f       	std	Y+26, r25	; 0x1a
    21ee:	ab 8f       	std	Y+27, r26	; 0x1b
    21f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	69 8d       	ldd	r22, Y+25	; 0x19
    21f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a ef       	ldi	r20, 0xFA	; 250
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8d 8b       	std	Y+21, r24	; 0x15
    220c:	9e 8b       	std	Y+22, r25	; 0x16
    220e:	af 8b       	std	Y+23, r26	; 0x17
    2210:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2212:	6d 89       	ldd	r22, Y+21	; 0x15
    2214:	7e 89       	ldd	r23, Y+22	; 0x16
    2216:	8f 89       	ldd	r24, Y+23	; 0x17
    2218:	98 8d       	ldd	r25, Y+24	; 0x18
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_sendCommand+0x75e>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9c 8b       	std	Y+20, r25	; 0x14
    2230:	8b 8b       	std	Y+19, r24	; 0x13
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	69 8d       	ldd	r22, Y+25	; 0x19
    224e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_sendCommand+0x7be>
    2276:	88 ec       	ldi	r24, 0xC8	; 200
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9a 8b       	std	Y+18, r25	; 0x12
    227c:	89 8b       	std	Y+17, r24	; 0x11
    227e:	89 89       	ldd	r24, Y+17	; 0x11
    2280:	9a 89       	ldd	r25, Y+18	; 0x12
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_sendCommand+0x7ac>
    2286:	9a 8b       	std	Y+18, r25	; 0x12
    2288:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8b 89       	ldd	r24, Y+19	; 0x13
    2296:	9c 89       	ldd	r25, Y+20	; 0x14
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_sendCommand+0x7a0>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6d 89       	ldd	r22, Y+21	; 0x15
    22a0:	7e 89       	ldd	r23, Y+22	; 0x16
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	98 8b       	std	Y+16, r25	; 0x10
    22b8:	8f 87       	std	Y+15, r24	; 0x0f
    22ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    22bc:	98 89       	ldd	r25, Y+16	; 0x10
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_sendCommand+0x7e8>
    22c2:	98 8b       	std	Y+16, r25	; 0x10
    22c4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	8b 87       	std	Y+11, r24	; 0x0b
    22da:	9c 87       	std	Y+12, r25	; 0x0c
    22dc:	ad 87       	std	Y+13, r26	; 0x0d
    22de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4a ef       	ldi	r20, 0xFA	; 250
    22ee:	54 e4       	ldi	r21, 0x44	; 68
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8f 83       	std	Y+7, r24	; 0x07
    22fa:	98 87       	std	Y+8, r25	; 0x08
    22fc:	a9 87       	std	Y+9, r26	; 0x09
    22fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	2c f4       	brge	.+10     	; 0x2322 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	3f c0       	rjmp	.+126    	; 0x23a0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	4f e7       	ldi	r20, 0x7F	; 127
    2330:	57 e4       	ldi	r21, 0x47	; 71
    2332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2336:	18 16       	cp	r1, r24
    2338:	4c f5       	brge	.+82     	; 0x238c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	6b 85       	ldd	r22, Y+11	; 0x0b
    233c:	7c 85       	ldd	r23, Y+12	; 0x0c
    233e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2340:	9e 85       	ldd	r25, Y+14	; 0x0e
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e2       	ldi	r20, 0x20	; 32
    2348:	51 e4       	ldi	r21, 0x41	; 65
    234a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <LCD_sendCommand+0x8ac>
    2364:	88 ec       	ldi	r24, 0xC8	; 200
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9c 83       	std	Y+4, r25	; 0x04
    236a:	8b 83       	std	Y+3, r24	; 0x03
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_sendCommand+0x89a>
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	69 f7       	brne	.-38     	; 0x2364 <LCD_sendCommand+0x88e>
    238a:	14 c0       	rjmp	.+40     	; 0x23b4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	8d 83       	std	Y+5, r24	; 0x05
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_sendCommand+0x8d6>
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23b4:	cd 59       	subi	r28, 0x9D	; 157
    23b6:	df 4f       	sbci	r29, 0xFF	; 255
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	08 95       	ret

000023cc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	c3 56       	subi	r28, 0x63	; 99
    23da:	d0 40       	sbci	r29, 0x00	; 0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	fe 01       	movw	r30, r28
    23e8:	ed 59       	subi	r30, 0x9D	; 157
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	61 e0       	ldi	r22, 0x01	; 1
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23f8:	fe 01       	movw	r30, r28
    23fa:	e1 5a       	subi	r30, 0xA1	; 161
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e8       	ldi	r26, 0x80	; 128
    2404:	bf e3       	ldi	r27, 0x3F	; 63
    2406:	80 83       	st	Z, r24
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	a2 83       	std	Z+2, r26	; 0x02
    240c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	8e 01       	movw	r16, r28
    2410:	05 5a       	subi	r16, 0xA5	; 165
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	e1 5a       	subi	r30, 0xA1	; 161
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	f8 01       	movw	r30, r16
    2434:	80 83       	st	Z, r24
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	a2 83       	std	Z+2, r26	; 0x02
    243a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    243c:	fe 01       	movw	r30, r28
    243e:	e5 5a       	subi	r30, 0xA5	; 165
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	44 f4       	brge	.+16     	; 0x246a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    245a:	fe 01       	movw	r30, r28
    245c:	e7 5a       	subi	r30, 0xA7	; 167
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	80 83       	st	Z, r24
    2468:	64 c0       	rjmp	.+200    	; 0x2532 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    246a:	fe 01       	movw	r30, r28
    246c:	e5 5a       	subi	r30, 0xA5	; 165
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	0c f0       	brlt	.+2      	; 0x248a <LCD_displayCharacter+0xbe>
    2488:	43 c0       	rjmp	.+134    	; 0x2510 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	fe 01       	movw	r30, r28
    248c:	e1 5a       	subi	r30, 0xA1	; 161
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8e 01       	movw	r16, r28
    24aa:	07 5a       	subi	r16, 0xA7	; 167
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	f8 01       	movw	r30, r16
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	1f c0       	rjmp	.+62     	; 0x2500 <LCD_displayCharacter+0x134>
    24c2:	fe 01       	movw	r30, r28
    24c4:	e9 5a       	subi	r30, 0xA9	; 169
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	88 ec       	ldi	r24, 0xC8	; 200
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	fe 01       	movw	r30, r28
    24d2:	e9 5a       	subi	r30, 0xA9	; 169
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_displayCharacter+0x10e>
    24de:	fe 01       	movw	r30, r28
    24e0:	e9 5a       	subi	r30, 0xA9	; 169
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	de 01       	movw	r26, r28
    24ea:	a7 5a       	subi	r26, 0xA7	; 167
    24ec:	bf 4f       	sbci	r27, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	e7 5a       	subi	r30, 0xA7	; 167
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	11 96       	adiw	r26, 0x01	; 1
    24fc:	9c 93       	st	X, r25
    24fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	fe 01       	movw	r30, r28
    2502:	e7 5a       	subi	r30, 0xA7	; 167
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	d1 f6       	brne	.-76     	; 0x24c2 <LCD_displayCharacter+0xf6>
    250e:	27 c0       	rjmp	.+78     	; 0x255e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	8e 01       	movw	r16, r28
    2512:	07 5a       	subi	r16, 0xA7	; 167
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	e5 5a       	subi	r30, 0xA5	; 165
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	de 01       	movw	r26, r28
    2534:	ab 5a       	subi	r26, 0xAB	; 171
    2536:	bf 4f       	sbci	r27, 0xFF	; 255
    2538:	fe 01       	movw	r30, r28
    253a:	e7 5a       	subi	r30, 0xA7	; 167
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	8d 93       	st	X+, r24
    2544:	9c 93       	st	X, r25
    2546:	fe 01       	movw	r30, r28
    2548:	eb 5a       	subi	r30, 0xAB	; 171
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 81       	ld	r24, Z
    254e:	91 81       	ldd	r25, Z+1	; 0x01
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_displayCharacter+0x184>
    2554:	fe 01       	movw	r30, r28
    2556:	eb 5a       	subi	r30, 0xAB	; 171
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2568:	fe 01       	movw	r30, r28
    256a:	ef 5a       	subi	r30, 0xAF	; 175
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a0 e8       	ldi	r26, 0x80	; 128
    2574:	bf e3       	ldi	r27, 0x3F	; 63
    2576:	80 83       	st	Z, r24
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	a2 83       	std	Z+2, r26	; 0x02
    257c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	8e 01       	movw	r16, r28
    2580:	03 5b       	subi	r16, 0xB3	; 179
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	ef 5a       	subi	r30, 0xAF	; 175
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a ef       	ldi	r20, 0xFA	; 250
    2598:	54 e4       	ldi	r21, 0x44	; 68
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	f8 01       	movw	r30, r16
    25a4:	80 83       	st	Z, r24
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	a2 83       	std	Z+2, r26	; 0x02
    25aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ac:	fe 01       	movw	r30, r28
    25ae:	e3 5b       	subi	r30, 0xB3	; 179
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	44 f4       	brge	.+16     	; 0x25da <LCD_displayCharacter+0x20e>
		__ticks = 1;
    25ca:	fe 01       	movw	r30, r28
    25cc:	e5 5b       	subi	r30, 0xB5	; 181
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	64 c0       	rjmp	.+200    	; 0x26a2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    25da:	fe 01       	movw	r30, r28
    25dc:	e3 5b       	subi	r30, 0xB3	; 179
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	57 e4       	ldi	r21, 0x47	; 71
    25f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	0c f0       	brlt	.+2      	; 0x25fa <LCD_displayCharacter+0x22e>
    25f8:	43 c0       	rjmp	.+134    	; 0x2680 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	fe 01       	movw	r30, r28
    25fc:	ef 5a       	subi	r30, 0xAF	; 175
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8e 01       	movw	r16, r28
    261a:	05 5b       	subi	r16, 0xB5	; 181
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	f8 01       	movw	r30, r16
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
    2630:	1f c0       	rjmp	.+62     	; 0x2670 <LCD_displayCharacter+0x2a4>
    2632:	fe 01       	movw	r30, r28
    2634:	e7 5b       	subi	r30, 0xB7	; 183
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	88 ec       	ldi	r24, 0xC8	; 200
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	fe 01       	movw	r30, r28
    2642:	e7 5b       	subi	r30, 0xB7	; 183
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_displayCharacter+0x27e>
    264e:	fe 01       	movw	r30, r28
    2650:	e7 5b       	subi	r30, 0xB7	; 183
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	de 01       	movw	r26, r28
    265a:	a5 5b       	subi	r26, 0xB5	; 181
    265c:	bf 4f       	sbci	r27, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	e5 5b       	subi	r30, 0xB5	; 181
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	11 96       	adiw	r26, 0x01	; 1
    266c:	9c 93       	st	X, r25
    266e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	fe 01       	movw	r30, r28
    2672:	e5 5b       	subi	r30, 0xB5	; 181
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	d1 f6       	brne	.-76     	; 0x2632 <LCD_displayCharacter+0x266>
    267e:	27 c0       	rjmp	.+78     	; 0x26ce <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	8e 01       	movw	r16, r28
    2682:	05 5b       	subi	r16, 0xB5	; 181
    2684:	1f 4f       	sbci	r17, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	e3 5b       	subi	r30, 0xB3	; 179
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	f8 01       	movw	r30, r16
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	de 01       	movw	r26, r28
    26a4:	a9 5b       	subi	r26, 0xB9	; 185
    26a6:	bf 4f       	sbci	r27, 0xFF	; 255
    26a8:	fe 01       	movw	r30, r28
    26aa:	e5 5b       	subi	r30, 0xB5	; 181
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	8d 93       	st	X+, r24
    26b4:	9c 93       	st	X, r25
    26b6:	fe 01       	movw	r30, r28
    26b8:	e9 5b       	subi	r30, 0xB9	; 185
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_displayCharacter+0x2f4>
    26c4:	fe 01       	movw	r30, r28
    26c6:	e9 5b       	subi	r30, 0xB9	; 185
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 59       	subi	r30, 0x9D	; 157
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	80 71       	andi	r24, 0x10	; 16
    26dc:	90 70       	andi	r25, 0x00	; 0
    26de:	95 95       	asr	r25
    26e0:	87 95       	ror	r24
    26e2:	95 95       	asr	r25
    26e4:	87 95       	ror	r24
    26e6:	95 95       	asr	r25
    26e8:	87 95       	ror	r24
    26ea:	95 95       	asr	r25
    26ec:	87 95       	ror	r24
    26ee:	98 2f       	mov	r25, r24
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	64 e0       	ldi	r22, 0x04	; 4
    26f4:	49 2f       	mov	r20, r25
    26f6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    26fa:	fe 01       	movw	r30, r28
    26fc:	ed 59       	subi	r30, 0x9D	; 157
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	80 72       	andi	r24, 0x20	; 32
    2708:	90 70       	andi	r25, 0x00	; 0
    270a:	95 95       	asr	r25
    270c:	87 95       	ror	r24
    270e:	95 95       	asr	r25
    2710:	87 95       	ror	r24
    2712:	95 95       	asr	r25
    2714:	87 95       	ror	r24
    2716:	95 95       	asr	r25
    2718:	87 95       	ror	r24
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	98 2f       	mov	r25, r24
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	65 e0       	ldi	r22, 0x05	; 5
    2724:	49 2f       	mov	r20, r25
    2726:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    272a:	fe 01       	movw	r30, r28
    272c:	ed 59       	subi	r30, 0x9D	; 157
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	80 74       	andi	r24, 0x40	; 64
    2738:	90 70       	andi	r25, 0x00	; 0
    273a:	08 2e       	mov	r0, r24
    273c:	89 2f       	mov	r24, r25
    273e:	00 0c       	add	r0, r0
    2740:	88 1f       	adc	r24, r24
    2742:	99 0b       	sbc	r25, r25
    2744:	00 0c       	add	r0, r0
    2746:	88 1f       	adc	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	98 2f       	mov	r25, r24
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	66 e0       	ldi	r22, 0x06	; 6
    2750:	49 2f       	mov	r20, r25
    2752:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2756:	fe 01       	movw	r30, r28
    2758:	ed 59       	subi	r30, 0x9D	; 157
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	98 2f       	mov	r25, r24
    2760:	99 1f       	adc	r25, r25
    2762:	99 27       	eor	r25, r25
    2764:	99 1f       	adc	r25, r25
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	67 e0       	ldi	r22, 0x07	; 7
    276a:	49 2f       	mov	r20, r25
    276c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2770:	fe 01       	movw	r30, r28
    2772:	ed 5b       	subi	r30, 0xBD	; 189
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e8       	ldi	r26, 0x80	; 128
    277c:	bf e3       	ldi	r27, 0x3F	; 63
    277e:	80 83       	st	Z, r24
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	a2 83       	std	Z+2, r26	; 0x02
    2784:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2786:	8e 01       	movw	r16, r28
    2788:	01 5c       	subi	r16, 0xC1	; 193
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	ed 5b       	subi	r30, 0xBD	; 189
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a ef       	ldi	r20, 0xFA	; 250
    27a0:	54 e4       	ldi	r21, 0x44	; 68
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	f8 01       	movw	r30, r16
    27ac:	80 83       	st	Z, r24
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	a2 83       	std	Z+2, r26	; 0x02
    27b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b4:	fe 01       	movw	r30, r28
    27b6:	ff 96       	adiw	r30, 0x3f	; 63
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <LCD_displayCharacter+0x40e>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9e af       	std	Y+62, r25	; 0x3e
    27d6:	8d af       	std	Y+61, r24	; 0x3d
    27d8:	46 c0       	rjmp	.+140    	; 0x2866 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    27da:	fe 01       	movw	r30, r28
    27dc:	ff 96       	adiw	r30, 0x3f	; 63
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	3f ef       	ldi	r19, 0xFF	; 255
    27ea:	4f e7       	ldi	r20, 0x7F	; 127
    27ec:	57 e4       	ldi	r21, 0x47	; 71
    27ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f2:	18 16       	cp	r1, r24
    27f4:	64 f5       	brge	.+88     	; 0x284e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f6:	fe 01       	movw	r30, r28
    27f8:	ed 5b       	subi	r30, 0xBD	; 189
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e2       	ldi	r20, 0x20	; 32
    280a:	51 e4       	ldi	r21, 0x41	; 65
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e af       	std	Y+62, r25	; 0x3e
    2822:	8d af       	std	Y+61, r24	; 0x3d
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <LCD_displayCharacter+0x478>
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9c af       	std	Y+60, r25	; 0x3c
    282c:	8b af       	std	Y+59, r24	; 0x3b
    282e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2830:	9c ad       	ldd	r25, Y+60	; 0x3c
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <LCD_displayCharacter+0x466>
    2836:	9c af       	std	Y+60, r25	; 0x3c
    2838:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	8d ad       	ldd	r24, Y+61	; 0x3d
    283c:	9e ad       	ldd	r25, Y+62	; 0x3e
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9e af       	std	Y+62, r25	; 0x3e
    2842:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	8d ad       	ldd	r24, Y+61	; 0x3d
    2846:	9e ad       	ldd	r25, Y+62	; 0x3e
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	69 f7       	brne	.-38     	; 0x2826 <LCD_displayCharacter+0x45a>
    284c:	16 c0       	rjmp	.+44     	; 0x287a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	fe 01       	movw	r30, r28
    2850:	ff 96       	adiw	r30, 0x3f	; 63
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9e af       	std	Y+62, r25	; 0x3e
    2864:	8d af       	std	Y+61, r24	; 0x3d
    2866:	8d ad       	ldd	r24, Y+61	; 0x3d
    2868:	9e ad       	ldd	r25, Y+62	; 0x3e
    286a:	9a af       	std	Y+58, r25	; 0x3a
    286c:	89 af       	std	Y+57, r24	; 0x39
    286e:	89 ad       	ldd	r24, Y+57	; 0x39
    2870:	9a ad       	ldd	r25, Y+58	; 0x3a
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_displayCharacter+0x4a6>
    2876:	9a af       	std	Y+58, r25	; 0x3a
    2878:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	62 e0       	ldi	r22, 0x02	; 2
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e8       	ldi	r26, 0x80	; 128
    288a:	bf e3       	ldi	r27, 0x3F	; 63
    288c:	8d ab       	std	Y+53, r24	; 0x35
    288e:	9e ab       	std	Y+54, r25	; 0x36
    2890:	af ab       	std	Y+55, r26	; 0x37
    2892:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6d a9       	ldd	r22, Y+53	; 0x35
    2896:	7e a9       	ldd	r23, Y+54	; 0x36
    2898:	8f a9       	ldd	r24, Y+55	; 0x37
    289a:	98 ad       	ldd	r25, Y+56	; 0x38
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a ef       	ldi	r20, 0xFA	; 250
    28a2:	54 e4       	ldi	r21, 0x44	; 68
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	89 ab       	std	Y+49, r24	; 0x31
    28ae:	9a ab       	std	Y+50, r25	; 0x32
    28b0:	ab ab       	std	Y+51, r26	; 0x33
    28b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28b4:	69 a9       	ldd	r22, Y+49	; 0x31
    28b6:	7a a9       	ldd	r23, Y+50	; 0x32
    28b8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ba:	9c a9       	ldd	r25, Y+52	; 0x34
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	98 ab       	std	Y+48, r25	; 0x30
    28d2:	8f a7       	std	Y+47, r24	; 0x2f
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    28d6:	69 a9       	ldd	r22, Y+49	; 0x31
    28d8:	7a a9       	ldd	r23, Y+50	; 0x32
    28da:	8b a9       	ldd	r24, Y+51	; 0x33
    28dc:	9c a9       	ldd	r25, Y+52	; 0x34
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6d a9       	ldd	r22, Y+53	; 0x35
    28f0:	7e a9       	ldd	r23, Y+54	; 0x36
    28f2:	8f a9       	ldd	r24, Y+55	; 0x37
    28f4:	98 ad       	ldd	r25, Y+56	; 0x38
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	98 ab       	std	Y+48, r25	; 0x30
    2914:	8f a7       	std	Y+47, r24	; 0x2f
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <LCD_displayCharacter+0x56a>
    2918:	88 ec       	ldi	r24, 0xC8	; 200
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9e a7       	std	Y+46, r25	; 0x2e
    291e:	8d a7       	std	Y+45, r24	; 0x2d
    2920:	8d a5       	ldd	r24, Y+45	; 0x2d
    2922:	9e a5       	ldd	r25, Y+46	; 0x2e
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <LCD_displayCharacter+0x558>
    2928:	9e a7       	std	Y+46, r25	; 0x2e
    292a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	8f a5       	ldd	r24, Y+47	; 0x2f
    292e:	98 a9       	ldd	r25, Y+48	; 0x30
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	98 ab       	std	Y+48, r25	; 0x30
    2934:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	8f a5       	ldd	r24, Y+47	; 0x2f
    2938:	98 a9       	ldd	r25, Y+48	; 0x30
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <LCD_displayCharacter+0x54c>
    293e:	14 c0       	rjmp	.+40     	; 0x2968 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	69 a9       	ldd	r22, Y+49	; 0x31
    2942:	7a a9       	ldd	r23, Y+50	; 0x32
    2944:	8b a9       	ldd	r24, Y+51	; 0x33
    2946:	9c a9       	ldd	r25, Y+52	; 0x34
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	98 ab       	std	Y+48, r25	; 0x30
    2952:	8f a7       	std	Y+47, r24	; 0x2f
    2954:	8f a5       	ldd	r24, Y+47	; 0x2f
    2956:	98 a9       	ldd	r25, Y+48	; 0x30
    2958:	9c a7       	std	Y+44, r25	; 0x2c
    295a:	8b a7       	std	Y+43, r24	; 0x2b
    295c:	8b a5       	ldd	r24, Y+43	; 0x2b
    295e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_displayCharacter+0x594>
    2964:	9c a7       	std	Y+44, r25	; 0x2c
    2966:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	62 e0       	ldi	r22, 0x02	; 2
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	a0 e8       	ldi	r26, 0x80	; 128
    2978:	bf e3       	ldi	r27, 0x3F	; 63
    297a:	8f a3       	std	Y+39, r24	; 0x27
    297c:	98 a7       	std	Y+40, r25	; 0x28
    297e:	a9 a7       	std	Y+41, r26	; 0x29
    2980:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2982:	6f a1       	ldd	r22, Y+39	; 0x27
    2984:	78 a5       	ldd	r23, Y+40	; 0x28
    2986:	89 a5       	ldd	r24, Y+41	; 0x29
    2988:	9a a5       	ldd	r25, Y+42	; 0x2a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	4a ef       	ldi	r20, 0xFA	; 250
    2990:	54 e4       	ldi	r21, 0x44	; 68
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	8b a3       	std	Y+35, r24	; 0x23
    299c:	9c a3       	std	Y+36, r25	; 0x24
    299e:	ad a3       	std	Y+37, r26	; 0x25
    29a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a2:	6b a1       	ldd	r22, Y+35	; 0x23
    29a4:	7c a1       	ldd	r23, Y+36	; 0x24
    29a6:	8d a1       	ldd	r24, Y+37	; 0x25
    29a8:	9e a1       	ldd	r25, Y+38	; 0x26
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e8       	ldi	r20, 0x80	; 128
    29b0:	5f e3       	ldi	r21, 0x3F	; 63
    29b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b6:	88 23       	and	r24, r24
    29b8:	2c f4       	brge	.+10     	; 0x29c4 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9a a3       	std	Y+34, r25	; 0x22
    29c0:	89 a3       	std	Y+33, r24	; 0x21
    29c2:	3f c0       	rjmp	.+126    	; 0x2a42 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    29c4:	6b a1       	ldd	r22, Y+35	; 0x23
    29c6:	7c a1       	ldd	r23, Y+36	; 0x24
    29c8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ca:	9e a1       	ldd	r25, Y+38	; 0x26
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	3f ef       	ldi	r19, 0xFF	; 255
    29d0:	4f e7       	ldi	r20, 0x7F	; 127
    29d2:	57 e4       	ldi	r21, 0x47	; 71
    29d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d8:	18 16       	cp	r1, r24
    29da:	4c f5       	brge	.+82     	; 0x2a2e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29dc:	6f a1       	ldd	r22, Y+39	; 0x27
    29de:	78 a5       	ldd	r23, Y+40	; 0x28
    29e0:	89 a5       	ldd	r24, Y+41	; 0x29
    29e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9a a3       	std	Y+34, r25	; 0x22
    2a02:	89 a3       	std	Y+33, r24	; 0x21
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <LCD_displayCharacter+0x658>
    2a06:	88 ec       	ldi	r24, 0xC8	; 200
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	98 a3       	std	Y+32, r25	; 0x20
    2a0c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a10:	98 a1       	ldd	r25, Y+32	; 0x20
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_displayCharacter+0x646>
    2a16:	98 a3       	std	Y+32, r25	; 0x20
    2a18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	9a a3       	std	Y+34, r25	; 0x22
    2a22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a24:	89 a1       	ldd	r24, Y+33	; 0x21
    2a26:	9a a1       	ldd	r25, Y+34	; 0x22
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	69 f7       	brne	.-38     	; 0x2a06 <LCD_displayCharacter+0x63a>
    2a2c:	14 c0       	rjmp	.+40     	; 0x2a56 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a30:	7c a1       	ldd	r23, Y+36	; 0x24
    2a32:	8d a1       	ldd	r24, Y+37	; 0x25
    2a34:	9e a1       	ldd	r25, Y+38	; 0x26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	89 a3       	std	Y+33, r24	; 0x21
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	9a a1       	ldd	r25, Y+34	; 0x22
    2a46:	9e 8f       	std	Y+30, r25	; 0x1e
    2a48:	8d 8f       	std	Y+29, r24	; 0x1d
    2a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <LCD_displayCharacter+0x682>
    2a52:	9e 8f       	std	Y+30, r25	; 0x1e
    2a54:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2a56:	fe 01       	movw	r30, r28
    2a58:	ed 59       	subi	r30, 0x9D	; 157
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	98 2f       	mov	r25, r24
    2a60:	91 70       	andi	r25, 0x01	; 1
    2a62:	83 e0       	ldi	r24, 0x03	; 3
    2a64:	64 e0       	ldi	r22, 0x04	; 4
    2a66:	49 2f       	mov	r20, r25
    2a68:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	ed 59       	subi	r30, 0x9D	; 157
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	82 70       	andi	r24, 0x02	; 2
    2a7a:	90 70       	andi	r25, 0x00	; 0
    2a7c:	95 95       	asr	r25
    2a7e:	87 95       	ror	r24
    2a80:	98 2f       	mov	r25, r24
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	65 e0       	ldi	r22, 0x05	; 5
    2a86:	49 2f       	mov	r20, r25
    2a88:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ed 59       	subi	r30, 0x9D	; 157
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	84 70       	andi	r24, 0x04	; 4
    2a9a:	90 70       	andi	r25, 0x00	; 0
    2a9c:	95 95       	asr	r25
    2a9e:	87 95       	ror	r24
    2aa0:	95 95       	asr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	83 e0       	ldi	r24, 0x03	; 3
    2aa8:	66 e0       	ldi	r22, 0x06	; 6
    2aaa:	49 2f       	mov	r20, r25
    2aac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ed 59       	subi	r30, 0x9D	; 157
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	88 70       	andi	r24, 0x08	; 8
    2abe:	90 70       	andi	r25, 0x00	; 0
    2ac0:	95 95       	asr	r25
    2ac2:	87 95       	ror	r24
    2ac4:	95 95       	asr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	95 95       	asr	r25
    2aca:	87 95       	ror	r24
    2acc:	98 2f       	mov	r25, r24
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	67 e0       	ldi	r22, 0x07	; 7
    2ad2:	49 2f       	mov	r20, r25
    2ad4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e8       	ldi	r26, 0x80	; 128
    2ade:	bf e3       	ldi	r27, 0x3F	; 63
    2ae0:	89 8f       	std	Y+25, r24	; 0x19
    2ae2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4a ef       	ldi	r20, 0xFA	; 250
    2af6:	54 e4       	ldi	r21, 0x44	; 68
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	8d 8b       	std	Y+21, r24	; 0x15
    2b02:	9e 8b       	std	Y+22, r25	; 0x16
    2b04:	af 8b       	std	Y+23, r26	; 0x17
    2b06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b08:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e8       	ldi	r20, 0x80	; 128
    2b16:	5f e3       	ldi	r21, 0x3F	; 63
    2b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b1c:	88 23       	and	r24, r24
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9c 8b       	std	Y+20, r25	; 0x14
    2b26:	8b 8b       	std	Y+19, r24	; 0x13
    2b28:	3f c0       	rjmp	.+126    	; 0x2ba8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b30:	98 8d       	ldd	r25, Y+24	; 0x18
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	3f ef       	ldi	r19, 0xFF	; 255
    2b36:	4f e7       	ldi	r20, 0x7F	; 127
    2b38:	57 e4       	ldi	r21, 0x47	; 71
    2b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3e:	18 16       	cp	r1, r24
    2b40:	4c f5       	brge	.+82     	; 0x2b94 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b42:	69 8d       	ldd	r22, Y+25	; 0x19
    2b44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9c 8b       	std	Y+20, r25	; 0x14
    2b68:	8b 8b       	std	Y+19, r24	; 0x13
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <LCD_displayCharacter+0x7be>
    2b6c:	88 ec       	ldi	r24, 0xC8	; 200
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9a 8b       	std	Y+18, r25	; 0x12
    2b72:	89 8b       	std	Y+17, r24	; 0x11
    2b74:	89 89       	ldd	r24, Y+17	; 0x11
    2b76:	9a 89       	ldd	r25, Y+18	; 0x12
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <LCD_displayCharacter+0x7ac>
    2b7c:	9a 8b       	std	Y+18, r25	; 0x12
    2b7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	8b 89       	ldd	r24, Y+19	; 0x13
    2b82:	9c 89       	ldd	r25, Y+20	; 0x14
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	9c 8b       	std	Y+20, r25	; 0x14
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	69 f7       	brne	.-38     	; 0x2b6c <LCD_displayCharacter+0x7a0>
    2b92:	14 c0       	rjmp	.+40     	; 0x2bbc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b94:	6d 89       	ldd	r22, Y+21	; 0x15
    2b96:	7e 89       	ldd	r23, Y+22	; 0x16
    2b98:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9c 8b       	std	Y+20, r25	; 0x14
    2ba6:	8b 8b       	std	Y+19, r24	; 0x13
    2ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    2baa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bac:	98 8b       	std	Y+16, r25	; 0x10
    2bae:	8f 87       	std	Y+15, r24	; 0x0f
    2bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb2:	98 89       	ldd	r25, Y+16	; 0x10
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <LCD_displayCharacter+0x7e8>
    2bb8:	98 8b       	std	Y+16, r25	; 0x10
    2bba:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e8       	ldi	r26, 0x80	; 128
    2bcc:	bf e3       	ldi	r27, 0x3F	; 63
    2bce:	8b 87       	std	Y+11, r24	; 0x0b
    2bd0:	9c 87       	std	Y+12, r25	; 0x0c
    2bd2:	ad 87       	std	Y+13, r26	; 0x0d
    2bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8f 83       	std	Y+7, r24	; 0x07
    2bf0:	98 87       	std	Y+8, r25	; 0x08
    2bf2:	a9 87       	std	Y+9, r26	; 0x09
    2bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf8:	78 85       	ldd	r23, Y+8	; 0x08
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	3f c0       	rjmp	.+126    	; 0x2c96 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c18:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1a:	78 85       	ldd	r23, Y+8	; 0x08
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	4c f5       	brge	.+82     	; 0x2c82 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <LCD_displayCharacter+0x8ac>
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_displayCharacter+0x89a>
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	69 f7       	brne	.-38     	; 0x2c5a <LCD_displayCharacter+0x88e>
    2c80:	14 c0       	rjmp	.+40     	; 0x2caa <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_displayCharacter+0x8d6>
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2caa:	cd 59       	subi	r28, 0x9D	; 157
    2cac:	df 4f       	sbci	r29, 0xFF	; 255
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	08 95       	ret

00002cc2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <LCD_displayString+0x6>
    2cc8:	0f 92       	push	r0
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cd2:	19 82       	std	Y+1, r1	; 0x01
    2cd4:	0e c0       	rjmp	.+28     	; 0x2cf2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
		i++;
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	8f 5f       	subi	r24, 0xFF	; 255
    2cf0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	e2 0f       	add	r30, r18
    2d00:	f3 1f       	adc	r31, r19
    2d02:	80 81       	ld	r24, Z
    2d04:	88 23       	and	r24, r24
    2d06:	39 f7       	brne	.-50     	; 0x2cd6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <LCD_moveCursor+0x6>
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <LCD_moveCursor+0x8>
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	3d 83       	std	Y+5, r19	; 0x05
    2d2e:	2c 83       	std	Y+4, r18	; 0x04
    2d30:	8c 81       	ldd	r24, Y+4	; 0x04
    2d32:	9d 81       	ldd	r25, Y+5	; 0x05
    2d34:	81 30       	cpi	r24, 0x01	; 1
    2d36:	91 05       	cpc	r25, r1
    2d38:	c1 f0       	breq	.+48     	; 0x2d6a <LCD_moveCursor+0x56>
    2d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d3e:	22 30       	cpi	r18, 0x02	; 2
    2d40:	31 05       	cpc	r19, r1
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <LCD_moveCursor+0x3a>
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	9d 81       	ldd	r25, Y+5	; 0x05
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	61 f0       	breq	.+24     	; 0x2d64 <LCD_moveCursor+0x50>
    2d4c:	19 c0       	rjmp	.+50     	; 0x2d80 <LCD_moveCursor+0x6c>
    2d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d50:	3d 81       	ldd	r19, Y+5	; 0x05
    2d52:	22 30       	cpi	r18, 0x02	; 2
    2d54:	31 05       	cpc	r19, r1
    2d56:	69 f0       	breq	.+26     	; 0x2d72 <LCD_moveCursor+0x5e>
    2d58:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5c:	83 30       	cpi	r24, 0x03	; 3
    2d5e:	91 05       	cpc	r25, r1
    2d60:	61 f0       	breq	.+24     	; 0x2d7a <LCD_moveCursor+0x66>
    2d62:	0e c0       	rjmp	.+28     	; 0x2d80 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	0b c0       	rjmp	.+22     	; 0x2d80 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	80 5c       	subi	r24, 0xC0	; 192
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	07 c0       	rjmp	.+14     	; 0x2d80 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	80 5f       	subi	r24, 0xF0	; 240
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	03 c0       	rjmp	.+6      	; 0x2d80 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	80 5b       	subi	r24, 0xB0	; 176
    2d7e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	80 68       	ori	r24, 0x80	; 128
    2d84:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <LCD_displayStringRowColumn+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <LCD_displayStringRowColumn+0x8>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	6a 83       	std	Y+2, r22	; 0x02
    2da8:	5c 83       	std	Y+4, r21	; 0x04
    2daa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	6a 81       	ldd	r22, Y+2	; 0x02
    2db0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
}
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	62 97       	sbiw	r28, 0x12	; 18
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	9a 8b       	std	Y+18, r25	; 0x12
    2de0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2de2:	89 89       	ldd	r24, Y+17	; 0x11
    2de4:	9a 89       	ldd	r25, Y+18	; 0x12
    2de6:	9e 01       	movw	r18, r28
    2de8:	2f 5f       	subi	r18, 0xFF	; 255
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	b9 01       	movw	r22, r18
    2dee:	4a e0       	ldi	r20, 0x0A	; 10
    2df0:	50 e0       	ldi	r21, 0x00	; 0
    2df2:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2df6:	ce 01       	movw	r24, r28
    2df8:	01 96       	adiw	r24, 0x01	; 1
    2dfa:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
}
    2dfe:	62 96       	adiw	r28, 0x12	; 18
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <LCD_sendCommand>
}
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <Create_system_password>:
}orders_from_HMI_ECU;

/*
 * function to get values from keypad and show '*' in the lcd
 * */
void Create_system_password(uint8 pass[], uint8 repass[]){
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	ee 97       	sbiw	r28, 0x3e	; 62
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	9c af       	std	Y+60, r25	; 0x3c
    2e3e:	8b af       	std	Y+59, r24	; 0x3b
    2e40:	7e af       	std	Y+62, r23	; 0x3e
    2e42:	6d af       	std	Y+61, r22	; 0x3d
	LCD_clearScreen();
    2e44:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a8 e4       	ldi	r26, 0x48	; 72
    2e4e:	b3 e4       	ldi	r27, 0x43	; 67
    2e50:	8d ab       	std	Y+53, r24	; 0x35
    2e52:	9e ab       	std	Y+54, r25	; 0x36
    2e54:	af ab       	std	Y+55, r26	; 0x37
    2e56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6d a9       	ldd	r22, Y+53	; 0x35
    2e5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a ef       	ldi	r20, 0xFA	; 250
    2e66:	54 e4       	ldi	r21, 0x44	; 68
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	89 ab       	std	Y+49, r24	; 0x31
    2e72:	9a ab       	std	Y+50, r25	; 0x32
    2e74:	ab ab       	std	Y+51, r26	; 0x33
    2e76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e78:	69 a9       	ldd	r22, Y+49	; 0x31
    2e7a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <Create_system_password+0x76>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	98 ab       	std	Y+48, r25	; 0x30
    2e96:	8f a7       	std	Y+47, r24	; 0x2f
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <Create_system_password+0xf4>
	else if (__tmp > 65535)
    2e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <Create_system_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb4:	7e a9       	ldd	r23, Y+54	; 0x36
    2eb6:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb8:	98 ad       	ldd	r25, Y+56	; 0x38
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	98 ab       	std	Y+48, r25	; 0x30
    2ed8:	8f a7       	std	Y+47, r24	; 0x2f
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <Create_system_password+0xd6>
    2edc:	88 ec       	ldi	r24, 0xC8	; 200
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9e a7       	std	Y+46, r25	; 0x2e
    2ee2:	8d a7       	std	Y+45, r24	; 0x2d
    2ee4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ee6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <Create_system_password+0xc4>
    2eec:	9e a7       	std	Y+46, r25	; 0x2e
    2eee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	98 ab       	std	Y+48, r25	; 0x30
    2ef8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efc:	98 a9       	ldd	r25, Y+48	; 0x30
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <Create_system_password+0xb8>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <Create_system_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	69 a9       	ldd	r22, Y+49	; 0x31
    2f06:	7a a9       	ldd	r23, Y+50	; 0x32
    2f08:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	98 ab       	std	Y+48, r25	; 0x30
    2f16:	8f a7       	std	Y+47, r24	; 0x2f
    2f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f1c:	9c a7       	std	Y+44, r25	; 0x2c
    2f1e:	8b a7       	std	Y+43, r24	; 0x2b
    2f20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <Create_system_password+0x100>
    2f28:	9c a7       	std	Y+44, r25	; 0x2c
    2f2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	LCD_displayString("plz enter pass: ");
    2f2c:	80 e6       	ldi	r24, 0x60	; 96
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
	LCD_moveCursor(1,0);
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
	for(uint8 i =0 ; i<5 ;i++){
    2f3c:	1a ae       	std	Y+58, r1	; 0x3a
    2f3e:	8f c0       	rjmp	.+286    	; 0x305e <Create_system_password+0x23a>
		do {
			pass[i]=KEYPAD_getPressedKey();
    2f40:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f48:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f4a:	8c 01       	movw	r16, r24
    2f4c:	02 0f       	add	r16, r18
    2f4e:	13 1f       	adc	r17, r19
    2f50:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    2f54:	f8 01       	movw	r30, r16
    2f56:	80 83       	st	Z, r24
		}while(pass[i]>9);
    2f58:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f60:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f62:	fc 01       	movw	r30, r24
    2f64:	e2 0f       	add	r30, r18
    2f66:	f3 1f       	adc	r31, r19
    2f68:	80 81       	ld	r24, Z
    2f6a:	8a 30       	cpi	r24, 0x0A	; 10
    2f6c:	48 f7       	brcc	.-46     	; 0x2f40 <Create_system_password+0x11c>
		LCD_displayCharacter('*');
    2f6e:	8a e2       	ldi	r24, 0x2A	; 42
    2f70:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	a6 e9       	ldi	r26, 0x96	; 150
    2f7a:	b3 e4       	ldi	r27, 0x43	; 67
    2f7c:	8f a3       	std	Y+39, r24	; 0x27
    2f7e:	98 a7       	std	Y+40, r25	; 0x28
    2f80:	a9 a7       	std	Y+41, r26	; 0x29
    2f82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f84:	6f a1       	ldd	r22, Y+39	; 0x27
    2f86:	78 a5       	ldd	r23, Y+40	; 0x28
    2f88:	89 a5       	ldd	r24, Y+41	; 0x29
    2f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	4a ef       	ldi	r20, 0xFA	; 250
    2f92:	54 e4       	ldi	r21, 0x44	; 68
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	8b a3       	std	Y+35, r24	; 0x23
    2f9e:	9c a3       	std	Y+36, r25	; 0x24
    2fa0:	ad a3       	std	Y+37, r26	; 0x25
    2fa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2faa:	9e a1       	ldd	r25, Y+38	; 0x26
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb8:	88 23       	and	r24, r24
    2fba:	2c f4       	brge	.+10     	; 0x2fc6 <Create_system_password+0x1a2>
		__ticks = 1;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	9a a3       	std	Y+34, r25	; 0x22
    2fc2:	89 a3       	std	Y+33, r24	; 0x21
    2fc4:	3f c0       	rjmp	.+126    	; 0x3044 <Create_system_password+0x220>
	else if (__tmp > 65535)
    2fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fca:	8d a1       	ldd	r24, Y+37	; 0x25
    2fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	3f ef       	ldi	r19, 0xFF	; 255
    2fd2:	4f e7       	ldi	r20, 0x7F	; 127
    2fd4:	57 e4       	ldi	r21, 0x47	; 71
    2fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fda:	18 16       	cp	r1, r24
    2fdc:	4c f5       	brge	.+82     	; 0x3030 <Create_system_password+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fde:	6f a1       	ldd	r22, Y+39	; 0x27
    2fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e2       	ldi	r20, 0x20	; 32
    2fec:	51 e4       	ldi	r21, 0x41	; 65
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	9a a3       	std	Y+34, r25	; 0x22
    3004:	89 a3       	std	Y+33, r24	; 0x21
    3006:	0f c0       	rjmp	.+30     	; 0x3026 <Create_system_password+0x202>
    3008:	88 ec       	ldi	r24, 0xC8	; 200
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	98 a3       	std	Y+32, r25	; 0x20
    300e:	8f 8f       	std	Y+31, r24	; 0x1f
    3010:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3012:	98 a1       	ldd	r25, Y+32	; 0x20
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <Create_system_password+0x1f0>
    3018:	98 a3       	std	Y+32, r25	; 0x20
    301a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301c:	89 a1       	ldd	r24, Y+33	; 0x21
    301e:	9a a1       	ldd	r25, Y+34	; 0x22
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	9a a3       	std	Y+34, r25	; 0x22
    3024:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3026:	89 a1       	ldd	r24, Y+33	; 0x21
    3028:	9a a1       	ldd	r25, Y+34	; 0x22
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	69 f7       	brne	.-38     	; 0x3008 <Create_system_password+0x1e4>
    302e:	14 c0       	rjmp	.+40     	; 0x3058 <Create_system_password+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3030:	6b a1       	ldd	r22, Y+35	; 0x23
    3032:	7c a1       	ldd	r23, Y+36	; 0x24
    3034:	8d a1       	ldd	r24, Y+37	; 0x25
    3036:	9e a1       	ldd	r25, Y+38	; 0x26
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	9a a3       	std	Y+34, r25	; 0x22
    3042:	89 a3       	std	Y+33, r24	; 0x21
    3044:	89 a1       	ldd	r24, Y+33	; 0x21
    3046:	9a a1       	ldd	r25, Y+34	; 0x22
    3048:	9e 8f       	std	Y+30, r25	; 0x1e
    304a:	8d 8f       	std	Y+29, r24	; 0x1d
    304c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <Create_system_password+0x22c>
    3054:	9e 8f       	std	Y+30, r25	; 0x1e
    3056:	8d 8f       	std	Y+29, r24	; 0x1d
void Create_system_password(uint8 pass[], uint8 repass[]){
	LCD_clearScreen();
	_delay_ms(200);
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);
	for(uint8 i =0 ; i<5 ;i++){
    3058:	8a ad       	ldd	r24, Y+58	; 0x3a
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	8a af       	std	Y+58, r24	; 0x3a
    305e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3060:	85 30       	cpi	r24, 0x05	; 5
    3062:	08 f4       	brcc	.+2      	; 0x3066 <Create_system_password+0x242>
    3064:	6d cf       	rjmp	.-294    	; 0x2f40 <Create_system_password+0x11c>
		}while(pass[i]>9);
		LCD_displayCharacter('*');
		_delay_ms(300);

	}
	while(KEYPAD_getPressedKey()!=13);
    3066:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    306a:	8d 30       	cpi	r24, 0x0D	; 13
    306c:	e1 f7       	brne	.-8      	; 0x3066 <Create_system_password+0x242>
	LCD_clearScreen();
    306e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	a8 e4       	ldi	r26, 0x48	; 72
    3078:	b3 e4       	ldi	r27, 0x43	; 67
    307a:	89 8f       	std	Y+25, r24	; 0x19
    307c:	9a 8f       	std	Y+26, r25	; 0x1a
    307e:	ab 8f       	std	Y+27, r26	; 0x1b
    3080:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3082:	69 8d       	ldd	r22, Y+25	; 0x19
    3084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	4a ef       	ldi	r20, 0xFA	; 250
    3090:	54 e4       	ldi	r21, 0x44	; 68
    3092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	8d 8b       	std	Y+21, r24	; 0x15
    309c:	9e 8b       	std	Y+22, r25	; 0x16
    309e:	af 8b       	std	Y+23, r26	; 0x17
    30a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30a2:	6d 89       	ldd	r22, Y+21	; 0x15
    30a4:	7e 89       	ldd	r23, Y+22	; 0x16
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e8       	ldi	r20, 0x80	; 128
    30b0:	5f e3       	ldi	r21, 0x3F	; 63
    30b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b6:	88 23       	and	r24, r24
    30b8:	2c f4       	brge	.+10     	; 0x30c4 <Create_system_password+0x2a0>
		__ticks = 1;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	9c 8b       	std	Y+20, r25	; 0x14
    30c0:	8b 8b       	std	Y+19, r24	; 0x13
    30c2:	3f c0       	rjmp	.+126    	; 0x3142 <Create_system_password+0x31e>
	else if (__tmp > 65535)
    30c4:	6d 89       	ldd	r22, Y+21	; 0x15
    30c6:	7e 89       	ldd	r23, Y+22	; 0x16
    30c8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ca:	98 8d       	ldd	r25, Y+24	; 0x18
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	3f ef       	ldi	r19, 0xFF	; 255
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	57 e4       	ldi	r21, 0x47	; 71
    30d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d8:	18 16       	cp	r1, r24
    30da:	4c f5       	brge	.+82     	; 0x312e <Create_system_password+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30dc:	69 8d       	ldd	r22, Y+25	; 0x19
    30de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e2       	ldi	r20, 0x20	; 32
    30ea:	51 e4       	ldi	r21, 0x41	; 65
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	bc 01       	movw	r22, r24
    30f6:	cd 01       	movw	r24, r26
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9c 8b       	std	Y+20, r25	; 0x14
    3102:	8b 8b       	std	Y+19, r24	; 0x13
    3104:	0f c0       	rjmp	.+30     	; 0x3124 <Create_system_password+0x300>
    3106:	88 ec       	ldi	r24, 0xC8	; 200
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9a 8b       	std	Y+18, r25	; 0x12
    310c:	89 8b       	std	Y+17, r24	; 0x11
    310e:	89 89       	ldd	r24, Y+17	; 0x11
    3110:	9a 89       	ldd	r25, Y+18	; 0x12
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <Create_system_password+0x2ee>
    3116:	9a 8b       	std	Y+18, r25	; 0x12
    3118:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311a:	8b 89       	ldd	r24, Y+19	; 0x13
    311c:	9c 89       	ldd	r25, Y+20	; 0x14
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	9c 8b       	std	Y+20, r25	; 0x14
    3122:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3124:	8b 89       	ldd	r24, Y+19	; 0x13
    3126:	9c 89       	ldd	r25, Y+20	; 0x14
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	69 f7       	brne	.-38     	; 0x3106 <Create_system_password+0x2e2>
    312c:	14 c0       	rjmp	.+40     	; 0x3156 <Create_system_password+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312e:	6d 89       	ldd	r22, Y+21	; 0x15
    3130:	7e 89       	ldd	r23, Y+22	; 0x16
    3132:	8f 89       	ldd	r24, Y+23	; 0x17
    3134:	98 8d       	ldd	r25, Y+24	; 0x18
    3136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	9c 8b       	std	Y+20, r25	; 0x14
    3140:	8b 8b       	std	Y+19, r24	; 0x13
    3142:	8b 89       	ldd	r24, Y+19	; 0x13
    3144:	9c 89       	ldd	r25, Y+20	; 0x14
    3146:	98 8b       	std	Y+16, r25	; 0x10
    3148:	8f 87       	std	Y+15, r24	; 0x0f
    314a:	8f 85       	ldd	r24, Y+15	; 0x0f
    314c:	98 89       	ldd	r25, Y+16	; 0x10
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <Create_system_password+0x32a>
    3152:	98 8b       	std	Y+16, r25	; 0x10
    3154:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	LCD_displayString("plz re-enter the");
    3156:	81 e7       	ldi	r24, 0x71	; 113
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
	LCD_moveCursor(1, 0);
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
	LCD_displayString("same pass :");
    3166:	82 e8       	ldi	r24, 0x82	; 130
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
	for(uint8 i =0 ; i<5 ;i++){
    316e:	19 ae       	std	Y+57, r1	; 0x39
    3170:	8f c0       	rjmp	.+286    	; 0x3290 <Create_system_password+0x46c>
		do {
			repass[i]=KEYPAD_getPressedKey();
    3172:	89 ad       	ldd	r24, Y+57	; 0x39
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	8d ad       	ldd	r24, Y+61	; 0x3d
    317a:	9e ad       	ldd	r25, Y+62	; 0x3e
    317c:	8c 01       	movw	r16, r24
    317e:	02 0f       	add	r16, r18
    3180:	13 1f       	adc	r17, r19
    3182:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    3186:	f8 01       	movw	r30, r16
    3188:	80 83       	st	Z, r24
		}while(repass[i]>9);
    318a:	89 ad       	ldd	r24, Y+57	; 0x39
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	8d ad       	ldd	r24, Y+61	; 0x3d
    3192:	9e ad       	ldd	r25, Y+62	; 0x3e
    3194:	fc 01       	movw	r30, r24
    3196:	e2 0f       	add	r30, r18
    3198:	f3 1f       	adc	r31, r19
    319a:	80 81       	ld	r24, Z
    319c:	8a 30       	cpi	r24, 0x0A	; 10
    319e:	48 f7       	brcc	.-46     	; 0x3172 <Create_system_password+0x34e>
		LCD_displayCharacter('*');
    31a0:	8a e2       	ldi	r24, 0x2A	; 42
    31a2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a6 e9       	ldi	r26, 0x96	; 150
    31ac:	b3 e4       	ldi	r27, 0x43	; 67
    31ae:	8b 87       	std	Y+11, r24	; 0x0b
    31b0:	9c 87       	std	Y+12, r25	; 0x0c
    31b2:	ad 87       	std	Y+13, r26	; 0x0d
    31b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8f 83       	std	Y+7, r24	; 0x07
    31d0:	98 87       	std	Y+8, r25	; 0x08
    31d2:	a9 87       	std	Y+9, r26	; 0x09
    31d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <Create_system_password+0x3d4>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <Create_system_password+0x452>
	else if (__tmp > 65535)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <Create_system_password+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	6b 85       	ldd	r22, Y+11	; 0x0b
    3212:	7c 85       	ldd	r23, Y+12	; 0x0c
    3214:	8d 85       	ldd	r24, Y+13	; 0x0d
    3216:	9e 85       	ldd	r25, Y+14	; 0x0e
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <Create_system_password+0x434>
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9c 83       	std	Y+4, r25	; 0x04
    3240:	8b 83       	std	Y+3, r24	; 0x03
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <Create_system_password+0x422>
    324a:	9c 83       	std	Y+4, r25	; 0x04
    324c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <Create_system_password+0x416>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <Create_system_password+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6f 81       	ldd	r22, Y+7	; 0x07
    3264:	78 85       	ldd	r23, Y+8	; 0x08
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <Create_system_password+0x45e>
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	_delay_ms(200);
	LCD_displayString("plz re-enter the");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass :");
	for(uint8 i =0 ; i<5 ;i++){
    328a:	89 ad       	ldd	r24, Y+57	; 0x39
    328c:	8f 5f       	subi	r24, 0xFF	; 255
    328e:	89 af       	std	Y+57, r24	; 0x39
    3290:	89 ad       	ldd	r24, Y+57	; 0x39
    3292:	85 30       	cpi	r24, 0x05	; 5
    3294:	08 f4       	brcc	.+2      	; 0x3298 <Create_system_password+0x474>
    3296:	6d cf       	rjmp	.-294    	; 0x3172 <Create_system_password+0x34e>
			repass[i]=KEYPAD_getPressedKey();
		}while(repass[i]>9);
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	while(KEYPAD_getPressedKey()!=13);
    3298:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    329c:	8d 30       	cpi	r24, 0x0D	; 13
    329e:	e1 f7       	brne	.-8      	; 0x3298 <Create_system_password+0x474>
	LCD_clearScreen();
    32a0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
}
    32a4:	ee 96       	adiw	r28, 0x3e	; 62
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	08 95       	ret

000032ba <Check_created_password>:

/*
 * function to send the two passwords to the Control_ecu by the UART
 * */
errors Check_created_password(uint8 pass[], uint8 repass[]){
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	27 97       	sbiw	r28, 0x07	; 7
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	9d 83       	std	Y+5, r25	; 0x05
    32d0:	8c 83       	std	Y+4, r24	; 0x04
    32d2:	7f 83       	std	Y+7, r23	; 0x07
    32d4:	6e 83       	std	Y+6, r22	; 0x06

	for(uint8 i =0;i<5;i++)
    32d6:	1a 82       	std	Y+2, r1	; 0x02
    32d8:	0e c0       	rjmp	.+28     	; 0x32f6 <Check_created_password+0x3c>
		UART_send_byte(pass[i]);
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	8c 81       	ldd	r24, Y+4	; 0x04
    32e2:	9d 81       	ldd	r25, Y+5	; 0x05
    32e4:	fc 01       	movw	r30, r24
    32e6:	e2 0f       	add	r30, r18
    32e8:	f3 1f       	adc	r31, r19
    32ea:	80 81       	ld	r24, Z
    32ec:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
/*
 * function to send the two passwords to the Control_ecu by the UART
 * */
errors Check_created_password(uint8 pass[], uint8 repass[]){

	for(uint8 i =0;i<5;i++)
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	8f 5f       	subi	r24, 0xFF	; 255
    32f4:	8a 83       	std	Y+2, r24	; 0x02
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	85 30       	cpi	r24, 0x05	; 5
    32fa:	78 f3       	brcs	.-34     	; 0x32da <Check_created_password+0x20>
		UART_send_byte(pass[i]);
	for(uint8 i =0;i<5;i++)
    32fc:	19 82       	std	Y+1, r1	; 0x01
    32fe:	0e c0       	rjmp	.+28     	; 0x331c <Check_created_password+0x62>
		UART_send_byte(repass[i]);
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	8e 81       	ldd	r24, Y+6	; 0x06
    3308:	9f 81       	ldd	r25, Y+7	; 0x07
    330a:	fc 01       	movw	r30, r24
    330c:	e2 0f       	add	r30, r18
    330e:	f3 1f       	adc	r31, r19
    3310:	80 81       	ld	r24, Z
    3312:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
 * */
errors Check_created_password(uint8 pass[], uint8 repass[]){

	for(uint8 i =0;i<5;i++)
		UART_send_byte(pass[i]);
	for(uint8 i =0;i<5;i++)
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	8f 5f       	subi	r24, 0xFF	; 255
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	85 30       	cpi	r24, 0x05	; 5
    3320:	78 f3       	brcs	.-34     	; 0x3300 <Check_created_password+0x46>
		UART_send_byte(repass[i]);

	errors status = UART_receive_byte(); // waiting to know that the two passwords are matched and is saved
    3322:	0e 94 61 09 	call	0x12c2	; 0x12c2 <UART_receive_byte>
    3326:	8b 83       	std	Y+3, r24	; 0x03
	return status;
    3328:	8b 81       	ldd	r24, Y+3	; 0x03

}
    332a:	27 96       	adiw	r28, 0x07	; 7
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <verify_password>:

/*
 *  function to verify the given password from the keypad with the password saved in the EEPROM
 * */
errors verify_password(uint8 pass[]){
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	00 d0       	rcall	.+0      	; 0x3342 <verify_password+0x6>
    3342:	00 d0       	rcall	.+0      	; 0x3344 <verify_password+0x8>
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03

	UART_send_byte(Check_this_password); //order the Control_ecu to check it with the password saved in the EEPROM
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
	for(uint8 i =0;i<5;i++)
    3352:	19 82       	std	Y+1, r1	; 0x01
    3354:	0e c0       	rjmp	.+28     	; 0x3372 <verify_password+0x36>
		UART_send_byte(pass[i]);
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	9c 81       	ldd	r25, Y+4	; 0x04
    3360:	fc 01       	movw	r30, r24
    3362:	e2 0f       	add	r30, r18
    3364:	f3 1f       	adc	r31, r19
    3366:	80 81       	ld	r24, Z
    3368:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
 *  function to verify the given password from the keypad with the password saved in the EEPROM
 * */
errors verify_password(uint8 pass[]){

	UART_send_byte(Check_this_password); //order the Control_ecu to check it with the password saved in the EEPROM
	for(uint8 i =0;i<5;i++)
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	8f 5f       	subi	r24, 0xFF	; 255
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	85 30       	cpi	r24, 0x05	; 5
    3376:	78 f3       	brcs	.-34     	; 0x3356 <verify_password+0x1a>
		UART_send_byte(pass[i]);
	errors status = UART_receive_byte(); //waiting to confirm that the password is correct or not
    3378:	0e 94 61 09 	call	0x12c2	; 0x12c2 <UART_receive_byte>
    337c:	8a 83       	std	Y+2, r24	; 0x02
	return status;
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <count_18sec>:

/*
 * function to count 18sec by timer1
 * */
void count_18sec(){
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	c2 56       	subi	r28, 0x62	; 98
    339c:	d0 40       	sbci	r29, 0x00	; 0
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
	count++;
    33a8:	80 91 10 01 	lds	r24, 0x0110
    33ac:	8f 5f       	subi	r24, 0xFF	; 255
    33ae:	80 93 10 01 	sts	0x0110, r24
	if(count==18){
    33b2:	80 91 10 01 	lds	r24, 0x0110
    33b6:	82 31       	cpi	r24, 0x12	; 18
    33b8:	09 f0       	breq	.+2      	; 0x33bc <count_18sec+0x2e>
    33ba:	db c3       	rjmp	.+1974   	; 0x3b72 <count_18sec+0x7e4>
		Timer1_deInit();
    33bc:	0e 94 95 0a 	call	0x152a	; 0x152a <Timer1_deInit>
		LCD_clearScreen();
    33c0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
		LCD_displayString("door is locking");
    33c4:	8e e8       	ldi	r24, 0x8E	; 142
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
		LCD_moveCursor(1, 0);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
		LCD_displayString(". ");
    33d4:	8e e9       	ldi	r24, 0x9E	; 158
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    33dc:	fe 01       	movw	r30, r28
    33de:	e1 5a       	subi	r30, 0xA1	; 161
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	aa ef       	ldi	r26, 0xFA	; 250
    33e8:	b3 e4       	ldi	r27, 0x43	; 67
    33ea:	80 83       	st	Z, r24
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	a2 83       	std	Z+2, r26	; 0x02
    33f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	8e 01       	movw	r16, r28
    33f4:	05 5a       	subi	r16, 0xA5	; 165
    33f6:	1f 4f       	sbci	r17, 0xFF	; 255
    33f8:	fe 01       	movw	r30, r28
    33fa:	e1 5a       	subi	r30, 0xA1	; 161
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a ef       	ldi	r20, 0xFA	; 250
    340c:	54 e4       	ldi	r21, 0x44	; 68
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	f8 01       	movw	r30, r16
    3418:	80 83       	st	Z, r24
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	a2 83       	std	Z+2, r26	; 0x02
    341e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3420:	fe 01       	movw	r30, r28
    3422:	e5 5a       	subi	r30, 0xA5	; 165
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	44 f4       	brge	.+16     	; 0x344e <count_18sec+0xc0>
		__ticks = 1;
    343e:	fe 01       	movw	r30, r28
    3440:	e7 5a       	subi	r30, 0xA7	; 167
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
    344c:	64 c0       	rjmp	.+200    	; 0x3516 <count_18sec+0x188>
	else if (__tmp > 65535)
    344e:	fe 01       	movw	r30, r28
    3450:	e5 5a       	subi	r30, 0xA5	; 165
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	60 81       	ld	r22, Z
    3456:	71 81       	ldd	r23, Z+1	; 0x01
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	3f ef       	ldi	r19, 0xFF	; 255
    3460:	4f e7       	ldi	r20, 0x7F	; 127
    3462:	57 e4       	ldi	r21, 0x47	; 71
    3464:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3468:	18 16       	cp	r1, r24
    346a:	0c f0       	brlt	.+2      	; 0x346e <count_18sec+0xe0>
    346c:	43 c0       	rjmp	.+134    	; 0x34f4 <count_18sec+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346e:	fe 01       	movw	r30, r28
    3470:	e1 5a       	subi	r30, 0xA1	; 161
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	8e 01       	movw	r16, r28
    348e:	07 5a       	subi	r16, 0xA7	; 167
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	f8 01       	movw	r30, r16
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
    34a4:	1f c0       	rjmp	.+62     	; 0x34e4 <count_18sec+0x156>
    34a6:	fe 01       	movw	r30, r28
    34a8:	e9 5a       	subi	r30, 0xA9	; 169
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	88 ec       	ldi	r24, 0xC8	; 200
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
    34b4:	fe 01       	movw	r30, r28
    34b6:	e9 5a       	subi	r30, 0xA9	; 169
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <count_18sec+0x130>
    34c2:	fe 01       	movw	r30, r28
    34c4:	e9 5a       	subi	r30, 0xA9	; 169
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34cc:	de 01       	movw	r26, r28
    34ce:	a7 5a       	subi	r26, 0xA7	; 167
    34d0:	bf 4f       	sbci	r27, 0xFF	; 255
    34d2:	fe 01       	movw	r30, r28
    34d4:	e7 5a       	subi	r30, 0xA7	; 167
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	91 81       	ldd	r25, Z+1	; 0x01
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	11 96       	adiw	r26, 0x01	; 1
    34e0:	9c 93       	st	X, r25
    34e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e4:	fe 01       	movw	r30, r28
    34e6:	e7 5a       	subi	r30, 0xA7	; 167
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	d1 f6       	brne	.-76     	; 0x34a6 <count_18sec+0x118>
    34f2:	27 c0       	rjmp	.+78     	; 0x3542 <count_18sec+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f4:	8e 01       	movw	r16, r28
    34f6:	07 5a       	subi	r16, 0xA7	; 167
    34f8:	1f 4f       	sbci	r17, 0xFF	; 255
    34fa:	fe 01       	movw	r30, r28
    34fc:	e5 5a       	subi	r30, 0xA5	; 165
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	60 81       	ld	r22, Z
    3502:	71 81       	ldd	r23, Z+1	; 0x01
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	f8 01       	movw	r30, r16
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
    3516:	de 01       	movw	r26, r28
    3518:	ab 5a       	subi	r26, 0xAB	; 171
    351a:	bf 4f       	sbci	r27, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	e7 5a       	subi	r30, 0xA7	; 167
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	8d 93       	st	X+, r24
    3528:	9c 93       	st	X, r25
    352a:	fe 01       	movw	r30, r28
    352c:	eb 5a       	subi	r30, 0xAB	; 171
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <count_18sec+0x1a6>
    3538:	fe 01       	movw	r30, r28
    353a:	eb 5a       	subi	r30, 0xAB	; 171
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_displayString(". ");
    3542:	8e e9       	ldi	r24, 0x9E	; 158
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    354a:	fe 01       	movw	r30, r28
    354c:	ef 5a       	subi	r30, 0xAF	; 175
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	aa ef       	ldi	r26, 0xFA	; 250
    3556:	b3 e4       	ldi	r27, 0x43	; 67
    3558:	80 83       	st	Z, r24
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	a2 83       	std	Z+2, r26	; 0x02
    355e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3560:	8e 01       	movw	r16, r28
    3562:	03 5b       	subi	r16, 0xB3	; 179
    3564:	1f 4f       	sbci	r17, 0xFF	; 255
    3566:	fe 01       	movw	r30, r28
    3568:	ef 5a       	subi	r30, 0xAF	; 175
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	4a ef       	ldi	r20, 0xFA	; 250
    357a:	54 e4       	ldi	r21, 0x44	; 68
    357c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	f8 01       	movw	r30, r16
    3586:	80 83       	st	Z, r24
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	a2 83       	std	Z+2, r26	; 0x02
    358c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    358e:	fe 01       	movw	r30, r28
    3590:	e3 5b       	subi	r30, 0xB3	; 179
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	60 81       	ld	r22, Z
    3596:	71 81       	ldd	r23, Z+1	; 0x01
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e8       	ldi	r20, 0x80	; 128
    35a2:	5f e3       	ldi	r21, 0x3F	; 63
    35a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35a8:	88 23       	and	r24, r24
    35aa:	44 f4       	brge	.+16     	; 0x35bc <count_18sec+0x22e>
		__ticks = 1;
    35ac:	fe 01       	movw	r30, r28
    35ae:	e5 5b       	subi	r30, 0xB5	; 181
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
    35ba:	64 c0       	rjmp	.+200    	; 0x3684 <count_18sec+0x2f6>
	else if (__tmp > 65535)
    35bc:	fe 01       	movw	r30, r28
    35be:	e3 5b       	subi	r30, 0xB3	; 179
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	3f ef       	ldi	r19, 0xFF	; 255
    35ce:	4f e7       	ldi	r20, 0x7F	; 127
    35d0:	57 e4       	ldi	r21, 0x47	; 71
    35d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d6:	18 16       	cp	r1, r24
    35d8:	0c f0       	brlt	.+2      	; 0x35dc <count_18sec+0x24e>
    35da:	43 c0       	rjmp	.+134    	; 0x3662 <count_18sec+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	fe 01       	movw	r30, r28
    35de:	ef 5a       	subi	r30, 0xAF	; 175
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	60 81       	ld	r22, Z
    35e4:	71 81       	ldd	r23, Z+1	; 0x01
    35e6:	82 81       	ldd	r24, Z+2	; 0x02
    35e8:	93 81       	ldd	r25, Z+3	; 0x03
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e2       	ldi	r20, 0x20	; 32
    35f0:	51 e4       	ldi	r21, 0x41	; 65
    35f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	8e 01       	movw	r16, r28
    35fc:	05 5b       	subi	r16, 0xB5	; 181
    35fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	f8 01       	movw	r30, r16
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
    3612:	1f c0       	rjmp	.+62     	; 0x3652 <count_18sec+0x2c4>
    3614:	fe 01       	movw	r30, r28
    3616:	e7 5b       	subi	r30, 0xB7	; 183
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	88 ec       	ldi	r24, 0xC8	; 200
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
    3622:	fe 01       	movw	r30, r28
    3624:	e7 5b       	subi	r30, 0xB7	; 183
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	91 81       	ldd	r25, Z+1	; 0x01
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <count_18sec+0x29e>
    3630:	fe 01       	movw	r30, r28
    3632:	e7 5b       	subi	r30, 0xB7	; 183
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363a:	de 01       	movw	r26, r28
    363c:	a5 5b       	subi	r26, 0xB5	; 181
    363e:	bf 4f       	sbci	r27, 0xFF	; 255
    3640:	fe 01       	movw	r30, r28
    3642:	e5 5b       	subi	r30, 0xB5	; 181
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 81       	ld	r24, Z
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	11 96       	adiw	r26, 0x01	; 1
    364e:	9c 93       	st	X, r25
    3650:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3652:	fe 01       	movw	r30, r28
    3654:	e5 5b       	subi	r30, 0xB5	; 181
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	d1 f6       	brne	.-76     	; 0x3614 <count_18sec+0x286>
    3660:	27 c0       	rjmp	.+78     	; 0x36b0 <count_18sec+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3662:	8e 01       	movw	r16, r28
    3664:	05 5b       	subi	r16, 0xB5	; 181
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	fe 01       	movw	r30, r28
    366a:	e3 5b       	subi	r30, 0xB3	; 179
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	60 81       	ld	r22, Z
    3670:	71 81       	ldd	r23, Z+1	; 0x01
    3672:	82 81       	ldd	r24, Z+2	; 0x02
    3674:	93 81       	ldd	r25, Z+3	; 0x03
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	f8 01       	movw	r30, r16
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	80 83       	st	Z, r24
    3684:	de 01       	movw	r26, r28
    3686:	a9 5b       	subi	r26, 0xB9	; 185
    3688:	bf 4f       	sbci	r27, 0xFF	; 255
    368a:	fe 01       	movw	r30, r28
    368c:	e5 5b       	subi	r30, 0xB5	; 181
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	8d 93       	st	X+, r24
    3696:	9c 93       	st	X, r25
    3698:	fe 01       	movw	r30, r28
    369a:	e9 5b       	subi	r30, 0xB9	; 185
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	80 81       	ld	r24, Z
    36a0:	91 81       	ldd	r25, Z+1	; 0x01
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <count_18sec+0x314>
    36a6:	fe 01       	movw	r30, r28
    36a8:	e9 5b       	subi	r30, 0xB9	; 185
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_displayString(". ");
    36b0:	8e e9       	ldi	r24, 0x9E	; 158
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    36b8:	fe 01       	movw	r30, r28
    36ba:	ed 5b       	subi	r30, 0xBD	; 189
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	aa ef       	ldi	r26, 0xFA	; 250
    36c4:	b3 e4       	ldi	r27, 0x43	; 67
    36c6:	80 83       	st	Z, r24
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	a2 83       	std	Z+2, r26	; 0x02
    36cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ce:	8e 01       	movw	r16, r28
    36d0:	01 5c       	subi	r16, 0xC1	; 193
    36d2:	1f 4f       	sbci	r17, 0xFF	; 255
    36d4:	fe 01       	movw	r30, r28
    36d6:	ed 5b       	subi	r30, 0xBD	; 189
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a ef       	ldi	r20, 0xFA	; 250
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	f8 01       	movw	r30, r16
    36f4:	80 83       	st	Z, r24
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	a2 83       	std	Z+2, r26	; 0x02
    36fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36fc:	fe 01       	movw	r30, r28
    36fe:	ff 96       	adiw	r30, 0x3f	; 63
    3700:	60 81       	ld	r22, Z
    3702:	71 81       	ldd	r23, Z+1	; 0x01
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e8       	ldi	r20, 0x80	; 128
    370e:	5f e3       	ldi	r21, 0x3F	; 63
    3710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3714:	88 23       	and	r24, r24
    3716:	2c f4       	brge	.+10     	; 0x3722 <count_18sec+0x394>
		__ticks = 1;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	9e af       	std	Y+62, r25	; 0x3e
    371e:	8d af       	std	Y+61, r24	; 0x3d
    3720:	46 c0       	rjmp	.+140    	; 0x37ae <count_18sec+0x420>
	else if (__tmp > 65535)
    3722:	fe 01       	movw	r30, r28
    3724:	ff 96       	adiw	r30, 0x3f	; 63
    3726:	60 81       	ld	r22, Z
    3728:	71 81       	ldd	r23, Z+1	; 0x01
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	93 81       	ldd	r25, Z+3	; 0x03
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	3f ef       	ldi	r19, 0xFF	; 255
    3732:	4f e7       	ldi	r20, 0x7F	; 127
    3734:	57 e4       	ldi	r21, 0x47	; 71
    3736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    373a:	18 16       	cp	r1, r24
    373c:	64 f5       	brge	.+88     	; 0x3796 <count_18sec+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373e:	fe 01       	movw	r30, r28
    3740:	ed 5b       	subi	r30, 0xBD	; 189
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e2       	ldi	r20, 0x20	; 32
    3752:	51 e4       	ldi	r21, 0x41	; 65
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	bc 01       	movw	r22, r24
    375e:	cd 01       	movw	r24, r26
    3760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	9e af       	std	Y+62, r25	; 0x3e
    376a:	8d af       	std	Y+61, r24	; 0x3d
    376c:	0f c0       	rjmp	.+30     	; 0x378c <count_18sec+0x3fe>
    376e:	88 ec       	ldi	r24, 0xC8	; 200
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	9c af       	std	Y+60, r25	; 0x3c
    3774:	8b af       	std	Y+59, r24	; 0x3b
    3776:	8b ad       	ldd	r24, Y+59	; 0x3b
    3778:	9c ad       	ldd	r25, Y+60	; 0x3c
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	f1 f7       	brne	.-4      	; 0x377a <count_18sec+0x3ec>
    377e:	9c af       	std	Y+60, r25	; 0x3c
    3780:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3782:	8d ad       	ldd	r24, Y+61	; 0x3d
    3784:	9e ad       	ldd	r25, Y+62	; 0x3e
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	9e af       	std	Y+62, r25	; 0x3e
    378a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378c:	8d ad       	ldd	r24, Y+61	; 0x3d
    378e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	69 f7       	brne	.-38     	; 0x376e <count_18sec+0x3e0>
    3794:	16 c0       	rjmp	.+44     	; 0x37c2 <count_18sec+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3796:	fe 01       	movw	r30, r28
    3798:	ff 96       	adiw	r30, 0x3f	; 63
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e af       	std	Y+62, r25	; 0x3e
    37ac:	8d af       	std	Y+61, r24	; 0x3d
    37ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    37b2:	9a af       	std	Y+58, r25	; 0x3a
    37b4:	89 af       	std	Y+57, r24	; 0x39
    37b6:	89 ad       	ldd	r24, Y+57	; 0x39
    37b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <count_18sec+0x42c>
    37be:	9a af       	std	Y+58, r25	; 0x3a
    37c0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);
		LCD_displayString(". ");
    37c2:	8e e9       	ldi	r24, 0x9E	; 158
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	aa ef       	ldi	r26, 0xFA	; 250
    37d0:	b3 e4       	ldi	r27, 0x43	; 67
    37d2:	8d ab       	std	Y+53, r24	; 0x35
    37d4:	9e ab       	std	Y+54, r25	; 0x36
    37d6:	af ab       	std	Y+55, r26	; 0x37
    37d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37da:	6d a9       	ldd	r22, Y+53	; 0x35
    37dc:	7e a9       	ldd	r23, Y+54	; 0x36
    37de:	8f a9       	ldd	r24, Y+55	; 0x37
    37e0:	98 ad       	ldd	r25, Y+56	; 0x38
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	4a ef       	ldi	r20, 0xFA	; 250
    37e8:	54 e4       	ldi	r21, 0x44	; 68
    37ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	89 ab       	std	Y+49, r24	; 0x31
    37f4:	9a ab       	std	Y+50, r25	; 0x32
    37f6:	ab ab       	std	Y+51, r26	; 0x33
    37f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37fa:	69 a9       	ldd	r22, Y+49	; 0x31
    37fc:	7a a9       	ldd	r23, Y+50	; 0x32
    37fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3800:	9c a9       	ldd	r25, Y+52	; 0x34
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e8       	ldi	r20, 0x80	; 128
    3808:	5f e3       	ldi	r21, 0x3F	; 63
    380a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    380e:	88 23       	and	r24, r24
    3810:	2c f4       	brge	.+10     	; 0x381c <count_18sec+0x48e>
		__ticks = 1;
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	98 ab       	std	Y+48, r25	; 0x30
    3818:	8f a7       	std	Y+47, r24	; 0x2f
    381a:	3f c0       	rjmp	.+126    	; 0x389a <count_18sec+0x50c>
	else if (__tmp > 65535)
    381c:	69 a9       	ldd	r22, Y+49	; 0x31
    381e:	7a a9       	ldd	r23, Y+50	; 0x32
    3820:	8b a9       	ldd	r24, Y+51	; 0x33
    3822:	9c a9       	ldd	r25, Y+52	; 0x34
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	3f ef       	ldi	r19, 0xFF	; 255
    3828:	4f e7       	ldi	r20, 0x7F	; 127
    382a:	57 e4       	ldi	r21, 0x47	; 71
    382c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3830:	18 16       	cp	r1, r24
    3832:	4c f5       	brge	.+82     	; 0x3886 <count_18sec+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3834:	6d a9       	ldd	r22, Y+53	; 0x35
    3836:	7e a9       	ldd	r23, Y+54	; 0x36
    3838:	8f a9       	ldd	r24, Y+55	; 0x37
    383a:	98 ad       	ldd	r25, Y+56	; 0x38
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e2       	ldi	r20, 0x20	; 32
    3842:	51 e4       	ldi	r21, 0x41	; 65
    3844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	98 ab       	std	Y+48, r25	; 0x30
    385a:	8f a7       	std	Y+47, r24	; 0x2f
    385c:	0f c0       	rjmp	.+30     	; 0x387c <count_18sec+0x4ee>
    385e:	88 ec       	ldi	r24, 0xC8	; 200
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9e a7       	std	Y+46, r25	; 0x2e
    3864:	8d a7       	std	Y+45, r24	; 0x2d
    3866:	8d a5       	ldd	r24, Y+45	; 0x2d
    3868:	9e a5       	ldd	r25, Y+46	; 0x2e
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	f1 f7       	brne	.-4      	; 0x386a <count_18sec+0x4dc>
    386e:	9e a7       	std	Y+46, r25	; 0x2e
    3870:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3872:	8f a5       	ldd	r24, Y+47	; 0x2f
    3874:	98 a9       	ldd	r25, Y+48	; 0x30
    3876:	01 97       	sbiw	r24, 0x01	; 1
    3878:	98 ab       	std	Y+48, r25	; 0x30
    387a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387c:	8f a5       	ldd	r24, Y+47	; 0x2f
    387e:	98 a9       	ldd	r25, Y+48	; 0x30
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	69 f7       	brne	.-38     	; 0x385e <count_18sec+0x4d0>
    3884:	14 c0       	rjmp	.+40     	; 0x38ae <count_18sec+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3886:	69 a9       	ldd	r22, Y+49	; 0x31
    3888:	7a a9       	ldd	r23, Y+50	; 0x32
    388a:	8b a9       	ldd	r24, Y+51	; 0x33
    388c:	9c a9       	ldd	r25, Y+52	; 0x34
    388e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	98 ab       	std	Y+48, r25	; 0x30
    3898:	8f a7       	std	Y+47, r24	; 0x2f
    389a:	8f a5       	ldd	r24, Y+47	; 0x2f
    389c:	98 a9       	ldd	r25, Y+48	; 0x30
    389e:	9c a7       	std	Y+44, r25	; 0x2c
    38a0:	8b a7       	std	Y+43, r24	; 0x2b
    38a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    38a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	f1 f7       	brne	.-4      	; 0x38a6 <count_18sec+0x518>
    38aa:	9c a7       	std	Y+44, r25	; 0x2c
    38ac:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		LCD_displayString(". ");
    38ae:	8e e9       	ldi	r24, 0x9E	; 158
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	aa ef       	ldi	r26, 0xFA	; 250
    38bc:	b3 e4       	ldi	r27, 0x43	; 67
    38be:	8f a3       	std	Y+39, r24	; 0x27
    38c0:	98 a7       	std	Y+40, r25	; 0x28
    38c2:	a9 a7       	std	Y+41, r26	; 0x29
    38c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c6:	6f a1       	ldd	r22, Y+39	; 0x27
    38c8:	78 a5       	ldd	r23, Y+40	; 0x28
    38ca:	89 a5       	ldd	r24, Y+41	; 0x29
    38cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	4a ef       	ldi	r20, 0xFA	; 250
    38d4:	54 e4       	ldi	r21, 0x44	; 68
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	8b a3       	std	Y+35, r24	; 0x23
    38e0:	9c a3       	std	Y+36, r25	; 0x24
    38e2:	ad a3       	std	Y+37, r26	; 0x25
    38e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38e6:	6b a1       	ldd	r22, Y+35	; 0x23
    38e8:	7c a1       	ldd	r23, Y+36	; 0x24
    38ea:	8d a1       	ldd	r24, Y+37	; 0x25
    38ec:	9e a1       	ldd	r25, Y+38	; 0x26
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	40 e8       	ldi	r20, 0x80	; 128
    38f4:	5f e3       	ldi	r21, 0x3F	; 63
    38f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38fa:	88 23       	and	r24, r24
    38fc:	2c f4       	brge	.+10     	; 0x3908 <count_18sec+0x57a>
		__ticks = 1;
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	9a a3       	std	Y+34, r25	; 0x22
    3904:	89 a3       	std	Y+33, r24	; 0x21
    3906:	3f c0       	rjmp	.+126    	; 0x3986 <count_18sec+0x5f8>
	else if (__tmp > 65535)
    3908:	6b a1       	ldd	r22, Y+35	; 0x23
    390a:	7c a1       	ldd	r23, Y+36	; 0x24
    390c:	8d a1       	ldd	r24, Y+37	; 0x25
    390e:	9e a1       	ldd	r25, Y+38	; 0x26
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	3f ef       	ldi	r19, 0xFF	; 255
    3914:	4f e7       	ldi	r20, 0x7F	; 127
    3916:	57 e4       	ldi	r21, 0x47	; 71
    3918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    391c:	18 16       	cp	r1, r24
    391e:	4c f5       	brge	.+82     	; 0x3972 <count_18sec+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3920:	6f a1       	ldd	r22, Y+39	; 0x27
    3922:	78 a5       	ldd	r23, Y+40	; 0x28
    3924:	89 a5       	ldd	r24, Y+41	; 0x29
    3926:	9a a5       	ldd	r25, Y+42	; 0x2a
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	40 e2       	ldi	r20, 0x20	; 32
    392e:	51 e4       	ldi	r21, 0x41	; 65
    3930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	9a a3       	std	Y+34, r25	; 0x22
    3946:	89 a3       	std	Y+33, r24	; 0x21
    3948:	0f c0       	rjmp	.+30     	; 0x3968 <count_18sec+0x5da>
    394a:	88 ec       	ldi	r24, 0xC8	; 200
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	98 a3       	std	Y+32, r25	; 0x20
    3950:	8f 8f       	std	Y+31, r24	; 0x1f
    3952:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3954:	98 a1       	ldd	r25, Y+32	; 0x20
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	f1 f7       	brne	.-4      	; 0x3956 <count_18sec+0x5c8>
    395a:	98 a3       	std	Y+32, r25	; 0x20
    395c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395e:	89 a1       	ldd	r24, Y+33	; 0x21
    3960:	9a a1       	ldd	r25, Y+34	; 0x22
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	9a a3       	std	Y+34, r25	; 0x22
    3966:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3968:	89 a1       	ldd	r24, Y+33	; 0x21
    396a:	9a a1       	ldd	r25, Y+34	; 0x22
    396c:	00 97       	sbiw	r24, 0x00	; 0
    396e:	69 f7       	brne	.-38     	; 0x394a <count_18sec+0x5bc>
    3970:	14 c0       	rjmp	.+40     	; 0x399a <count_18sec+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3972:	6b a1       	ldd	r22, Y+35	; 0x23
    3974:	7c a1       	ldd	r23, Y+36	; 0x24
    3976:	8d a1       	ldd	r24, Y+37	; 0x25
    3978:	9e a1       	ldd	r25, Y+38	; 0x26
    397a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	9a a3       	std	Y+34, r25	; 0x22
    3984:	89 a3       	std	Y+33, r24	; 0x21
    3986:	89 a1       	ldd	r24, Y+33	; 0x21
    3988:	9a a1       	ldd	r25, Y+34	; 0x22
    398a:	9e 8f       	std	Y+30, r25	; 0x1e
    398c:	8d 8f       	std	Y+29, r24	; 0x1d
    398e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3990:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <count_18sec+0x604>
    3996:	9e 8f       	std	Y+30, r25	; 0x1e
    3998:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_displayString(". ");
    399a:	8e e9       	ldi	r24, 0x9E	; 158
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	aa ef       	ldi	r26, 0xFA	; 250
    39a8:	b3 e4       	ldi	r27, 0x43	; 67
    39aa:	89 8f       	std	Y+25, r24	; 0x19
    39ac:	9a 8f       	std	Y+26, r25	; 0x1a
    39ae:	ab 8f       	std	Y+27, r26	; 0x1b
    39b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b2:	69 8d       	ldd	r22, Y+25	; 0x19
    39b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	4a ef       	ldi	r20, 0xFA	; 250
    39c0:	54 e4       	ldi	r21, 0x44	; 68
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	8d 8b       	std	Y+21, r24	; 0x15
    39cc:	9e 8b       	std	Y+22, r25	; 0x16
    39ce:	af 8b       	std	Y+23, r26	; 0x17
    39d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39d2:	6d 89       	ldd	r22, Y+21	; 0x15
    39d4:	7e 89       	ldd	r23, Y+22	; 0x16
    39d6:	8f 89       	ldd	r24, Y+23	; 0x17
    39d8:	98 8d       	ldd	r25, Y+24	; 0x18
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e8       	ldi	r20, 0x80	; 128
    39e0:	5f e3       	ldi	r21, 0x3F	; 63
    39e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39e6:	88 23       	and	r24, r24
    39e8:	2c f4       	brge	.+10     	; 0x39f4 <count_18sec+0x666>
		__ticks = 1;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	9c 8b       	std	Y+20, r25	; 0x14
    39f0:	8b 8b       	std	Y+19, r24	; 0x13
    39f2:	3f c0       	rjmp	.+126    	; 0x3a72 <count_18sec+0x6e4>
	else if (__tmp > 65535)
    39f4:	6d 89       	ldd	r22, Y+21	; 0x15
    39f6:	7e 89       	ldd	r23, Y+22	; 0x16
    39f8:	8f 89       	ldd	r24, Y+23	; 0x17
    39fa:	98 8d       	ldd	r25, Y+24	; 0x18
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	3f ef       	ldi	r19, 0xFF	; 255
    3a00:	4f e7       	ldi	r20, 0x7F	; 127
    3a02:	57 e4       	ldi	r21, 0x47	; 71
    3a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a08:	18 16       	cp	r1, r24
    3a0a:	4c f5       	brge	.+82     	; 0x3a5e <count_18sec+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e2       	ldi	r20, 0x20	; 32
    3a1a:	51 e4       	ldi	r21, 0x41	; 65
    3a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	bc 01       	movw	r22, r24
    3a26:	cd 01       	movw	r24, r26
    3a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	9c 8b       	std	Y+20, r25	; 0x14
    3a32:	8b 8b       	std	Y+19, r24	; 0x13
    3a34:	0f c0       	rjmp	.+30     	; 0x3a54 <count_18sec+0x6c6>
    3a36:	88 ec       	ldi	r24, 0xC8	; 200
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	9a 8b       	std	Y+18, r25	; 0x12
    3a3c:	89 8b       	std	Y+17, r24	; 0x11
    3a3e:	89 89       	ldd	r24, Y+17	; 0x11
    3a40:	9a 89       	ldd	r25, Y+18	; 0x12
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <count_18sec+0x6b4>
    3a46:	9a 8b       	std	Y+18, r25	; 0x12
    3a48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	9c 8b       	std	Y+20, r25	; 0x14
    3a52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a54:	8b 89       	ldd	r24, Y+19	; 0x13
    3a56:	9c 89       	ldd	r25, Y+20	; 0x14
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	69 f7       	brne	.-38     	; 0x3a36 <count_18sec+0x6a8>
    3a5c:	14 c0       	rjmp	.+40     	; 0x3a86 <count_18sec+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a60:	7e 89       	ldd	r23, Y+22	; 0x16
    3a62:	8f 89       	ldd	r24, Y+23	; 0x17
    3a64:	98 8d       	ldd	r25, Y+24	; 0x18
    3a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9c 8b       	std	Y+20, r25	; 0x14
    3a70:	8b 8b       	std	Y+19, r24	; 0x13
    3a72:	8b 89       	ldd	r24, Y+19	; 0x13
    3a74:	9c 89       	ldd	r25, Y+20	; 0x14
    3a76:	98 8b       	std	Y+16, r25	; 0x10
    3a78:	8f 87       	std	Y+15, r24	; 0x0f
    3a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a7c:	98 89       	ldd	r25, Y+16	; 0x10
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	f1 f7       	brne	.-4      	; 0x3a7e <count_18sec+0x6f0>
    3a82:	98 8b       	std	Y+16, r25	; 0x10
    3a84:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_displayString(". ");
    3a86:	8e e9       	ldi	r24, 0x9E	; 158
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	aa ef       	ldi	r26, 0xFA	; 250
    3a94:	b3 e4       	ldi	r27, 0x43	; 67
    3a96:	8b 87       	std	Y+11, r24	; 0x0b
    3a98:	9c 87       	std	Y+12, r25	; 0x0c
    3a9a:	ad 87       	std	Y+13, r26	; 0x0d
    3a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	4a ef       	ldi	r20, 0xFA	; 250
    3aac:	54 e4       	ldi	r21, 0x44	; 68
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	8f 83       	std	Y+7, r24	; 0x07
    3ab8:	98 87       	std	Y+8, r25	; 0x08
    3aba:	a9 87       	std	Y+9, r26	; 0x09
    3abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3abe:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac0:	78 85       	ldd	r23, Y+8	; 0x08
    3ac2:	89 85       	ldd	r24, Y+9	; 0x09
    3ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e8       	ldi	r20, 0x80	; 128
    3acc:	5f e3       	ldi	r21, 0x3F	; 63
    3ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ad2:	88 23       	and	r24, r24
    3ad4:	2c f4       	brge	.+10     	; 0x3ae0 <count_18sec+0x752>
		__ticks = 1;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	9e 83       	std	Y+6, r25	; 0x06
    3adc:	8d 83       	std	Y+5, r24	; 0x05
    3ade:	3f c0       	rjmp	.+126    	; 0x3b5e <count_18sec+0x7d0>
	else if (__tmp > 65535)
    3ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae2:	78 85       	ldd	r23, Y+8	; 0x08
    3ae4:	89 85       	ldd	r24, Y+9	; 0x09
    3ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	3f ef       	ldi	r19, 0xFF	; 255
    3aec:	4f e7       	ldi	r20, 0x7F	; 127
    3aee:	57 e4       	ldi	r21, 0x47	; 71
    3af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3af4:	18 16       	cp	r1, r24
    3af6:	4c f5       	brge	.+82     	; 0x3b4a <count_18sec+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e2       	ldi	r20, 0x20	; 32
    3b06:	51 e4       	ldi	r21, 0x41	; 65
    3b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	bc 01       	movw	r22, r24
    3b12:	cd 01       	movw	r24, r26
    3b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	9e 83       	std	Y+6, r25	; 0x06
    3b1e:	8d 83       	std	Y+5, r24	; 0x05
    3b20:	0f c0       	rjmp	.+30     	; 0x3b40 <count_18sec+0x7b2>
    3b22:	88 ec       	ldi	r24, 0xC8	; 200
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	9c 83       	std	Y+4, r25	; 0x04
    3b28:	8b 83       	std	Y+3, r24	; 0x03
    3b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	f1 f7       	brne	.-4      	; 0x3b2e <count_18sec+0x7a0>
    3b32:	9c 83       	std	Y+4, r25	; 0x04
    3b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b36:	8d 81       	ldd	r24, Y+5	; 0x05
    3b38:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	69 f7       	brne	.-38     	; 0x3b22 <count_18sec+0x794>
    3b48:	14 c0       	rjmp	.+40     	; 0x3b72 <count_18sec+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b4c:	78 85       	ldd	r23, Y+8	; 0x08
    3b4e:	89 85       	ldd	r24, Y+9	; 0x09
    3b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	9e 83       	std	Y+6, r25	; 0x06
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b60:	9e 81       	ldd	r25, Y+6	; 0x06
    3b62:	9a 83       	std	Y+2, r25	; 0x02
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <count_18sec+0x7dc>
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}
}
    3b72:	ce 59       	subi	r28, 0x9E	; 158
    3b74:	df 4f       	sbci	r29, 0xFF	; 255
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	1f 91       	pop	r17
    3b86:	0f 91       	pop	r16
    3b88:	08 95       	ret

00003b8a <count_15sec>:

/*
 * function to count 15sec by timer1
 * */
void count_15sec(){
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
	count++;
    3b92:	80 91 10 01 	lds	r24, 0x0110
    3b96:	8f 5f       	subi	r24, 0xFF	; 255
    3b98:	80 93 10 01 	sts	0x0110, r24
	if(count==15){
    3b9c:	80 91 10 01 	lds	r24, 0x0110
    3ba0:	8f 30       	cpi	r24, 0x0F	; 15
    3ba2:	21 f4       	brne	.+8      	; 0x3bac <count_15sec+0x22>
		Timer1_deInit();
    3ba4:	0e 94 95 0a 	call	0x152a	; 0x152a <Timer1_deInit>
		LCD_clearScreen();
    3ba8:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
	}
}
    3bac:	cf 91       	pop	r28
    3bae:	df 91       	pop	r29
    3bb0:	08 95       	ret

00003bb2 <count_60sec>:

/*
 * function to count 60sec by timer1
 * */
void count_60sec(){
    3bb2:	df 93       	push	r29
    3bb4:	cf 93       	push	r28
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
	count++;
    3bba:	80 91 10 01 	lds	r24, 0x0110
    3bbe:	8f 5f       	subi	r24, 0xFF	; 255
    3bc0:	80 93 10 01 	sts	0x0110, r24
	if(count==60){
    3bc4:	80 91 10 01 	lds	r24, 0x0110
    3bc8:	8c 33       	cpi	r24, 0x3C	; 60
    3bca:	39 f4       	brne	.+14     	; 0x3bda <count_60sec+0x28>
		Timer1_deInit();
    3bcc:	0e 94 95 0a 	call	0x152a	; 0x152a <Timer1_deInit>
		LCD_clearScreen();
    3bd0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
		UART_send_byte(Buzzer_OFF); // hear i controlled the timing of the buzzer by the HMI_ecu not the Control one unlike
    3bd4:	84 e0       	ldi	r24, 0x04	; 4
    3bd6:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>

	}
}
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <delay_timer1>:
void delay_timer1(uint8 sec){
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	2e 97       	sbiw	r28, 0x0e	; 14
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	f8 94       	cli
    3bee:	de bf       	out	0x3e, r29	; 62
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	cd bf       	out	0x3d, r28	; 61
    3bf4:	8f 83       	std	Y+7, r24	; 0x07

	count =0;
    3bf6:	10 92 10 01 	sts	0x0110, r1
	Timer1_ConfigType config_timer1={0,31250,FCPU_256,CTC};
    3bfa:	9e 01       	movw	r18, r28
    3bfc:	2f 5f       	subi	r18, 0xFF	; 255
    3bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3c00:	3b 87       	std	Y+11, r19	; 0x0b
    3c02:	2a 87       	std	Y+10, r18	; 0x0a
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	91 e0       	ldi	r25, 0x01	; 1
    3c08:	9d 87       	std	Y+13, r25	; 0x0d
    3c0a:	8c 87       	std	Y+12, r24	; 0x0c
    3c0c:	96 e0       	ldi	r25, 0x06	; 6
    3c0e:	9e 87       	std	Y+14, r25	; 0x0e
    3c10:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c12:	fd 85       	ldd	r31, Y+13	; 0x0d
    3c14:	00 80       	ld	r0, Z
    3c16:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c18:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c1a:	2f 5f       	subi	r18, 0xFF	; 255
    3c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1e:	3d 87       	std	Y+13, r19	; 0x0d
    3c20:	2c 87       	std	Y+12, r18	; 0x0c
    3c22:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c24:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c26:	00 82       	st	Z, r0
    3c28:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c2a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c2c:	2f 5f       	subi	r18, 0xFF	; 255
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	3b 87       	std	Y+11, r19	; 0x0b
    3c32:	2a 87       	std	Y+10, r18	; 0x0a
    3c34:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c36:	31 50       	subi	r19, 0x01	; 1
    3c38:	3e 87       	std	Y+14, r19	; 0x0e
    3c3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c3c:	88 23       	and	r24, r24
    3c3e:	41 f7       	brne	.-48     	; 0x3c10 <delay_timer1+0x30>
	Timer1_init(&config_timer1);
    3c40:	ce 01       	movw	r24, r28
    3c42:	01 96       	adiw	r24, 0x01	; 1
    3c44:	0e 94 44 0a 	call	0x1488	; 0x1488 <Timer1_init>

	switch (sec){
    3c48:	8f 81       	ldd	r24, Y+7	; 0x07
    3c4a:	e8 2f       	mov	r30, r24
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	f9 87       	std	Y+9, r31	; 0x09
    3c50:	e8 87       	std	Y+8, r30	; 0x08
    3c52:	28 85       	ldd	r18, Y+8	; 0x08
    3c54:	39 85       	ldd	r19, Y+9	; 0x09
    3c56:	22 31       	cpi	r18, 0x12	; 18
    3c58:	31 05       	cpc	r19, r1
    3c5a:	79 f0       	breq	.+30     	; 0x3c7a <delay_timer1+0x9a>
    3c5c:	88 85       	ldd	r24, Y+8	; 0x08
    3c5e:	99 85       	ldd	r25, Y+9	; 0x09
    3c60:	8c 33       	cpi	r24, 0x3C	; 60
    3c62:	91 05       	cpc	r25, r1
    3c64:	79 f0       	breq	.+30     	; 0x3c84 <delay_timer1+0xa4>
    3c66:	e8 85       	ldd	r30, Y+8	; 0x08
    3c68:	f9 85       	ldd	r31, Y+9	; 0x09
    3c6a:	ef 30       	cpi	r30, 0x0F	; 15
    3c6c:	f1 05       	cpc	r31, r1
    3c6e:	71 f4       	brne	.+28     	; 0x3c8c <delay_timer1+0xac>
	case 15:
		Timer1_setCallBack(count_15sec);
    3c70:	85 ec       	ldi	r24, 0xC5	; 197
    3c72:	9d e1       	ldi	r25, 0x1D	; 29
    3c74:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timer1_setCallBack>
    3c78:	09 c0       	rjmp	.+18     	; 0x3c8c <delay_timer1+0xac>
		break;
	case 18:
		Timer1_setCallBack(count_18sec);
    3c7a:	87 ec       	ldi	r24, 0xC7	; 199
    3c7c:	99 e1       	ldi	r25, 0x19	; 25
    3c7e:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timer1_setCallBack>
    3c82:	04 c0       	rjmp	.+8      	; 0x3c8c <delay_timer1+0xac>
		break;
	case 60:
		Timer1_setCallBack(count_60sec);
    3c84:	89 ed       	ldi	r24, 0xD9	; 217
    3c86:	9d e1       	ldi	r25, 0x1D	; 29
    3c88:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timer1_setCallBack>
		break;

	}

}
    3c8c:	2e 96       	adiw	r28, 0x0e	; 14
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	cf 91       	pop	r28
    3c9a:	df 91       	pop	r29
    3c9c:	08 95       	ret

00003c9e <Main_options>:


uint8 Main_options(){
    3c9e:	df 93       	push	r29
    3ca0:	cf 93       	push	r28
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    3ca6:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
	LCD_displayString("+  Open Door");
    3caa:	81 ea       	ldi	r24, 0xA1	; 161
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "-  Change Pass");
    3cb2:	2e ea       	ldi	r18, 0xAE	; 174
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	a9 01       	movw	r20, r18
    3cbc:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_displayStringRowColumn>
	return KEYPAD_getPressedKey();
    3cc0:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
}
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	08 95       	ret

00003cca <Open_door>:
void Open_door(uint8 pass[]){
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	c3 58       	subi	r28, 0x83	; 131
    3cd8:	d0 40       	sbci	r29, 0x00	; 0
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	0f be       	out	0x3f, r0	; 63
    3ce2:	cd bf       	out	0x3d, r28	; 61
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ee 57       	subi	r30, 0x7E	; 126
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
	uint8 false_pass_count=0;
    3cee:	fe 01       	movw	r30, r28
    3cf0:	ef 57       	subi	r30, 0x7F	; 127
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	10 82       	st	Z, r1
    3cf6:	b5 c5       	rjmp	.+2922   	; 0x4862 <Open_door+0xb98>
	while(false_pass_count<3){
		LCD_clearScreen();
    3cf8:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e5 58       	subi	r30, 0x85	; 133
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	a8 e4       	ldi	r26, 0x48	; 72
    3d08:	b3 e4       	ldi	r27, 0x43	; 67
    3d0a:	80 83       	st	Z, r24
    3d0c:	91 83       	std	Z+1, r25	; 0x01
    3d0e:	a2 83       	std	Z+2, r26	; 0x02
    3d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d12:	8e 01       	movw	r16, r28
    3d14:	09 58       	subi	r16, 0x89	; 137
    3d16:	1f 4f       	sbci	r17, 0xFF	; 255
    3d18:	fe 01       	movw	r30, r28
    3d1a:	e5 58       	subi	r30, 0x85	; 133
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	60 81       	ld	r22, Z
    3d20:	71 81       	ldd	r23, Z+1	; 0x01
    3d22:	82 81       	ldd	r24, Z+2	; 0x02
    3d24:	93 81       	ldd	r25, Z+3	; 0x03
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	4a ef       	ldi	r20, 0xFA	; 250
    3d2c:	54 e4       	ldi	r21, 0x44	; 68
    3d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	f8 01       	movw	r30, r16
    3d38:	80 83       	st	Z, r24
    3d3a:	91 83       	std	Z+1, r25	; 0x01
    3d3c:	a2 83       	std	Z+2, r26	; 0x02
    3d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d40:	fe 01       	movw	r30, r28
    3d42:	e9 58       	subi	r30, 0x89	; 137
    3d44:	ff 4f       	sbci	r31, 0xFF	; 255
    3d46:	60 81       	ld	r22, Z
    3d48:	71 81       	ldd	r23, Z+1	; 0x01
    3d4a:	82 81       	ldd	r24, Z+2	; 0x02
    3d4c:	93 81       	ldd	r25, Z+3	; 0x03
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e8       	ldi	r20, 0x80	; 128
    3d54:	5f e3       	ldi	r21, 0x3F	; 63
    3d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d5a:	88 23       	and	r24, r24
    3d5c:	44 f4       	brge	.+16     	; 0x3d6e <Open_door+0xa4>
		__ticks = 1;
    3d5e:	fe 01       	movw	r30, r28
    3d60:	eb 58       	subi	r30, 0x8B	; 139
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	80 83       	st	Z, r24
    3d6c:	64 c0       	rjmp	.+200    	; 0x3e36 <Open_door+0x16c>
	else if (__tmp > 65535)
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e9 58       	subi	r30, 0x89	; 137
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	93 81       	ldd	r25, Z+3	; 0x03
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	3f ef       	ldi	r19, 0xFF	; 255
    3d80:	4f e7       	ldi	r20, 0x7F	; 127
    3d82:	57 e4       	ldi	r21, 0x47	; 71
    3d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d88:	18 16       	cp	r1, r24
    3d8a:	0c f0       	brlt	.+2      	; 0x3d8e <Open_door+0xc4>
    3d8c:	43 c0       	rjmp	.+134    	; 0x3e14 <Open_door+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8e:	fe 01       	movw	r30, r28
    3d90:	e5 58       	subi	r30, 0x85	; 133
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	60 81       	ld	r22, Z
    3d96:	71 81       	ldd	r23, Z+1	; 0x01
    3d98:	82 81       	ldd	r24, Z+2	; 0x02
    3d9a:	93 81       	ldd	r25, Z+3	; 0x03
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	40 e2       	ldi	r20, 0x20	; 32
    3da2:	51 e4       	ldi	r21, 0x41	; 65
    3da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	8e 01       	movw	r16, r28
    3dae:	0b 58       	subi	r16, 0x8B	; 139
    3db0:	1f 4f       	sbci	r17, 0xFF	; 255
    3db2:	bc 01       	movw	r22, r24
    3db4:	cd 01       	movw	r24, r26
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	f8 01       	movw	r30, r16
    3dc0:	91 83       	std	Z+1, r25	; 0x01
    3dc2:	80 83       	st	Z, r24
    3dc4:	1f c0       	rjmp	.+62     	; 0x3e04 <Open_door+0x13a>
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	ed 58       	subi	r30, 0x8D	; 141
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	88 ec       	ldi	r24, 0xC8	; 200
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	80 83       	st	Z, r24
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	ed 58       	subi	r30, 0x8D	; 141
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	80 81       	ld	r24, Z
    3ddc:	91 81       	ldd	r25, Z+1	; 0x01
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	f1 f7       	brne	.-4      	; 0x3dde <Open_door+0x114>
    3de2:	fe 01       	movw	r30, r28
    3de4:	ed 58       	subi	r30, 0x8D	; 141
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	91 83       	std	Z+1, r25	; 0x01
    3dea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dec:	de 01       	movw	r26, r28
    3dee:	ab 58       	subi	r26, 0x8B	; 139
    3df0:	bf 4f       	sbci	r27, 0xFF	; 255
    3df2:	fe 01       	movw	r30, r28
    3df4:	eb 58       	subi	r30, 0x8B	; 139
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	11 96       	adiw	r26, 0x01	; 1
    3e00:	9c 93       	st	X, r25
    3e02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e04:	fe 01       	movw	r30, r28
    3e06:	eb 58       	subi	r30, 0x8B	; 139
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	80 81       	ld	r24, Z
    3e0c:	91 81       	ldd	r25, Z+1	; 0x01
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	d1 f6       	brne	.-76     	; 0x3dc6 <Open_door+0xfc>
    3e12:	27 c0       	rjmp	.+78     	; 0x3e62 <Open_door+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e14:	8e 01       	movw	r16, r28
    3e16:	0b 58       	subi	r16, 0x8B	; 139
    3e18:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	e9 58       	subi	r30, 0x89	; 137
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	60 81       	ld	r22, Z
    3e22:	71 81       	ldd	r23, Z+1	; 0x01
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	93 81       	ldd	r25, Z+3	; 0x03
    3e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	f8 01       	movw	r30, r16
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	80 83       	st	Z, r24
    3e36:	de 01       	movw	r26, r28
    3e38:	af 58       	subi	r26, 0x8F	; 143
    3e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e3c:	fe 01       	movw	r30, r28
    3e3e:	eb 58       	subi	r30, 0x8B	; 139
    3e40:	ff 4f       	sbci	r31, 0xFF	; 255
    3e42:	80 81       	ld	r24, Z
    3e44:	91 81       	ldd	r25, Z+1	; 0x01
    3e46:	8d 93       	st	X+, r24
    3e48:	9c 93       	st	X, r25
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	ef 58       	subi	r30, 0x8F	; 143
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	f1 f7       	brne	.-4      	; 0x3e54 <Open_door+0x18a>
    3e58:	fe 01       	movw	r30, r28
    3e5a:	ef 58       	subi	r30, 0x8F	; 143
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
    3e62:	8d eb       	ldi	r24, 0xBD	; 189
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
		LCD_moveCursor(1, 0);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
		for(uint8 i =0 ; i<5 ;i++){
    3e72:	fe 01       	movw	r30, r28
    3e74:	e1 58       	subi	r30, 0x81	; 129
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	10 82       	st	Z, r1
    3e7a:	e2 c0       	rjmp	.+452    	; 0x4040 <Open_door+0x376>
			do {
				pass[i]=KEYPAD_getPressedKey();
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e1 58       	subi	r30, 0x81	; 129
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	fe 01       	movw	r30, r28
    3e8a:	ee 57       	subi	r30, 0x7E	; 126
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	91 81       	ldd	r25, Z+1	; 0x01
    3e92:	8c 01       	movw	r16, r24
    3e94:	02 0f       	add	r16, r18
    3e96:	13 1f       	adc	r17, r19
    3e98:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	80 83       	st	Z, r24
			}while(pass[i]>9);
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e1 58       	subi	r30, 0x81	; 129
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 81       	ld	r24, Z
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	fe 01       	movw	r30, r28
    3eae:	ee 57       	subi	r30, 0x7E	; 126
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	e2 0f       	add	r30, r18
    3eba:	f3 1f       	adc	r31, r19
    3ebc:	80 81       	ld	r24, Z
    3ebe:	8a 30       	cpi	r24, 0x0A	; 10
    3ec0:	e8 f6       	brcc	.-70     	; 0x3e7c <Open_door+0x1b2>
			//LCD_intgerToString(pass[i]);
			LCD_displayCharacter('*');
    3ec2:	8a e2       	ldi	r24, 0x2A	; 42
    3ec4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
    3ec8:	fe 01       	movw	r30, r28
    3eca:	e3 59       	subi	r30, 0x93	; 147
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	a6 e9       	ldi	r26, 0x96	; 150
    3ed4:	b3 e4       	ldi	r27, 0x43	; 67
    3ed6:	80 83       	st	Z, r24
    3ed8:	91 83       	std	Z+1, r25	; 0x01
    3eda:	a2 83       	std	Z+2, r26	; 0x02
    3edc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ede:	8e 01       	movw	r16, r28
    3ee0:	07 59       	subi	r16, 0x97	; 151
    3ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e3 59       	subi	r30, 0x93	; 147
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	60 81       	ld	r22, Z
    3eec:	71 81       	ldd	r23, Z+1	; 0x01
    3eee:	82 81       	ldd	r24, Z+2	; 0x02
    3ef0:	93 81       	ldd	r25, Z+3	; 0x03
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	4a ef       	ldi	r20, 0xFA	; 250
    3ef8:	54 e4       	ldi	r21, 0x44	; 68
    3efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	f8 01       	movw	r30, r16
    3f04:	80 83       	st	Z, r24
    3f06:	91 83       	std	Z+1, r25	; 0x01
    3f08:	a2 83       	std	Z+2, r26	; 0x02
    3f0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e7 59       	subi	r30, 0x97	; 151
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	60 81       	ld	r22, Z
    3f14:	71 81       	ldd	r23, Z+1	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e8       	ldi	r20, 0x80	; 128
    3f20:	5f e3       	ldi	r21, 0x3F	; 63
    3f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f26:	88 23       	and	r24, r24
    3f28:	44 f4       	brge	.+16     	; 0x3f3a <Open_door+0x270>
		__ticks = 1;
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e9 59       	subi	r30, 0x99	; 153
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	80 83       	st	Z, r24
    3f38:	64 c0       	rjmp	.+200    	; 0x4002 <Open_door+0x338>
	else if (__tmp > 65535)
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e7 59       	subi	r30, 0x97	; 151
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	60 81       	ld	r22, Z
    3f42:	71 81       	ldd	r23, Z+1	; 0x01
    3f44:	82 81       	ldd	r24, Z+2	; 0x02
    3f46:	93 81       	ldd	r25, Z+3	; 0x03
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	3f ef       	ldi	r19, 0xFF	; 255
    3f4c:	4f e7       	ldi	r20, 0x7F	; 127
    3f4e:	57 e4       	ldi	r21, 0x47	; 71
    3f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f54:	18 16       	cp	r1, r24
    3f56:	0c f0       	brlt	.+2      	; 0x3f5a <Open_door+0x290>
    3f58:	43 c0       	rjmp	.+134    	; 0x3fe0 <Open_door+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e3 59       	subi	r30, 0x93	; 147
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	60 81       	ld	r22, Z
    3f62:	71 81       	ldd	r23, Z+1	; 0x01
    3f64:	82 81       	ldd	r24, Z+2	; 0x02
    3f66:	93 81       	ldd	r25, Z+3	; 0x03
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e2       	ldi	r20, 0x20	; 32
    3f6e:	51 e4       	ldi	r21, 0x41	; 65
    3f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	8e 01       	movw	r16, r28
    3f7a:	09 59       	subi	r16, 0x99	; 153
    3f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7e:	bc 01       	movw	r22, r24
    3f80:	cd 01       	movw	r24, r26
    3f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	f8 01       	movw	r30, r16
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	80 83       	st	Z, r24
    3f90:	1f c0       	rjmp	.+62     	; 0x3fd0 <Open_door+0x306>
    3f92:	fe 01       	movw	r30, r28
    3f94:	eb 59       	subi	r30, 0x9B	; 155
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	88 ec       	ldi	r24, 0xC8	; 200
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	eb 59       	subi	r30, 0x9B	; 155
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	80 81       	ld	r24, Z
    3fa8:	91 81       	ldd	r25, Z+1	; 0x01
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <Open_door+0x2e0>
    3fae:	fe 01       	movw	r30, r28
    3fb0:	eb 59       	subi	r30, 0x9B	; 155
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	91 83       	std	Z+1, r25	; 0x01
    3fb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb8:	de 01       	movw	r26, r28
    3fba:	a9 59       	subi	r26, 0x99	; 153
    3fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e9 59       	subi	r30, 0x99	; 153
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 81       	ld	r24, Z
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	11 96       	adiw	r26, 0x01	; 1
    3fcc:	9c 93       	st	X, r25
    3fce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e9 59       	subi	r30, 0x99	; 153
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 81       	ld	r24, Z
    3fd8:	91 81       	ldd	r25, Z+1	; 0x01
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	d1 f6       	brne	.-76     	; 0x3f92 <Open_door+0x2c8>
    3fde:	27 c0       	rjmp	.+78     	; 0x402e <Open_door+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe0:	8e 01       	movw	r16, r28
    3fe2:	09 59       	subi	r16, 0x99	; 153
    3fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e7 59       	subi	r30, 0x97	; 151
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	f8 01       	movw	r30, r16
    3ffe:	91 83       	std	Z+1, r25	; 0x01
    4000:	80 83       	st	Z, r24
    4002:	de 01       	movw	r26, r28
    4004:	ad 59       	subi	r26, 0x9D	; 157
    4006:	bf 4f       	sbci	r27, 0xFF	; 255
    4008:	fe 01       	movw	r30, r28
    400a:	e9 59       	subi	r30, 0x99	; 153
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	8d 93       	st	X+, r24
    4014:	9c 93       	st	X, r25
    4016:	fe 01       	movw	r30, r28
    4018:	ed 59       	subi	r30, 0x9D	; 157
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 81       	ld	r24, Z
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	f1 f7       	brne	.-4      	; 0x4020 <Open_door+0x356>
    4024:	fe 01       	movw	r30, r28
    4026:	ed 59       	subi	r30, 0x9D	; 157
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
	while(false_pass_count<3){
		LCD_clearScreen();
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
		LCD_moveCursor(1, 0);
		for(uint8 i =0 ; i<5 ;i++){
    402e:	de 01       	movw	r26, r28
    4030:	a1 58       	subi	r26, 0x81	; 129
    4032:	bf 4f       	sbci	r27, 0xFF	; 255
    4034:	fe 01       	movw	r30, r28
    4036:	e1 58       	subi	r30, 0x81	; 129
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	8f 5f       	subi	r24, 0xFF	; 255
    403e:	8c 93       	st	X, r24
    4040:	fe 01       	movw	r30, r28
    4042:	e1 58       	subi	r30, 0x81	; 129
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 81       	ld	r24, Z
    4048:	85 30       	cpi	r24, 0x05	; 5
    404a:	08 f4       	brcc	.+2      	; 0x404e <Open_door+0x384>
    404c:	17 cf       	rjmp	.-466    	; 0x3e7c <Open_door+0x1b2>
			}while(pass[i]>9);
			//LCD_intgerToString(pass[i]);
			LCD_displayCharacter('*');
			_delay_ms(300);
		}
		while(KEYPAD_getPressedKey()!=13);
    404e:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    4052:	8d 30       	cpi	r24, 0x0D	; 13
    4054:	e1 f7       	brne	.-8      	; 0x404e <Open_door+0x384>
		errors status = verify_password(pass);
    4056:	fe 01       	movw	r30, r28
    4058:	ee 57       	subi	r30, 0x7E	; 126
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	91 81       	ldd	r25, Z+1	; 0x01
    4060:	0e 94 9e 19 	call	0x333c	; 0x333c <verify_password>
    4064:	fe 01       	movw	r30, r28
    4066:	e0 58       	subi	r30, 0x80	; 128
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	80 83       	st	Z, r24

		if (status == right_password )
    406c:	fe 01       	movw	r30, r28
    406e:	e0 58       	subi	r30, 0x80	; 128
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	83 30       	cpi	r24, 0x03	; 3
    4076:	09 f0       	breq	.+2      	; 0x407a <Open_door+0x3b0>
    4078:	eb c3       	rjmp	.+2006   	; 0x4850 <Open_door+0xb86>
		{

			LCD_clearScreen();
    407a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
			LCD_displayString("door is unlocking");
    407e:	8e ec       	ldi	r24, 0xCE	; 206
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
			LCD_moveCursor(1, 0);
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
			LCD_displayString(". ");
    408e:	8e e9       	ldi	r24, 0x9E	; 158
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4096:	fe 01       	movw	r30, r28
    4098:	e1 5a       	subi	r30, 0xA1	; 161
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	aa ef       	ldi	r26, 0xFA	; 250
    40a2:	b3 e4       	ldi	r27, 0x43	; 67
    40a4:	80 83       	st	Z, r24
    40a6:	91 83       	std	Z+1, r25	; 0x01
    40a8:	a2 83       	std	Z+2, r26	; 0x02
    40aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ac:	8e 01       	movw	r16, r28
    40ae:	05 5a       	subi	r16, 0xA5	; 165
    40b0:	1f 4f       	sbci	r17, 0xFF	; 255
    40b2:	fe 01       	movw	r30, r28
    40b4:	e1 5a       	subi	r30, 0xA1	; 161
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	60 81       	ld	r22, Z
    40ba:	71 81       	ldd	r23, Z+1	; 0x01
    40bc:	82 81       	ldd	r24, Z+2	; 0x02
    40be:	93 81       	ldd	r25, Z+3	; 0x03
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	4a ef       	ldi	r20, 0xFA	; 250
    40c6:	54 e4       	ldi	r21, 0x44	; 68
    40c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	f8 01       	movw	r30, r16
    40d2:	80 83       	st	Z, r24
    40d4:	91 83       	std	Z+1, r25	; 0x01
    40d6:	a2 83       	std	Z+2, r26	; 0x02
    40d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40da:	fe 01       	movw	r30, r28
    40dc:	e5 5a       	subi	r30, 0xA5	; 165
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	60 81       	ld	r22, Z
    40e2:	71 81       	ldd	r23, Z+1	; 0x01
    40e4:	82 81       	ldd	r24, Z+2	; 0x02
    40e6:	93 81       	ldd	r25, Z+3	; 0x03
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e8       	ldi	r20, 0x80	; 128
    40ee:	5f e3       	ldi	r21, 0x3F	; 63
    40f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40f4:	88 23       	and	r24, r24
    40f6:	44 f4       	brge	.+16     	; 0x4108 <Open_door+0x43e>
		__ticks = 1;
    40f8:	fe 01       	movw	r30, r28
    40fa:	e7 5a       	subi	r30, 0xA7	; 167
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	91 83       	std	Z+1, r25	; 0x01
    4104:	80 83       	st	Z, r24
    4106:	64 c0       	rjmp	.+200    	; 0x41d0 <Open_door+0x506>
	else if (__tmp > 65535)
    4108:	fe 01       	movw	r30, r28
    410a:	e5 5a       	subi	r30, 0xA5	; 165
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	60 81       	ld	r22, Z
    4110:	71 81       	ldd	r23, Z+1	; 0x01
    4112:	82 81       	ldd	r24, Z+2	; 0x02
    4114:	93 81       	ldd	r25, Z+3	; 0x03
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	3f ef       	ldi	r19, 0xFF	; 255
    411a:	4f e7       	ldi	r20, 0x7F	; 127
    411c:	57 e4       	ldi	r21, 0x47	; 71
    411e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4122:	18 16       	cp	r1, r24
    4124:	0c f0       	brlt	.+2      	; 0x4128 <Open_door+0x45e>
    4126:	43 c0       	rjmp	.+134    	; 0x41ae <Open_door+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4128:	fe 01       	movw	r30, r28
    412a:	e1 5a       	subi	r30, 0xA1	; 161
    412c:	ff 4f       	sbci	r31, 0xFF	; 255
    412e:	60 81       	ld	r22, Z
    4130:	71 81       	ldd	r23, Z+1	; 0x01
    4132:	82 81       	ldd	r24, Z+2	; 0x02
    4134:	93 81       	ldd	r25, Z+3	; 0x03
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e2       	ldi	r20, 0x20	; 32
    413c:	51 e4       	ldi	r21, 0x41	; 65
    413e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	8e 01       	movw	r16, r28
    4148:	07 5a       	subi	r16, 0xA7	; 167
    414a:	1f 4f       	sbci	r17, 0xFF	; 255
    414c:	bc 01       	movw	r22, r24
    414e:	cd 01       	movw	r24, r26
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	f8 01       	movw	r30, r16
    415a:	91 83       	std	Z+1, r25	; 0x01
    415c:	80 83       	st	Z, r24
    415e:	1f c0       	rjmp	.+62     	; 0x419e <Open_door+0x4d4>
    4160:	fe 01       	movw	r30, r28
    4162:	e9 5a       	subi	r30, 0xA9	; 169
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	88 ec       	ldi	r24, 0xC8	; 200
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	91 83       	std	Z+1, r25	; 0x01
    416c:	80 83       	st	Z, r24
    416e:	fe 01       	movw	r30, r28
    4170:	e9 5a       	subi	r30, 0xA9	; 169
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	80 81       	ld	r24, Z
    4176:	91 81       	ldd	r25, Z+1	; 0x01
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	f1 f7       	brne	.-4      	; 0x4178 <Open_door+0x4ae>
    417c:	fe 01       	movw	r30, r28
    417e:	e9 5a       	subi	r30, 0xA9	; 169
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	91 83       	std	Z+1, r25	; 0x01
    4184:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4186:	de 01       	movw	r26, r28
    4188:	a7 5a       	subi	r26, 0xA7	; 167
    418a:	bf 4f       	sbci	r27, 0xFF	; 255
    418c:	fe 01       	movw	r30, r28
    418e:	e7 5a       	subi	r30, 0xA7	; 167
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	80 81       	ld	r24, Z
    4194:	91 81       	ldd	r25, Z+1	; 0x01
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	11 96       	adiw	r26, 0x01	; 1
    419a:	9c 93       	st	X, r25
    419c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419e:	fe 01       	movw	r30, r28
    41a0:	e7 5a       	subi	r30, 0xA7	; 167
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	80 81       	ld	r24, Z
    41a6:	91 81       	ldd	r25, Z+1	; 0x01
    41a8:	00 97       	sbiw	r24, 0x00	; 0
    41aa:	d1 f6       	brne	.-76     	; 0x4160 <Open_door+0x496>
    41ac:	27 c0       	rjmp	.+78     	; 0x41fc <Open_door+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ae:	8e 01       	movw	r16, r28
    41b0:	07 5a       	subi	r16, 0xA7	; 167
    41b2:	1f 4f       	sbci	r17, 0xFF	; 255
    41b4:	fe 01       	movw	r30, r28
    41b6:	e5 5a       	subi	r30, 0xA5	; 165
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	60 81       	ld	r22, Z
    41bc:	71 81       	ldd	r23, Z+1	; 0x01
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	93 81       	ldd	r25, Z+3	; 0x03
    41c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	f8 01       	movw	r30, r16
    41cc:	91 83       	std	Z+1, r25	; 0x01
    41ce:	80 83       	st	Z, r24
    41d0:	de 01       	movw	r26, r28
    41d2:	ab 5a       	subi	r26, 0xAB	; 171
    41d4:	bf 4f       	sbci	r27, 0xFF	; 255
    41d6:	fe 01       	movw	r30, r28
    41d8:	e7 5a       	subi	r30, 0xA7	; 167
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	80 81       	ld	r24, Z
    41de:	91 81       	ldd	r25, Z+1	; 0x01
    41e0:	8d 93       	st	X+, r24
    41e2:	9c 93       	st	X, r25
    41e4:	fe 01       	movw	r30, r28
    41e6:	eb 5a       	subi	r30, 0xAB	; 171
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	80 81       	ld	r24, Z
    41ec:	91 81       	ldd	r25, Z+1	; 0x01
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <Open_door+0x524>
    41f2:	fe 01       	movw	r30, r28
    41f4:	eb 5a       	subi	r30, 0xAB	; 171
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	91 83       	std	Z+1, r25	; 0x01
    41fa:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_displayString(". ");
    41fc:	8e e9       	ldi	r24, 0x9E	; 158
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4204:	fe 01       	movw	r30, r28
    4206:	ef 5a       	subi	r30, 0xAF	; 175
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	aa ef       	ldi	r26, 0xFA	; 250
    4210:	b3 e4       	ldi	r27, 0x43	; 67
    4212:	80 83       	st	Z, r24
    4214:	91 83       	std	Z+1, r25	; 0x01
    4216:	a2 83       	std	Z+2, r26	; 0x02
    4218:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421a:	8e 01       	movw	r16, r28
    421c:	03 5b       	subi	r16, 0xB3	; 179
    421e:	1f 4f       	sbci	r17, 0xFF	; 255
    4220:	fe 01       	movw	r30, r28
    4222:	ef 5a       	subi	r30, 0xAF	; 175
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	60 81       	ld	r22, Z
    4228:	71 81       	ldd	r23, Z+1	; 0x01
    422a:	82 81       	ldd	r24, Z+2	; 0x02
    422c:	93 81       	ldd	r25, Z+3	; 0x03
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	4a ef       	ldi	r20, 0xFA	; 250
    4234:	54 e4       	ldi	r21, 0x44	; 68
    4236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	f8 01       	movw	r30, r16
    4240:	80 83       	st	Z, r24
    4242:	91 83       	std	Z+1, r25	; 0x01
    4244:	a2 83       	std	Z+2, r26	; 0x02
    4246:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4248:	fe 01       	movw	r30, r28
    424a:	e3 5b       	subi	r30, 0xB3	; 179
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e8       	ldi	r20, 0x80	; 128
    425c:	5f e3       	ldi	r21, 0x3F	; 63
    425e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4262:	88 23       	and	r24, r24
    4264:	44 f4       	brge	.+16     	; 0x4276 <Open_door+0x5ac>
		__ticks = 1;
    4266:	fe 01       	movw	r30, r28
    4268:	e5 5b       	subi	r30, 0xB5	; 181
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	80 83       	st	Z, r24
    4274:	64 c0       	rjmp	.+200    	; 0x433e <Open_door+0x674>
	else if (__tmp > 65535)
    4276:	fe 01       	movw	r30, r28
    4278:	e3 5b       	subi	r30, 0xB3	; 179
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	60 81       	ld	r22, Z
    427e:	71 81       	ldd	r23, Z+1	; 0x01
    4280:	82 81       	ldd	r24, Z+2	; 0x02
    4282:	93 81       	ldd	r25, Z+3	; 0x03
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	3f ef       	ldi	r19, 0xFF	; 255
    4288:	4f e7       	ldi	r20, 0x7F	; 127
    428a:	57 e4       	ldi	r21, 0x47	; 71
    428c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4290:	18 16       	cp	r1, r24
    4292:	0c f0       	brlt	.+2      	; 0x4296 <Open_door+0x5cc>
    4294:	43 c0       	rjmp	.+134    	; 0x431c <Open_door+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4296:	fe 01       	movw	r30, r28
    4298:	ef 5a       	subi	r30, 0xAF	; 175
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	60 81       	ld	r22, Z
    429e:	71 81       	ldd	r23, Z+1	; 0x01
    42a0:	82 81       	ldd	r24, Z+2	; 0x02
    42a2:	93 81       	ldd	r25, Z+3	; 0x03
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e2       	ldi	r20, 0x20	; 32
    42aa:	51 e4       	ldi	r21, 0x41	; 65
    42ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	8e 01       	movw	r16, r28
    42b6:	05 5b       	subi	r16, 0xB5	; 181
    42b8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ba:	bc 01       	movw	r22, r24
    42bc:	cd 01       	movw	r24, r26
    42be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	f8 01       	movw	r30, r16
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	80 83       	st	Z, r24
    42cc:	1f c0       	rjmp	.+62     	; 0x430c <Open_door+0x642>
    42ce:	fe 01       	movw	r30, r28
    42d0:	e7 5b       	subi	r30, 0xB7	; 183
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	88 ec       	ldi	r24, 0xC8	; 200
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	91 83       	std	Z+1, r25	; 0x01
    42da:	80 83       	st	Z, r24
    42dc:	fe 01       	movw	r30, r28
    42de:	e7 5b       	subi	r30, 0xB7	; 183
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	80 81       	ld	r24, Z
    42e4:	91 81       	ldd	r25, Z+1	; 0x01
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <Open_door+0x61c>
    42ea:	fe 01       	movw	r30, r28
    42ec:	e7 5b       	subi	r30, 0xB7	; 183
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f4:	de 01       	movw	r26, r28
    42f6:	a5 5b       	subi	r26, 0xB5	; 181
    42f8:	bf 4f       	sbci	r27, 0xFF	; 255
    42fa:	fe 01       	movw	r30, r28
    42fc:	e5 5b       	subi	r30, 0xB5	; 181
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	80 81       	ld	r24, Z
    4302:	91 81       	ldd	r25, Z+1	; 0x01
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	11 96       	adiw	r26, 0x01	; 1
    4308:	9c 93       	st	X, r25
    430a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430c:	fe 01       	movw	r30, r28
    430e:	e5 5b       	subi	r30, 0xB5	; 181
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	80 81       	ld	r24, Z
    4314:	91 81       	ldd	r25, Z+1	; 0x01
    4316:	00 97       	sbiw	r24, 0x00	; 0
    4318:	d1 f6       	brne	.-76     	; 0x42ce <Open_door+0x604>
    431a:	27 c0       	rjmp	.+78     	; 0x436a <Open_door+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431c:	8e 01       	movw	r16, r28
    431e:	05 5b       	subi	r16, 0xB5	; 181
    4320:	1f 4f       	sbci	r17, 0xFF	; 255
    4322:	fe 01       	movw	r30, r28
    4324:	e3 5b       	subi	r30, 0xB3	; 179
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	60 81       	ld	r22, Z
    432a:	71 81       	ldd	r23, Z+1	; 0x01
    432c:	82 81       	ldd	r24, Z+2	; 0x02
    432e:	93 81       	ldd	r25, Z+3	; 0x03
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	f8 01       	movw	r30, r16
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
    433e:	de 01       	movw	r26, r28
    4340:	a9 5b       	subi	r26, 0xB9	; 185
    4342:	bf 4f       	sbci	r27, 0xFF	; 255
    4344:	fe 01       	movw	r30, r28
    4346:	e5 5b       	subi	r30, 0xB5	; 181
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	80 81       	ld	r24, Z
    434c:	91 81       	ldd	r25, Z+1	; 0x01
    434e:	8d 93       	st	X+, r24
    4350:	9c 93       	st	X, r25
    4352:	fe 01       	movw	r30, r28
    4354:	e9 5b       	subi	r30, 0xB9	; 185
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	80 81       	ld	r24, Z
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <Open_door+0x692>
    4360:	fe 01       	movw	r30, r28
    4362:	e9 5b       	subi	r30, 0xB9	; 185
    4364:	ff 4f       	sbci	r31, 0xFF	; 255
    4366:	91 83       	std	Z+1, r25	; 0x01
    4368:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_displayString(". ");
    436a:	8e e9       	ldi	r24, 0x9E	; 158
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4372:	fe 01       	movw	r30, r28
    4374:	ed 5b       	subi	r30, 0xBD	; 189
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	aa ef       	ldi	r26, 0xFA	; 250
    437e:	b3 e4       	ldi	r27, 0x43	; 67
    4380:	80 83       	st	Z, r24
    4382:	91 83       	std	Z+1, r25	; 0x01
    4384:	a2 83       	std	Z+2, r26	; 0x02
    4386:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4388:	8e 01       	movw	r16, r28
    438a:	01 5c       	subi	r16, 0xC1	; 193
    438c:	1f 4f       	sbci	r17, 0xFF	; 255
    438e:	fe 01       	movw	r30, r28
    4390:	ed 5b       	subi	r30, 0xBD	; 189
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	60 81       	ld	r22, Z
    4396:	71 81       	ldd	r23, Z+1	; 0x01
    4398:	82 81       	ldd	r24, Z+2	; 0x02
    439a:	93 81       	ldd	r25, Z+3	; 0x03
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	4a ef       	ldi	r20, 0xFA	; 250
    43a2:	54 e4       	ldi	r21, 0x44	; 68
    43a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	f8 01       	movw	r30, r16
    43ae:	80 83       	st	Z, r24
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	a2 83       	std	Z+2, r26	; 0x02
    43b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43b6:	fe 01       	movw	r30, r28
    43b8:	ff 96       	adiw	r30, 0x3f	; 63
    43ba:	60 81       	ld	r22, Z
    43bc:	71 81       	ldd	r23, Z+1	; 0x01
    43be:	82 81       	ldd	r24, Z+2	; 0x02
    43c0:	93 81       	ldd	r25, Z+3	; 0x03
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e8       	ldi	r20, 0x80	; 128
    43c8:	5f e3       	ldi	r21, 0x3F	; 63
    43ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43ce:	88 23       	and	r24, r24
    43d0:	2c f4       	brge	.+10     	; 0x43dc <Open_door+0x712>
		__ticks = 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	9e af       	std	Y+62, r25	; 0x3e
    43d8:	8d af       	std	Y+61, r24	; 0x3d
    43da:	46 c0       	rjmp	.+140    	; 0x4468 <Open_door+0x79e>
	else if (__tmp > 65535)
    43dc:	fe 01       	movw	r30, r28
    43de:	ff 96       	adiw	r30, 0x3f	; 63
    43e0:	60 81       	ld	r22, Z
    43e2:	71 81       	ldd	r23, Z+1	; 0x01
    43e4:	82 81       	ldd	r24, Z+2	; 0x02
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	3f ef       	ldi	r19, 0xFF	; 255
    43ec:	4f e7       	ldi	r20, 0x7F	; 127
    43ee:	57 e4       	ldi	r21, 0x47	; 71
    43f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43f4:	18 16       	cp	r1, r24
    43f6:	64 f5       	brge	.+88     	; 0x4450 <Open_door+0x786>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f8:	fe 01       	movw	r30, r28
    43fa:	ed 5b       	subi	r30, 0xBD	; 189
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	60 81       	ld	r22, Z
    4400:	71 81       	ldd	r23, Z+1	; 0x01
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	93 81       	ldd	r25, Z+3	; 0x03
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e2       	ldi	r20, 0x20	; 32
    440c:	51 e4       	ldi	r21, 0x41	; 65
    440e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	bc 01       	movw	r22, r24
    4418:	cd 01       	movw	r24, r26
    441a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	9e af       	std	Y+62, r25	; 0x3e
    4424:	8d af       	std	Y+61, r24	; 0x3d
    4426:	0f c0       	rjmp	.+30     	; 0x4446 <Open_door+0x77c>
    4428:	88 ec       	ldi	r24, 0xC8	; 200
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	9c af       	std	Y+60, r25	; 0x3c
    442e:	8b af       	std	Y+59, r24	; 0x3b
    4430:	8b ad       	ldd	r24, Y+59	; 0x3b
    4432:	9c ad       	ldd	r25, Y+60	; 0x3c
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <Open_door+0x76a>
    4438:	9c af       	std	Y+60, r25	; 0x3c
    443a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443c:	8d ad       	ldd	r24, Y+61	; 0x3d
    443e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	9e af       	std	Y+62, r25	; 0x3e
    4444:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4446:	8d ad       	ldd	r24, Y+61	; 0x3d
    4448:	9e ad       	ldd	r25, Y+62	; 0x3e
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	69 f7       	brne	.-38     	; 0x4428 <Open_door+0x75e>
    444e:	16 c0       	rjmp	.+44     	; 0x447c <Open_door+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4450:	fe 01       	movw	r30, r28
    4452:	ff 96       	adiw	r30, 0x3f	; 63
    4454:	60 81       	ld	r22, Z
    4456:	71 81       	ldd	r23, Z+1	; 0x01
    4458:	82 81       	ldd	r24, Z+2	; 0x02
    445a:	93 81       	ldd	r25, Z+3	; 0x03
    445c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	9e af       	std	Y+62, r25	; 0x3e
    4466:	8d af       	std	Y+61, r24	; 0x3d
    4468:	8d ad       	ldd	r24, Y+61	; 0x3d
    446a:	9e ad       	ldd	r25, Y+62	; 0x3e
    446c:	9a af       	std	Y+58, r25	; 0x3a
    446e:	89 af       	std	Y+57, r24	; 0x39
    4470:	89 ad       	ldd	r24, Y+57	; 0x39
    4472:	9a ad       	ldd	r25, Y+58	; 0x3a
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	f1 f7       	brne	.-4      	; 0x4474 <Open_door+0x7aa>
    4478:	9a af       	std	Y+58, r25	; 0x3a
    447a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			LCD_displayString(". ");
    447c:	8e e9       	ldi	r24, 0x9E	; 158
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	aa ef       	ldi	r26, 0xFA	; 250
    448a:	b3 e4       	ldi	r27, 0x43	; 67
    448c:	8d ab       	std	Y+53, r24	; 0x35
    448e:	9e ab       	std	Y+54, r25	; 0x36
    4490:	af ab       	std	Y+55, r26	; 0x37
    4492:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4494:	6d a9       	ldd	r22, Y+53	; 0x35
    4496:	7e a9       	ldd	r23, Y+54	; 0x36
    4498:	8f a9       	ldd	r24, Y+55	; 0x37
    449a:	98 ad       	ldd	r25, Y+56	; 0x38
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	4a ef       	ldi	r20, 0xFA	; 250
    44a2:	54 e4       	ldi	r21, 0x44	; 68
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	89 ab       	std	Y+49, r24	; 0x31
    44ae:	9a ab       	std	Y+50, r25	; 0x32
    44b0:	ab ab       	std	Y+51, r26	; 0x33
    44b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44b4:	69 a9       	ldd	r22, Y+49	; 0x31
    44b6:	7a a9       	ldd	r23, Y+50	; 0x32
    44b8:	8b a9       	ldd	r24, Y+51	; 0x33
    44ba:	9c a9       	ldd	r25, Y+52	; 0x34
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e8       	ldi	r20, 0x80	; 128
    44c2:	5f e3       	ldi	r21, 0x3F	; 63
    44c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44c8:	88 23       	and	r24, r24
    44ca:	2c f4       	brge	.+10     	; 0x44d6 <Open_door+0x80c>
		__ticks = 1;
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	98 ab       	std	Y+48, r25	; 0x30
    44d2:	8f a7       	std	Y+47, r24	; 0x2f
    44d4:	3f c0       	rjmp	.+126    	; 0x4554 <Open_door+0x88a>
	else if (__tmp > 65535)
    44d6:	69 a9       	ldd	r22, Y+49	; 0x31
    44d8:	7a a9       	ldd	r23, Y+50	; 0x32
    44da:	8b a9       	ldd	r24, Y+51	; 0x33
    44dc:	9c a9       	ldd	r25, Y+52	; 0x34
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	3f ef       	ldi	r19, 0xFF	; 255
    44e2:	4f e7       	ldi	r20, 0x7F	; 127
    44e4:	57 e4       	ldi	r21, 0x47	; 71
    44e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44ea:	18 16       	cp	r1, r24
    44ec:	4c f5       	brge	.+82     	; 0x4540 <Open_door+0x876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ee:	6d a9       	ldd	r22, Y+53	; 0x35
    44f0:	7e a9       	ldd	r23, Y+54	; 0x36
    44f2:	8f a9       	ldd	r24, Y+55	; 0x37
    44f4:	98 ad       	ldd	r25, Y+56	; 0x38
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	40 e2       	ldi	r20, 0x20	; 32
    44fc:	51 e4       	ldi	r21, 0x41	; 65
    44fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	98 ab       	std	Y+48, r25	; 0x30
    4514:	8f a7       	std	Y+47, r24	; 0x2f
    4516:	0f c0       	rjmp	.+30     	; 0x4536 <Open_door+0x86c>
    4518:	88 ec       	ldi	r24, 0xC8	; 200
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	9e a7       	std	Y+46, r25	; 0x2e
    451e:	8d a7       	std	Y+45, r24	; 0x2d
    4520:	8d a5       	ldd	r24, Y+45	; 0x2d
    4522:	9e a5       	ldd	r25, Y+46	; 0x2e
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	f1 f7       	brne	.-4      	; 0x4524 <Open_door+0x85a>
    4528:	9e a7       	std	Y+46, r25	; 0x2e
    452a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452c:	8f a5       	ldd	r24, Y+47	; 0x2f
    452e:	98 a9       	ldd	r25, Y+48	; 0x30
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	98 ab       	std	Y+48, r25	; 0x30
    4534:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4536:	8f a5       	ldd	r24, Y+47	; 0x2f
    4538:	98 a9       	ldd	r25, Y+48	; 0x30
    453a:	00 97       	sbiw	r24, 0x00	; 0
    453c:	69 f7       	brne	.-38     	; 0x4518 <Open_door+0x84e>
    453e:	14 c0       	rjmp	.+40     	; 0x4568 <Open_door+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4540:	69 a9       	ldd	r22, Y+49	; 0x31
    4542:	7a a9       	ldd	r23, Y+50	; 0x32
    4544:	8b a9       	ldd	r24, Y+51	; 0x33
    4546:	9c a9       	ldd	r25, Y+52	; 0x34
    4548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	98 ab       	std	Y+48, r25	; 0x30
    4552:	8f a7       	std	Y+47, r24	; 0x2f
    4554:	8f a5       	ldd	r24, Y+47	; 0x2f
    4556:	98 a9       	ldd	r25, Y+48	; 0x30
    4558:	9c a7       	std	Y+44, r25	; 0x2c
    455a:	8b a7       	std	Y+43, r24	; 0x2b
    455c:	8b a5       	ldd	r24, Y+43	; 0x2b
    455e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4560:	01 97       	sbiw	r24, 0x01	; 1
    4562:	f1 f7       	brne	.-4      	; 0x4560 <Open_door+0x896>
    4564:	9c a7       	std	Y+44, r25	; 0x2c
    4566:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			LCD_displayString(". ");
    4568:	8e e9       	ldi	r24, 0x9E	; 158
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	aa ef       	ldi	r26, 0xFA	; 250
    4576:	b3 e4       	ldi	r27, 0x43	; 67
    4578:	8f a3       	std	Y+39, r24	; 0x27
    457a:	98 a7       	std	Y+40, r25	; 0x28
    457c:	a9 a7       	std	Y+41, r26	; 0x29
    457e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4580:	6f a1       	ldd	r22, Y+39	; 0x27
    4582:	78 a5       	ldd	r23, Y+40	; 0x28
    4584:	89 a5       	ldd	r24, Y+41	; 0x29
    4586:	9a a5       	ldd	r25, Y+42	; 0x2a
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	4a ef       	ldi	r20, 0xFA	; 250
    458e:	54 e4       	ldi	r21, 0x44	; 68
    4590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	8b a3       	std	Y+35, r24	; 0x23
    459a:	9c a3       	std	Y+36, r25	; 0x24
    459c:	ad a3       	std	Y+37, r26	; 0x25
    459e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    45a0:	6b a1       	ldd	r22, Y+35	; 0x23
    45a2:	7c a1       	ldd	r23, Y+36	; 0x24
    45a4:	8d a1       	ldd	r24, Y+37	; 0x25
    45a6:	9e a1       	ldd	r25, Y+38	; 0x26
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	40 e8       	ldi	r20, 0x80	; 128
    45ae:	5f e3       	ldi	r21, 0x3F	; 63
    45b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45b4:	88 23       	and	r24, r24
    45b6:	2c f4       	brge	.+10     	; 0x45c2 <Open_door+0x8f8>
		__ticks = 1;
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	9a a3       	std	Y+34, r25	; 0x22
    45be:	89 a3       	std	Y+33, r24	; 0x21
    45c0:	3f c0       	rjmp	.+126    	; 0x4640 <Open_door+0x976>
	else if (__tmp > 65535)
    45c2:	6b a1       	ldd	r22, Y+35	; 0x23
    45c4:	7c a1       	ldd	r23, Y+36	; 0x24
    45c6:	8d a1       	ldd	r24, Y+37	; 0x25
    45c8:	9e a1       	ldd	r25, Y+38	; 0x26
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	3f ef       	ldi	r19, 0xFF	; 255
    45ce:	4f e7       	ldi	r20, 0x7F	; 127
    45d0:	57 e4       	ldi	r21, 0x47	; 71
    45d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45d6:	18 16       	cp	r1, r24
    45d8:	4c f5       	brge	.+82     	; 0x462c <Open_door+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45da:	6f a1       	ldd	r22, Y+39	; 0x27
    45dc:	78 a5       	ldd	r23, Y+40	; 0x28
    45de:	89 a5       	ldd	r24, Y+41	; 0x29
    45e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e2       	ldi	r20, 0x20	; 32
    45e8:	51 e4       	ldi	r21, 0x41	; 65
    45ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	bc 01       	movw	r22, r24
    45f4:	cd 01       	movw	r24, r26
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	9a a3       	std	Y+34, r25	; 0x22
    4600:	89 a3       	std	Y+33, r24	; 0x21
    4602:	0f c0       	rjmp	.+30     	; 0x4622 <Open_door+0x958>
    4604:	88 ec       	ldi	r24, 0xC8	; 200
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	98 a3       	std	Y+32, r25	; 0x20
    460a:	8f 8f       	std	Y+31, r24	; 0x1f
    460c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    460e:	98 a1       	ldd	r25, Y+32	; 0x20
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	f1 f7       	brne	.-4      	; 0x4610 <Open_door+0x946>
    4614:	98 a3       	std	Y+32, r25	; 0x20
    4616:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4618:	89 a1       	ldd	r24, Y+33	; 0x21
    461a:	9a a1       	ldd	r25, Y+34	; 0x22
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	9a a3       	std	Y+34, r25	; 0x22
    4620:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4622:	89 a1       	ldd	r24, Y+33	; 0x21
    4624:	9a a1       	ldd	r25, Y+34	; 0x22
    4626:	00 97       	sbiw	r24, 0x00	; 0
    4628:	69 f7       	brne	.-38     	; 0x4604 <Open_door+0x93a>
    462a:	14 c0       	rjmp	.+40     	; 0x4654 <Open_door+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    462c:	6b a1       	ldd	r22, Y+35	; 0x23
    462e:	7c a1       	ldd	r23, Y+36	; 0x24
    4630:	8d a1       	ldd	r24, Y+37	; 0x25
    4632:	9e a1       	ldd	r25, Y+38	; 0x26
    4634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	9a a3       	std	Y+34, r25	; 0x22
    463e:	89 a3       	std	Y+33, r24	; 0x21
    4640:	89 a1       	ldd	r24, Y+33	; 0x21
    4642:	9a a1       	ldd	r25, Y+34	; 0x22
    4644:	9e 8f       	std	Y+30, r25	; 0x1e
    4646:	8d 8f       	std	Y+29, r24	; 0x1d
    4648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    464a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    464c:	01 97       	sbiw	r24, 0x01	; 1
    464e:	f1 f7       	brne	.-4      	; 0x464c <Open_door+0x982>
    4650:	9e 8f       	std	Y+30, r25	; 0x1e
    4652:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			LCD_displayString(". ");
    4654:	8e e9       	ldi	r24, 0x9E	; 158
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	aa ef       	ldi	r26, 0xFA	; 250
    4662:	b3 e4       	ldi	r27, 0x43	; 67
    4664:	89 8f       	std	Y+25, r24	; 0x19
    4666:	9a 8f       	std	Y+26, r25	; 0x1a
    4668:	ab 8f       	std	Y+27, r26	; 0x1b
    466a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    466c:	69 8d       	ldd	r22, Y+25	; 0x19
    466e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	4a ef       	ldi	r20, 0xFA	; 250
    467a:	54 e4       	ldi	r21, 0x44	; 68
    467c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	8d 8b       	std	Y+21, r24	; 0x15
    4686:	9e 8b       	std	Y+22, r25	; 0x16
    4688:	af 8b       	std	Y+23, r26	; 0x17
    468a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    468c:	6d 89       	ldd	r22, Y+21	; 0x15
    468e:	7e 89       	ldd	r23, Y+22	; 0x16
    4690:	8f 89       	ldd	r24, Y+23	; 0x17
    4692:	98 8d       	ldd	r25, Y+24	; 0x18
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	40 e8       	ldi	r20, 0x80	; 128
    469a:	5f e3       	ldi	r21, 0x3F	; 63
    469c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46a0:	88 23       	and	r24, r24
    46a2:	2c f4       	brge	.+10     	; 0x46ae <Open_door+0x9e4>
		__ticks = 1;
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	9c 8b       	std	Y+20, r25	; 0x14
    46aa:	8b 8b       	std	Y+19, r24	; 0x13
    46ac:	3f c0       	rjmp	.+126    	; 0x472c <Open_door+0xa62>
	else if (__tmp > 65535)
    46ae:	6d 89       	ldd	r22, Y+21	; 0x15
    46b0:	7e 89       	ldd	r23, Y+22	; 0x16
    46b2:	8f 89       	ldd	r24, Y+23	; 0x17
    46b4:	98 8d       	ldd	r25, Y+24	; 0x18
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	3f ef       	ldi	r19, 0xFF	; 255
    46ba:	4f e7       	ldi	r20, 0x7F	; 127
    46bc:	57 e4       	ldi	r21, 0x47	; 71
    46be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46c2:	18 16       	cp	r1, r24
    46c4:	4c f5       	brge	.+82     	; 0x4718 <Open_door+0xa4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c6:	69 8d       	ldd	r22, Y+25	; 0x19
    46c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	40 e2       	ldi	r20, 0x20	; 32
    46d4:	51 e4       	ldi	r21, 0x41	; 65
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	bc 01       	movw	r22, r24
    46e0:	cd 01       	movw	r24, r26
    46e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	9c 8b       	std	Y+20, r25	; 0x14
    46ec:	8b 8b       	std	Y+19, r24	; 0x13
    46ee:	0f c0       	rjmp	.+30     	; 0x470e <Open_door+0xa44>
    46f0:	88 ec       	ldi	r24, 0xC8	; 200
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	9a 8b       	std	Y+18, r25	; 0x12
    46f6:	89 8b       	std	Y+17, r24	; 0x11
    46f8:	89 89       	ldd	r24, Y+17	; 0x11
    46fa:	9a 89       	ldd	r25, Y+18	; 0x12
    46fc:	01 97       	sbiw	r24, 0x01	; 1
    46fe:	f1 f7       	brne	.-4      	; 0x46fc <Open_door+0xa32>
    4700:	9a 8b       	std	Y+18, r25	; 0x12
    4702:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4704:	8b 89       	ldd	r24, Y+19	; 0x13
    4706:	9c 89       	ldd	r25, Y+20	; 0x14
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	9c 8b       	std	Y+20, r25	; 0x14
    470c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    470e:	8b 89       	ldd	r24, Y+19	; 0x13
    4710:	9c 89       	ldd	r25, Y+20	; 0x14
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	69 f7       	brne	.-38     	; 0x46f0 <Open_door+0xa26>
    4716:	14 c0       	rjmp	.+40     	; 0x4740 <Open_door+0xa76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4718:	6d 89       	ldd	r22, Y+21	; 0x15
    471a:	7e 89       	ldd	r23, Y+22	; 0x16
    471c:	8f 89       	ldd	r24, Y+23	; 0x17
    471e:	98 8d       	ldd	r25, Y+24	; 0x18
    4720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	9c 8b       	std	Y+20, r25	; 0x14
    472a:	8b 8b       	std	Y+19, r24	; 0x13
    472c:	8b 89       	ldd	r24, Y+19	; 0x13
    472e:	9c 89       	ldd	r25, Y+20	; 0x14
    4730:	98 8b       	std	Y+16, r25	; 0x10
    4732:	8f 87       	std	Y+15, r24	; 0x0f
    4734:	8f 85       	ldd	r24, Y+15	; 0x0f
    4736:	98 89       	ldd	r25, Y+16	; 0x10
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	f1 f7       	brne	.-4      	; 0x4738 <Open_door+0xa6e>
    473c:	98 8b       	std	Y+16, r25	; 0x10
    473e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_displayString(". ");
    4740:	8e e9       	ldi	r24, 0x9E	; 158
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4748:	80 e0       	ldi	r24, 0x00	; 0
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	aa ef       	ldi	r26, 0xFA	; 250
    474e:	b3 e4       	ldi	r27, 0x43	; 67
    4750:	8b 87       	std	Y+11, r24	; 0x0b
    4752:	9c 87       	std	Y+12, r25	; 0x0c
    4754:	ad 87       	std	Y+13, r26	; 0x0d
    4756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4758:	6b 85       	ldd	r22, Y+11	; 0x0b
    475a:	7c 85       	ldd	r23, Y+12	; 0x0c
    475c:	8d 85       	ldd	r24, Y+13	; 0x0d
    475e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	4a ef       	ldi	r20, 0xFA	; 250
    4766:	54 e4       	ldi	r21, 0x44	; 68
    4768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476c:	dc 01       	movw	r26, r24
    476e:	cb 01       	movw	r24, r22
    4770:	8f 83       	std	Y+7, r24	; 0x07
    4772:	98 87       	std	Y+8, r25	; 0x08
    4774:	a9 87       	std	Y+9, r26	; 0x09
    4776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4778:	6f 81       	ldd	r22, Y+7	; 0x07
    477a:	78 85       	ldd	r23, Y+8	; 0x08
    477c:	89 85       	ldd	r24, Y+9	; 0x09
    477e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e8       	ldi	r20, 0x80	; 128
    4786:	5f e3       	ldi	r21, 0x3F	; 63
    4788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    478c:	88 23       	and	r24, r24
    478e:	2c f4       	brge	.+10     	; 0x479a <Open_door+0xad0>
		__ticks = 1;
    4790:	81 e0       	ldi	r24, 0x01	; 1
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	9e 83       	std	Y+6, r25	; 0x06
    4796:	8d 83       	std	Y+5, r24	; 0x05
    4798:	3f c0       	rjmp	.+126    	; 0x4818 <Open_door+0xb4e>
	else if (__tmp > 65535)
    479a:	6f 81       	ldd	r22, Y+7	; 0x07
    479c:	78 85       	ldd	r23, Y+8	; 0x08
    479e:	89 85       	ldd	r24, Y+9	; 0x09
    47a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	3f ef       	ldi	r19, 0xFF	; 255
    47a6:	4f e7       	ldi	r20, 0x7F	; 127
    47a8:	57 e4       	ldi	r21, 0x47	; 71
    47aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47ae:	18 16       	cp	r1, r24
    47b0:	4c f5       	brge	.+82     	; 0x4804 <Open_door+0xb3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	40 e2       	ldi	r20, 0x20	; 32
    47c0:	51 e4       	ldi	r21, 0x41	; 65
    47c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	bc 01       	movw	r22, r24
    47cc:	cd 01       	movw	r24, r26
    47ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	9e 83       	std	Y+6, r25	; 0x06
    47d8:	8d 83       	std	Y+5, r24	; 0x05
    47da:	0f c0       	rjmp	.+30     	; 0x47fa <Open_door+0xb30>
    47dc:	88 ec       	ldi	r24, 0xC8	; 200
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	9c 83       	std	Y+4, r25	; 0x04
    47e2:	8b 83       	std	Y+3, r24	; 0x03
    47e4:	8b 81       	ldd	r24, Y+3	; 0x03
    47e6:	9c 81       	ldd	r25, Y+4	; 0x04
    47e8:	01 97       	sbiw	r24, 0x01	; 1
    47ea:	f1 f7       	brne	.-4      	; 0x47e8 <Open_door+0xb1e>
    47ec:	9c 83       	std	Y+4, r25	; 0x04
    47ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47f0:	8d 81       	ldd	r24, Y+5	; 0x05
    47f2:	9e 81       	ldd	r25, Y+6	; 0x06
    47f4:	01 97       	sbiw	r24, 0x01	; 1
    47f6:	9e 83       	std	Y+6, r25	; 0x06
    47f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47fa:	8d 81       	ldd	r24, Y+5	; 0x05
    47fc:	9e 81       	ldd	r25, Y+6	; 0x06
    47fe:	00 97       	sbiw	r24, 0x00	; 0
    4800:	69 f7       	brne	.-38     	; 0x47dc <Open_door+0xb12>
    4802:	14 c0       	rjmp	.+40     	; 0x482c <Open_door+0xb62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4804:	6f 81       	ldd	r22, Y+7	; 0x07
    4806:	78 85       	ldd	r23, Y+8	; 0x08
    4808:	89 85       	ldd	r24, Y+9	; 0x09
    480a:	9a 85       	ldd	r25, Y+10	; 0x0a
    480c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	9e 83       	std	Y+6, r25	; 0x06
    4816:	8d 83       	std	Y+5, r24	; 0x05
    4818:	8d 81       	ldd	r24, Y+5	; 0x05
    481a:	9e 81       	ldd	r25, Y+6	; 0x06
    481c:	9a 83       	std	Y+2, r25	; 0x02
    481e:	89 83       	std	Y+1, r24	; 0x01
    4820:	89 81       	ldd	r24, Y+1	; 0x01
    4822:	9a 81       	ldd	r25, Y+2	; 0x02
    4824:	01 97       	sbiw	r24, 0x01	; 1
    4826:	f1 f7       	brne	.-4      	; 0x4824 <Open_door+0xb5a>
    4828:	9a 83       	std	Y+2, r25	; 0x02
    482a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			UART_send_byte(open);
    482c:	82 e0       	ldi	r24, 0x02	; 2
    482e:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
			delay_timer1(18);
    4832:	82 e1       	ldi	r24, 0x12	; 18
    4834:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <delay_timer1>
			while(count!=18){}
    4838:	80 91 10 01 	lds	r24, 0x0110
    483c:	82 31       	cpi	r24, 0x12	; 18
    483e:	e1 f7       	brne	.-8      	; 0x4838 <Open_door+0xb6e>
			delay_timer1(15);
    4840:	8f e0       	ldi	r24, 0x0F	; 15
    4842:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <delay_timer1>
			while(count!=15){}
    4846:	80 91 10 01 	lds	r24, 0x0110
    484a:	8f 30       	cpi	r24, 0x0F	; 15
    484c:	e1 f7       	brne	.-8      	; 0x4846 <Open_door+0xb7c>
    484e:	10 c0       	rjmp	.+32     	; 0x4870 <Open_door+0xba6>
			break;
		}
		else
		{
			false_pass_count++;
    4850:	de 01       	movw	r26, r28
    4852:	af 57       	subi	r26, 0x7F	; 127
    4854:	bf 4f       	sbci	r27, 0xFF	; 255
    4856:	fe 01       	movw	r30, r28
    4858:	ef 57       	subi	r30, 0x7F	; 127
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	80 81       	ld	r24, Z
    485e:	8f 5f       	subi	r24, 0xFF	; 255
    4860:	8c 93       	st	X, r24
	LCD_displayStringRowColumn(1, 0, "-  Change Pass");
	return KEYPAD_getPressedKey();
}
void Open_door(uint8 pass[]){
	uint8 false_pass_count=0;
	while(false_pass_count<3){
    4862:	fe 01       	movw	r30, r28
    4864:	ef 57       	subi	r30, 0x7F	; 127
    4866:	ff 4f       	sbci	r31, 0xFF	; 255
    4868:	80 81       	ld	r24, Z
    486a:	83 30       	cpi	r24, 0x03	; 3
    486c:	08 f4       	brcc	.+2      	; 0x4870 <Open_door+0xba6>
    486e:	44 ca       	rjmp	.-2936   	; 0x3cf8 <Open_door+0x2e>
		else
		{
			false_pass_count++;
		}
	}
	if(false_pass_count==3){
    4870:	fe 01       	movw	r30, r28
    4872:	ef 57       	subi	r30, 0x7F	; 127
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	80 81       	ld	r24, Z
    4878:	83 30       	cpi	r24, 0x03	; 3
    487a:	81 f4       	brne	.+32     	; 0x489c <Open_door+0xbd2>

		LCD_clearScreen();
    487c:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
		LCD_displayString("error :(");
    4880:	80 ee       	ldi	r24, 0xE0	; 224
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
		UART_send_byte(Buzzer_ON);
    4888:	83 e0       	ldi	r24, 0x03	; 3
    488a:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
		delay_timer1(60);
    488e:	8c e3       	ldi	r24, 0x3C	; 60
    4890:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <delay_timer1>
		while(count!=60){}
    4894:	80 91 10 01 	lds	r24, 0x0110
    4898:	8c 33       	cpi	r24, 0x3C	; 60
    489a:	e1 f7       	brne	.-8      	; 0x4894 <Open_door+0xbca>
	}


}
    489c:	cd 57       	subi	r28, 0x7D	; 125
    489e:	df 4f       	sbci	r29, 0xFF	; 255
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	1f 91       	pop	r17
    48b0:	0f 91       	pop	r16
    48b2:	08 95       	ret

000048b4 <Change_password>:
void Change_password(uint8 pass[]){
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	df 93       	push	r29
    48ba:	cf 93       	push	r28
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	ed 97       	sbiw	r28, 0x3d	; 61
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
    48cc:	9d af       	std	Y+61, r25	; 0x3d
    48ce:	8c af       	std	Y+60, r24	; 0x3c
	uint8 false_pass_count=0;
    48d0:	1b ae       	std	Y+59, r1	; 0x3b
    48d2:	28 c2       	rjmp	.+1104   	; 0x4d24 <Change_password+0x470>
	while(false_pass_count<3){
		LCD_clearScreen();
    48d4:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	a8 e4       	ldi	r26, 0x48	; 72
    48de:	b3 e4       	ldi	r27, 0x43	; 67
    48e0:	8d ab       	std	Y+53, r24	; 0x35
    48e2:	9e ab       	std	Y+54, r25	; 0x36
    48e4:	af ab       	std	Y+55, r26	; 0x37
    48e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e8:	6d a9       	ldd	r22, Y+53	; 0x35
    48ea:	7e a9       	ldd	r23, Y+54	; 0x36
    48ec:	8f a9       	ldd	r24, Y+55	; 0x37
    48ee:	98 ad       	ldd	r25, Y+56	; 0x38
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	4a ef       	ldi	r20, 0xFA	; 250
    48f6:	54 e4       	ldi	r21, 0x44	; 68
    48f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48fc:	dc 01       	movw	r26, r24
    48fe:	cb 01       	movw	r24, r22
    4900:	89 ab       	std	Y+49, r24	; 0x31
    4902:	9a ab       	std	Y+50, r25	; 0x32
    4904:	ab ab       	std	Y+51, r26	; 0x33
    4906:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4908:	69 a9       	ldd	r22, Y+49	; 0x31
    490a:	7a a9       	ldd	r23, Y+50	; 0x32
    490c:	8b a9       	ldd	r24, Y+51	; 0x33
    490e:	9c a9       	ldd	r25, Y+52	; 0x34
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e8       	ldi	r20, 0x80	; 128
    4916:	5f e3       	ldi	r21, 0x3F	; 63
    4918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    491c:	88 23       	and	r24, r24
    491e:	2c f4       	brge	.+10     	; 0x492a <Change_password+0x76>
		__ticks = 1;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	98 ab       	std	Y+48, r25	; 0x30
    4926:	8f a7       	std	Y+47, r24	; 0x2f
    4928:	3f c0       	rjmp	.+126    	; 0x49a8 <Change_password+0xf4>
	else if (__tmp > 65535)
    492a:	69 a9       	ldd	r22, Y+49	; 0x31
    492c:	7a a9       	ldd	r23, Y+50	; 0x32
    492e:	8b a9       	ldd	r24, Y+51	; 0x33
    4930:	9c a9       	ldd	r25, Y+52	; 0x34
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	3f ef       	ldi	r19, 0xFF	; 255
    4936:	4f e7       	ldi	r20, 0x7F	; 127
    4938:	57 e4       	ldi	r21, 0x47	; 71
    493a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    493e:	18 16       	cp	r1, r24
    4940:	4c f5       	brge	.+82     	; 0x4994 <Change_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4942:	6d a9       	ldd	r22, Y+53	; 0x35
    4944:	7e a9       	ldd	r23, Y+54	; 0x36
    4946:	8f a9       	ldd	r24, Y+55	; 0x37
    4948:	98 ad       	ldd	r25, Y+56	; 0x38
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	40 e2       	ldi	r20, 0x20	; 32
    4950:	51 e4       	ldi	r21, 0x41	; 65
    4952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	bc 01       	movw	r22, r24
    495c:	cd 01       	movw	r24, r26
    495e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	98 ab       	std	Y+48, r25	; 0x30
    4968:	8f a7       	std	Y+47, r24	; 0x2f
    496a:	0f c0       	rjmp	.+30     	; 0x498a <Change_password+0xd6>
    496c:	88 ec       	ldi	r24, 0xC8	; 200
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	9e a7       	std	Y+46, r25	; 0x2e
    4972:	8d a7       	std	Y+45, r24	; 0x2d
    4974:	8d a5       	ldd	r24, Y+45	; 0x2d
    4976:	9e a5       	ldd	r25, Y+46	; 0x2e
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	f1 f7       	brne	.-4      	; 0x4978 <Change_password+0xc4>
    497c:	9e a7       	std	Y+46, r25	; 0x2e
    497e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4980:	8f a5       	ldd	r24, Y+47	; 0x2f
    4982:	98 a9       	ldd	r25, Y+48	; 0x30
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	98 ab       	std	Y+48, r25	; 0x30
    4988:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498a:	8f a5       	ldd	r24, Y+47	; 0x2f
    498c:	98 a9       	ldd	r25, Y+48	; 0x30
    498e:	00 97       	sbiw	r24, 0x00	; 0
    4990:	69 f7       	brne	.-38     	; 0x496c <Change_password+0xb8>
    4992:	14 c0       	rjmp	.+40     	; 0x49bc <Change_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4994:	69 a9       	ldd	r22, Y+49	; 0x31
    4996:	7a a9       	ldd	r23, Y+50	; 0x32
    4998:	8b a9       	ldd	r24, Y+51	; 0x33
    499a:	9c a9       	ldd	r25, Y+52	; 0x34
    499c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a0:	dc 01       	movw	r26, r24
    49a2:	cb 01       	movw	r24, r22
    49a4:	98 ab       	std	Y+48, r25	; 0x30
    49a6:	8f a7       	std	Y+47, r24	; 0x2f
    49a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    49aa:	98 a9       	ldd	r25, Y+48	; 0x30
    49ac:	9c a7       	std	Y+44, r25	; 0x2c
    49ae:	8b a7       	std	Y+43, r24	; 0x2b
    49b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    49b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    49b4:	01 97       	sbiw	r24, 0x01	; 1
    49b6:	f1 f7       	brne	.-4      	; 0x49b4 <Change_password+0x100>
    49b8:	9c a7       	std	Y+44, r25	; 0x2c
    49ba:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
    49bc:	8d eb       	ldi	r24, 0xBD	; 189
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
		LCD_moveCursor(1, 0);
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	60 e0       	ldi	r22, 0x00	; 0
    49c8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_moveCursor>
		for(uint8 i =0 ; i<5 ;i++){
    49cc:	19 ae       	std	Y+57, r1	; 0x39
    49ce:	8f c0       	rjmp	.+286    	; 0x4aee <Change_password+0x23a>
			do {
				pass[i]=KEYPAD_getPressedKey();
    49d0:	89 ad       	ldd	r24, Y+57	; 0x39
    49d2:	28 2f       	mov	r18, r24
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	8c ad       	ldd	r24, Y+60	; 0x3c
    49d8:	9d ad       	ldd	r25, Y+61	; 0x3d
    49da:	8c 01       	movw	r16, r24
    49dc:	02 0f       	add	r16, r18
    49de:	13 1f       	adc	r17, r19
    49e0:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    49e4:	f8 01       	movw	r30, r16
    49e6:	80 83       	st	Z, r24
			}while(pass[i]>9);
    49e8:	89 ad       	ldd	r24, Y+57	; 0x39
    49ea:	28 2f       	mov	r18, r24
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	8c ad       	ldd	r24, Y+60	; 0x3c
    49f0:	9d ad       	ldd	r25, Y+61	; 0x3d
    49f2:	fc 01       	movw	r30, r24
    49f4:	e2 0f       	add	r30, r18
    49f6:	f3 1f       	adc	r31, r19
    49f8:	80 81       	ld	r24, Z
    49fa:	8a 30       	cpi	r24, 0x0A	; 10
    49fc:	48 f7       	brcc	.-46     	; 0x49d0 <Change_password+0x11c>
			LCD_displayCharacter('*');
    49fe:	8a e2       	ldi	r24, 0x2A	; 42
    4a00:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	a6 e9       	ldi	r26, 0x96	; 150
    4a0a:	b3 e4       	ldi	r27, 0x43	; 67
    4a0c:	8f a3       	std	Y+39, r24	; 0x27
    4a0e:	98 a7       	std	Y+40, r25	; 0x28
    4a10:	a9 a7       	std	Y+41, r26	; 0x29
    4a12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a14:	6f a1       	ldd	r22, Y+39	; 0x27
    4a16:	78 a5       	ldd	r23, Y+40	; 0x28
    4a18:	89 a5       	ldd	r24, Y+41	; 0x29
    4a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	4a ef       	ldi	r20, 0xFA	; 250
    4a22:	54 e4       	ldi	r21, 0x44	; 68
    4a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	8b a3       	std	Y+35, r24	; 0x23
    4a2e:	9c a3       	std	Y+36, r25	; 0x24
    4a30:	ad a3       	std	Y+37, r26	; 0x25
    4a32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a34:	6b a1       	ldd	r22, Y+35	; 0x23
    4a36:	7c a1       	ldd	r23, Y+36	; 0x24
    4a38:	8d a1       	ldd	r24, Y+37	; 0x25
    4a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e8       	ldi	r20, 0x80	; 128
    4a42:	5f e3       	ldi	r21, 0x3F	; 63
    4a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a48:	88 23       	and	r24, r24
    4a4a:	2c f4       	brge	.+10     	; 0x4a56 <Change_password+0x1a2>
		__ticks = 1;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	9a a3       	std	Y+34, r25	; 0x22
    4a52:	89 a3       	std	Y+33, r24	; 0x21
    4a54:	3f c0       	rjmp	.+126    	; 0x4ad4 <Change_password+0x220>
	else if (__tmp > 65535)
    4a56:	6b a1       	ldd	r22, Y+35	; 0x23
    4a58:	7c a1       	ldd	r23, Y+36	; 0x24
    4a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    4a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	3f ef       	ldi	r19, 0xFF	; 255
    4a62:	4f e7       	ldi	r20, 0x7F	; 127
    4a64:	57 e4       	ldi	r21, 0x47	; 71
    4a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a6a:	18 16       	cp	r1, r24
    4a6c:	4c f5       	brge	.+82     	; 0x4ac0 <Change_password+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a70:	78 a5       	ldd	r23, Y+40	; 0x28
    4a72:	89 a5       	ldd	r24, Y+41	; 0x29
    4a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	bc 01       	movw	r22, r24
    4a88:	cd 01       	movw	r24, r26
    4a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	9a a3       	std	Y+34, r25	; 0x22
    4a94:	89 a3       	std	Y+33, r24	; 0x21
    4a96:	0f c0       	rjmp	.+30     	; 0x4ab6 <Change_password+0x202>
    4a98:	88 ec       	ldi	r24, 0xC8	; 200
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	98 a3       	std	Y+32, r25	; 0x20
    4a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    4aa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4aa2:	98 a1       	ldd	r25, Y+32	; 0x20
    4aa4:	01 97       	sbiw	r24, 0x01	; 1
    4aa6:	f1 f7       	brne	.-4      	; 0x4aa4 <Change_password+0x1f0>
    4aa8:	98 a3       	std	Y+32, r25	; 0x20
    4aaa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aac:	89 a1       	ldd	r24, Y+33	; 0x21
    4aae:	9a a1       	ldd	r25, Y+34	; 0x22
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	9a a3       	std	Y+34, r25	; 0x22
    4ab4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	69 f7       	brne	.-38     	; 0x4a98 <Change_password+0x1e4>
    4abe:	14 c0       	rjmp	.+40     	; 0x4ae8 <Change_password+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9a a3       	std	Y+34, r25	; 0x22
    4ad2:	89 a3       	std	Y+33, r24	; 0x21
    4ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    4ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    4ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    4ada:	8d 8f       	std	Y+29, r24	; 0x1d
    4adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <Change_password+0x22c>
    4ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ae6:	8d 8f       	std	Y+29, r24	; 0x1d
	while(false_pass_count<3){
		LCD_clearScreen();
		_delay_ms(200);
		LCD_displayString("plz enter Pass: ");
		LCD_moveCursor(1, 0);
		for(uint8 i =0 ; i<5 ;i++){
    4ae8:	89 ad       	ldd	r24, Y+57	; 0x39
    4aea:	8f 5f       	subi	r24, 0xFF	; 255
    4aec:	89 af       	std	Y+57, r24	; 0x39
    4aee:	89 ad       	ldd	r24, Y+57	; 0x39
    4af0:	85 30       	cpi	r24, 0x05	; 5
    4af2:	08 f4       	brcc	.+2      	; 0x4af6 <Change_password+0x242>
    4af4:	6d cf       	rjmp	.-294    	; 0x49d0 <Change_password+0x11c>
			}while(pass[i]>9);
			LCD_displayCharacter('*');
			_delay_ms(300);

		}
		while(KEYPAD_getPressedKey()!=13);
    4af6:	0e 94 bf 0a 	call	0x157e	; 0x157e <KEYPAD_getPressedKey>
    4afa:	8d 30       	cpi	r24, 0x0D	; 13
    4afc:	e1 f7       	brne	.-8      	; 0x4af6 <Change_password+0x242>
		errors status = verify_password(pass);
    4afe:	8c ad       	ldd	r24, Y+60	; 0x3c
    4b00:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b02:	0e 94 9e 19 	call	0x333c	; 0x333c <verify_password>
    4b06:	8a af       	std	Y+58, r24	; 0x3a
		if (status == right_password )
    4b08:	8a ad       	ldd	r24, Y+58	; 0x3a
    4b0a:	83 30       	cpi	r24, 0x03	; 3
    4b0c:	09 f0       	breq	.+2      	; 0x4b10 <Change_password+0x25c>
    4b0e:	07 c1       	rjmp	.+526    	; 0x4d1e <Change_password+0x46a>
		{
			do{
				LCD_clearScreen();
    4b10:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	a8 e4       	ldi	r26, 0x48	; 72
    4b1a:	b3 e4       	ldi	r27, 0x43	; 67
    4b1c:	89 8f       	std	Y+25, r24	; 0x19
    4b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b20:	ab 8f       	std	Y+27, r26	; 0x1b
    4b22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b24:	69 8d       	ldd	r22, Y+25	; 0x19
    4b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	4a ef       	ldi	r20, 0xFA	; 250
    4b32:	54 e4       	ldi	r21, 0x44	; 68
    4b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	8d 8b       	std	Y+21, r24	; 0x15
    4b3e:	9e 8b       	std	Y+22, r25	; 0x16
    4b40:	af 8b       	std	Y+23, r26	; 0x17
    4b42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b44:	6d 89       	ldd	r22, Y+21	; 0x15
    4b46:	7e 89       	ldd	r23, Y+22	; 0x16
    4b48:	8f 89       	ldd	r24, Y+23	; 0x17
    4b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e8       	ldi	r20, 0x80	; 128
    4b52:	5f e3       	ldi	r21, 0x3F	; 63
    4b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b58:	88 23       	and	r24, r24
    4b5a:	2c f4       	brge	.+10     	; 0x4b66 <Change_password+0x2b2>
		__ticks = 1;
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	9c 8b       	std	Y+20, r25	; 0x14
    4b62:	8b 8b       	std	Y+19, r24	; 0x13
    4b64:	3f c0       	rjmp	.+126    	; 0x4be4 <Change_password+0x330>
	else if (__tmp > 65535)
    4b66:	6d 89       	ldd	r22, Y+21	; 0x15
    4b68:	7e 89       	ldd	r23, Y+22	; 0x16
    4b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	3f ef       	ldi	r19, 0xFF	; 255
    4b72:	4f e7       	ldi	r20, 0x7F	; 127
    4b74:	57 e4       	ldi	r21, 0x47	; 71
    4b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b7a:	18 16       	cp	r1, r24
    4b7c:	4c f5       	brge	.+82     	; 0x4bd0 <Change_password+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    4b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e2       	ldi	r20, 0x20	; 32
    4b8c:	51 e4       	ldi	r21, 0x41	; 65
    4b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	bc 01       	movw	r22, r24
    4b98:	cd 01       	movw	r24, r26
    4b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	9c 8b       	std	Y+20, r25	; 0x14
    4ba4:	8b 8b       	std	Y+19, r24	; 0x13
    4ba6:	0f c0       	rjmp	.+30     	; 0x4bc6 <Change_password+0x312>
    4ba8:	88 ec       	ldi	r24, 0xC8	; 200
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	9a 8b       	std	Y+18, r25	; 0x12
    4bae:	89 8b       	std	Y+17, r24	; 0x11
    4bb0:	89 89       	ldd	r24, Y+17	; 0x11
    4bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    4bb4:	01 97       	sbiw	r24, 0x01	; 1
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <Change_password+0x300>
    4bb8:	9a 8b       	std	Y+18, r25	; 0x12
    4bba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	9c 8b       	std	Y+20, r25	; 0x14
    4bc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bca:	00 97       	sbiw	r24, 0x00	; 0
    4bcc:	69 f7       	brne	.-38     	; 0x4ba8 <Change_password+0x2f4>
    4bce:	14 c0       	rjmp	.+40     	; 0x4bf8 <Change_password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	9c 8b       	std	Y+20, r25	; 0x14
    4be2:	8b 8b       	std	Y+19, r24	; 0x13
    4be4:	8b 89       	ldd	r24, Y+19	; 0x13
    4be6:	9c 89       	ldd	r25, Y+20	; 0x14
    4be8:	98 8b       	std	Y+16, r25	; 0x10
    4bea:	8f 87       	std	Y+15, r24	; 0x0f
    4bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bee:	98 89       	ldd	r25, Y+16	; 0x10
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <Change_password+0x33c>
    4bf4:	98 8b       	std	Y+16, r25	; 0x10
    4bf6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				Create_system_password(pass, repass);
    4bf8:	8c ad       	ldd	r24, Y+60	; 0x3c
    4bfa:	9d ad       	ldd	r25, Y+61	; 0x3d
    4bfc:	26 e1       	ldi	r18, 0x16	; 22
    4bfe:	31 e0       	ldi	r19, 0x01	; 1
    4c00:	b9 01       	movw	r22, r18
    4c02:	0e 94 12 17 	call	0x2e24	; 0x2e24 <Create_system_password>
				UART_send_byte(save_new_pass);
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
				status = Check_created_password(pass, repass);
    4c0c:	8c ad       	ldd	r24, Y+60	; 0x3c
    4c0e:	9d ad       	ldd	r25, Y+61	; 0x3d
    4c10:	26 e1       	ldi	r18, 0x16	; 22
    4c12:	31 e0       	ldi	r19, 0x01	; 1
    4c14:	b9 01       	movw	r22, r18
    4c16:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Check_created_password>
    4c1a:	8a af       	std	Y+58, r24	; 0x3a
				if (status == failed_to_save){
    4c1c:	8a ad       	ldd	r24, Y+58	; 0x3a
    4c1e:	88 23       	and	r24, r24
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <Change_password+0x370>
    4c22:	78 c0       	rjmp	.+240    	; 0x4d14 <Change_password+0x460>
					LCD_displayString("pass not match");
    4c24:	89 ee       	ldi	r24, 0xE9	; 233
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	90 e8       	ldi	r25, 0x80	; 128
    4c30:	ab eb       	ldi	r26, 0xBB	; 187
    4c32:	b4 e4       	ldi	r27, 0x44	; 68
    4c34:	8b 87       	std	Y+11, r24	; 0x0b
    4c36:	9c 87       	std	Y+12, r25	; 0x0c
    4c38:	ad 87       	std	Y+13, r26	; 0x0d
    4c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	4a ef       	ldi	r20, 0xFA	; 250
    4c4a:	54 e4       	ldi	r21, 0x44	; 68
    4c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	8f 83       	std	Y+7, r24	; 0x07
    4c56:	98 87       	std	Y+8, r25	; 0x08
    4c58:	a9 87       	std	Y+9, r26	; 0x09
    4c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c5e:	78 85       	ldd	r23, Y+8	; 0x08
    4c60:	89 85       	ldd	r24, Y+9	; 0x09
    4c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	40 e8       	ldi	r20, 0x80	; 128
    4c6a:	5f e3       	ldi	r21, 0x3F	; 63
    4c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c70:	88 23       	and	r24, r24
    4c72:	2c f4       	brge	.+10     	; 0x4c7e <Change_password+0x3ca>
		__ticks = 1;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9e 83       	std	Y+6, r25	; 0x06
    4c7a:	8d 83       	std	Y+5, r24	; 0x05
    4c7c:	3f c0       	rjmp	.+126    	; 0x4cfc <Change_password+0x448>
	else if (__tmp > 65535)
    4c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c80:	78 85       	ldd	r23, Y+8	; 0x08
    4c82:	89 85       	ldd	r24, Y+9	; 0x09
    4c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	3f ef       	ldi	r19, 0xFF	; 255
    4c8a:	4f e7       	ldi	r20, 0x7F	; 127
    4c8c:	57 e4       	ldi	r21, 0x47	; 71
    4c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c92:	18 16       	cp	r1, r24
    4c94:	4c f5       	brge	.+82     	; 0x4ce8 <Change_password+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	40 e2       	ldi	r20, 0x20	; 32
    4ca4:	51 e4       	ldi	r21, 0x41	; 65
    4ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	bc 01       	movw	r22, r24
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	9e 83       	std	Y+6, r25	; 0x06
    4cbc:	8d 83       	std	Y+5, r24	; 0x05
    4cbe:	0f c0       	rjmp	.+30     	; 0x4cde <Change_password+0x42a>
    4cc0:	88 ec       	ldi	r24, 0xC8	; 200
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	9c 83       	std	Y+4, r25	; 0x04
    4cc6:	8b 83       	std	Y+3, r24	; 0x03
    4cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <Change_password+0x418>
    4cd0:	9c 83       	std	Y+4, r25	; 0x04
    4cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	9e 83       	std	Y+6, r25	; 0x06
    4cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cde:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce2:	00 97       	sbiw	r24, 0x00	; 0
    4ce4:	69 f7       	brne	.-38     	; 0x4cc0 <Change_password+0x40c>
    4ce6:	14 c0       	rjmp	.+40     	; 0x4d10 <Change_password+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cea:	78 85       	ldd	r23, Y+8	; 0x08
    4cec:	89 85       	ldd	r24, Y+9	; 0x09
    4cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	9e 83       	std	Y+6, r25	; 0x06
    4cfa:	8d 83       	std	Y+5, r24	; 0x05
    4cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4d00:	9a 83       	std	Y+2, r25	; 0x02
    4d02:	89 83       	std	Y+1, r24	; 0x01
    4d04:	89 81       	ldd	r24, Y+1	; 0x01
    4d06:	9a 81       	ldd	r25, Y+2	; 0x02
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	f1 f7       	brne	.-4      	; 0x4d08 <Change_password+0x454>
    4d0c:	9a 83       	std	Y+2, r25	; 0x02
    4d0e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1500);
					LCD_clearScreen();
    4d10:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
				}
			}while(status== failed_to_save);
    4d14:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d16:	88 23       	and	r24, r24
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <Change_password+0x468>
    4d1a:	fa ce       	rjmp	.-524    	; 0x4b10 <Change_password+0x25c>
    4d1c:	07 c0       	rjmp	.+14     	; 0x4d2c <Change_password+0x478>
			break;
		}
		else
		{
			false_pass_count++;
    4d1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d20:	8f 5f       	subi	r24, 0xFF	; 255
    4d22:	8b af       	std	Y+59, r24	; 0x3b


}
void Change_password(uint8 pass[]){
	uint8 false_pass_count=0;
	while(false_pass_count<3){
    4d24:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d26:	83 30       	cpi	r24, 0x03	; 3
    4d28:	08 f4       	brcc	.+2      	; 0x4d2c <Change_password+0x478>
    4d2a:	d4 cd       	rjmp	.-1112   	; 0x48d4 <Change_password+0x20>
		else
		{
			false_pass_count++;
		}
	}
	if(false_pass_count==3){
    4d2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d2e:	83 30       	cpi	r24, 0x03	; 3
    4d30:	81 f4       	brne	.+32     	; 0x4d52 <Change_password+0x49e>
		LCD_clearScreen();
    4d32:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
		LCD_displayString("error :(");
    4d36:	80 ee       	ldi	r24, 0xE0	; 224
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
		UART_send_byte(Buzzer_ON);
    4d3e:	83 e0       	ldi	r24, 0x03	; 3
    4d40:	0e 94 4a 09 	call	0x1294	; 0x1294 <UART_send_byte>
		delay_timer1(60);
    4d44:	8c e3       	ldi	r24, 0x3C	; 60
    4d46:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <delay_timer1>
		while(count!=60){}
    4d4a:	80 91 10 01 	lds	r24, 0x0110
    4d4e:	8c 33       	cpi	r24, 0x3C	; 60
    4d50:	e1 f7       	brne	.-8      	; 0x4d4a <Change_password+0x496>
	}
}
    4d52:	ed 96       	adiw	r28, 0x3d	; 61
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	f8 94       	cli
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	cd bf       	out	0x3d, r28	; 61
    4d5e:	cf 91       	pop	r28
    4d60:	df 91       	pop	r29
    4d62:	1f 91       	pop	r17
    4d64:	0f 91       	pop	r16
    4d66:	08 95       	ret

00004d68 <main>:


int main(){
    4d68:	df 93       	push	r29
    4d6a:	cf 93       	push	r28
    4d6c:	cd b7       	in	r28, 0x3d	; 61
    4d6e:	de b7       	in	r29, 0x3e	; 62
    4d70:	6e 97       	sbiw	r28, 0x1e	; 30
    4d72:	0f b6       	in	r0, 0x3f	; 63
    4d74:	f8 94       	cli
    4d76:	de bf       	out	0x3e, r29	; 62
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	cd bf       	out	0x3d, r28	; 61

	SREG|=(1<<7);
    4d7c:	af e5       	ldi	r26, 0x5F	; 95
    4d7e:	b0 e0       	ldi	r27, 0x00	; 0
    4d80:	ef e5       	ldi	r30, 0x5F	; 95
    4d82:	f0 e0       	ldi	r31, 0x00	; 0
    4d84:	80 81       	ld	r24, Z
    4d86:	80 68       	ori	r24, 0x80	; 128
    4d88:	8c 93       	st	X, r24
	LCD_init();
    4d8a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LCD_init>
	UART_config config={eight,disabled,one_bit,9600};
    4d8e:	9e 01       	movw	r18, r28
    4d90:	2f 5e       	subi	r18, 0xEF	; 239
    4d92:	3f 4f       	sbci	r19, 0xFF	; 255
    4d94:	3b 8f       	std	Y+27, r19	; 0x1b
    4d96:	2a 8f       	std	Y+26, r18	; 0x1a
    4d98:	86 e0       	ldi	r24, 0x06	; 6
    4d9a:	91 e0       	ldi	r25, 0x01	; 1
    4d9c:	9d 8f       	std	Y+29, r25	; 0x1d
    4d9e:	8c 8f       	std	Y+28, r24	; 0x1c
    4da0:	97 e0       	ldi	r25, 0x07	; 7
    4da2:	9e 8f       	std	Y+30, r25	; 0x1e
    4da4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    4da6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    4da8:	00 80       	ld	r0, Z
    4daa:	2c 8d       	ldd	r18, Y+28	; 0x1c
    4dac:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4dae:	2f 5f       	subi	r18, 0xFF	; 255
    4db0:	3f 4f       	sbci	r19, 0xFF	; 255
    4db2:	3d 8f       	std	Y+29, r19	; 0x1d
    4db4:	2c 8f       	std	Y+28, r18	; 0x1c
    4db6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    4db8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    4dba:	00 82       	st	Z, r0
    4dbc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4dbe:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4dc0:	2f 5f       	subi	r18, 0xFF	; 255
    4dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc4:	3b 8f       	std	Y+27, r19	; 0x1b
    4dc6:	2a 8f       	std	Y+26, r18	; 0x1a
    4dc8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4dca:	31 50       	subi	r19, 0x01	; 1
    4dcc:	3e 8f       	std	Y+30, r19	; 0x1e
    4dce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4dd0:	88 23       	and	r24, r24
    4dd2:	41 f7       	brne	.-48     	; 0x4da4 <main+0x3c>
	UART_init(&config);
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	41 96       	adiw	r24, 0x11	; 17
    4dd8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_init>
	errors status;
	do{
		Create_system_password(pass, repass);
    4ddc:	81 e1       	ldi	r24, 0x11	; 17
    4dde:	91 e0       	ldi	r25, 0x01	; 1
    4de0:	26 e1       	ldi	r18, 0x16	; 22
    4de2:	31 e0       	ldi	r19, 0x01	; 1
    4de4:	b9 01       	movw	r22, r18
    4de6:	0e 94 12 17 	call	0x2e24	; 0x2e24 <Create_system_password>
		status = Check_created_password(pass, repass);
    4dea:	81 e1       	ldi	r24, 0x11	; 17
    4dec:	91 e0       	ldi	r25, 0x01	; 1
    4dee:	26 e1       	ldi	r18, 0x16	; 22
    4df0:	31 e0       	ldi	r19, 0x01	; 1
    4df2:	b9 01       	movw	r22, r18
    4df4:	0e 94 5d 19 	call	0x32ba	; 0x32ba <Check_created_password>
    4df8:	88 8b       	std	Y+16, r24	; 0x10
		if (status == failed_to_save){
    4dfa:	88 89       	ldd	r24, Y+16	; 0x10
    4dfc:	88 23       	and	r24, r24
    4dfe:	09 f0       	breq	.+2      	; 0x4e02 <main+0x9a>
    4e00:	78 c0       	rjmp	.+240    	; 0x4ef2 <main+0x18a>
			LCD_displayString("pass not match");
    4e02:	89 ee       	ldi	r24, 0xE9	; 233
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	90 e8       	ldi	r25, 0x80	; 128
    4e0e:	ab eb       	ldi	r26, 0xBB	; 187
    4e10:	b4 e4       	ldi	r27, 0x44	; 68
    4e12:	8b 87       	std	Y+11, r24	; 0x0b
    4e14:	9c 87       	std	Y+12, r25	; 0x0c
    4e16:	ad 87       	std	Y+13, r26	; 0x0d
    4e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	4a ef       	ldi	r20, 0xFA	; 250
    4e28:	54 e4       	ldi	r21, 0x44	; 68
    4e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2e:	dc 01       	movw	r26, r24
    4e30:	cb 01       	movw	r24, r22
    4e32:	8f 83       	std	Y+7, r24	; 0x07
    4e34:	98 87       	std	Y+8, r25	; 0x08
    4e36:	a9 87       	std	Y+9, r26	; 0x09
    4e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e3c:	78 85       	ldd	r23, Y+8	; 0x08
    4e3e:	89 85       	ldd	r24, Y+9	; 0x09
    4e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e8       	ldi	r20, 0x80	; 128
    4e48:	5f e3       	ldi	r21, 0x3F	; 63
    4e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e4e:	88 23       	and	r24, r24
    4e50:	2c f4       	brge	.+10     	; 0x4e5c <main+0xf4>
		__ticks = 1;
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	9e 83       	std	Y+6, r25	; 0x06
    4e58:	8d 83       	std	Y+5, r24	; 0x05
    4e5a:	3f c0       	rjmp	.+126    	; 0x4eda <main+0x172>
	else if (__tmp > 65535)
    4e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e5e:	78 85       	ldd	r23, Y+8	; 0x08
    4e60:	89 85       	ldd	r24, Y+9	; 0x09
    4e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	3f ef       	ldi	r19, 0xFF	; 255
    4e68:	4f e7       	ldi	r20, 0x7F	; 127
    4e6a:	57 e4       	ldi	r21, 0x47	; 71
    4e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e70:	18 16       	cp	r1, r24
    4e72:	4c f5       	brge	.+82     	; 0x4ec6 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	40 e2       	ldi	r20, 0x20	; 32
    4e82:	51 e4       	ldi	r21, 0x41	; 65
    4e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e88:	dc 01       	movw	r26, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	bc 01       	movw	r22, r24
    4e8e:	cd 01       	movw	r24, r26
    4e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e94:	dc 01       	movw	r26, r24
    4e96:	cb 01       	movw	r24, r22
    4e98:	9e 83       	std	Y+6, r25	; 0x06
    4e9a:	8d 83       	std	Y+5, r24	; 0x05
    4e9c:	0f c0       	rjmp	.+30     	; 0x4ebc <main+0x154>
    4e9e:	88 ec       	ldi	r24, 0xC8	; 200
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	9c 83       	std	Y+4, r25	; 0x04
    4ea4:	8b 83       	std	Y+3, r24	; 0x03
    4ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	f1 f7       	brne	.-4      	; 0x4eaa <main+0x142>
    4eae:	9c 83       	std	Y+4, r25	; 0x04
    4eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb6:	01 97       	sbiw	r24, 0x01	; 1
    4eb8:	9e 83       	std	Y+6, r25	; 0x06
    4eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec0:	00 97       	sbiw	r24, 0x00	; 0
    4ec2:	69 f7       	brne	.-38     	; 0x4e9e <main+0x136>
    4ec4:	14 c0       	rjmp	.+40     	; 0x4eee <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec8:	78 85       	ldd	r23, Y+8	; 0x08
    4eca:	89 85       	ldd	r24, Y+9	; 0x09
    4ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	9e 83       	std	Y+6, r25	; 0x06
    4ed8:	8d 83       	std	Y+5, r24	; 0x05
    4eda:	8d 81       	ldd	r24, Y+5	; 0x05
    4edc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ede:	9a 83       	std	Y+2, r25	; 0x02
    4ee0:	89 83       	std	Y+1, r24	; 0x01
    4ee2:	89 81       	ldd	r24, Y+1	; 0x01
    4ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee6:	01 97       	sbiw	r24, 0x01	; 1
    4ee8:	f1 f7       	brne	.-4      	; 0x4ee6 <main+0x17e>
    4eea:	9a 83       	std	Y+2, r25	; 0x02
    4eec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			LCD_clearScreen();
    4eee:	0e 94 08 17 	call	0x2e10	; 0x2e10 <LCD_clearScreen>
		}
	}while(status== failed_to_save);
    4ef2:	88 89       	ldd	r24, Y+16	; 0x10
    4ef4:	88 23       	and	r24, r24
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <main+0x192>
    4ef8:	71 cf       	rjmp	.-286    	; 0x4ddc <main+0x74>


	while(1){

		uint8 choice;
		choice = Main_options();
    4efa:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <Main_options>
    4efe:	8f 87       	std	Y+15, r24	; 0x0f
		switch (choice){
    4f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f02:	e8 2f       	mov	r30, r24
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	f9 8f       	std	Y+25, r31	; 0x19
    4f08:	e8 8f       	std	Y+24, r30	; 0x18
    4f0a:	28 8d       	ldd	r18, Y+24	; 0x18
    4f0c:	39 8d       	ldd	r19, Y+25	; 0x19
    4f0e:	2b 32       	cpi	r18, 0x2B	; 43
    4f10:	31 05       	cpc	r19, r1
    4f12:	31 f0       	breq	.+12     	; 0x4f20 <main+0x1b8>
    4f14:	88 8d       	ldd	r24, Y+24	; 0x18
    4f16:	99 8d       	ldd	r25, Y+25	; 0x19
    4f18:	8d 32       	cpi	r24, 0x2D	; 45
    4f1a:	91 05       	cpc	r25, r1
    4f1c:	31 f0       	breq	.+12     	; 0x4f2a <main+0x1c2>
    4f1e:	ed cf       	rjmp	.-38     	; 0x4efa <main+0x192>
		case '+':
			Open_door(pass);
    4f20:	81 e1       	ldi	r24, 0x11	; 17
    4f22:	91 e0       	ldi	r25, 0x01	; 1
    4f24:	0e 94 65 1e 	call	0x3cca	; 0x3cca <Open_door>
    4f28:	e8 cf       	rjmp	.-48     	; 0x4efa <main+0x192>
			break;

		case '-':
			Change_password(pass);
    4f2a:	81 e1       	ldi	r24, 0x11	; 17
    4f2c:	91 e0       	ldi	r25, 0x01	; 1
    4f2e:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <Change_password>
    4f32:	e3 cf       	rjmp	.-58     	; 0x4efa <main+0x192>

00004f34 <__udivmodsi4>:
    4f34:	a1 e2       	ldi	r26, 0x21	; 33
    4f36:	1a 2e       	mov	r1, r26
    4f38:	aa 1b       	sub	r26, r26
    4f3a:	bb 1b       	sub	r27, r27
    4f3c:	fd 01       	movw	r30, r26
    4f3e:	0d c0       	rjmp	.+26     	; 0x4f5a <__udivmodsi4_ep>

00004f40 <__udivmodsi4_loop>:
    4f40:	aa 1f       	adc	r26, r26
    4f42:	bb 1f       	adc	r27, r27
    4f44:	ee 1f       	adc	r30, r30
    4f46:	ff 1f       	adc	r31, r31
    4f48:	a2 17       	cp	r26, r18
    4f4a:	b3 07       	cpc	r27, r19
    4f4c:	e4 07       	cpc	r30, r20
    4f4e:	f5 07       	cpc	r31, r21
    4f50:	20 f0       	brcs	.+8      	; 0x4f5a <__udivmodsi4_ep>
    4f52:	a2 1b       	sub	r26, r18
    4f54:	b3 0b       	sbc	r27, r19
    4f56:	e4 0b       	sbc	r30, r20
    4f58:	f5 0b       	sbc	r31, r21

00004f5a <__udivmodsi4_ep>:
    4f5a:	66 1f       	adc	r22, r22
    4f5c:	77 1f       	adc	r23, r23
    4f5e:	88 1f       	adc	r24, r24
    4f60:	99 1f       	adc	r25, r25
    4f62:	1a 94       	dec	r1
    4f64:	69 f7       	brne	.-38     	; 0x4f40 <__udivmodsi4_loop>
    4f66:	60 95       	com	r22
    4f68:	70 95       	com	r23
    4f6a:	80 95       	com	r24
    4f6c:	90 95       	com	r25
    4f6e:	9b 01       	movw	r18, r22
    4f70:	ac 01       	movw	r20, r24
    4f72:	bd 01       	movw	r22, r26
    4f74:	cf 01       	movw	r24, r30
    4f76:	08 95       	ret

00004f78 <__prologue_saves__>:
    4f78:	2f 92       	push	r2
    4f7a:	3f 92       	push	r3
    4f7c:	4f 92       	push	r4
    4f7e:	5f 92       	push	r5
    4f80:	6f 92       	push	r6
    4f82:	7f 92       	push	r7
    4f84:	8f 92       	push	r8
    4f86:	9f 92       	push	r9
    4f88:	af 92       	push	r10
    4f8a:	bf 92       	push	r11
    4f8c:	cf 92       	push	r12
    4f8e:	df 92       	push	r13
    4f90:	ef 92       	push	r14
    4f92:	ff 92       	push	r15
    4f94:	0f 93       	push	r16
    4f96:	1f 93       	push	r17
    4f98:	cf 93       	push	r28
    4f9a:	df 93       	push	r29
    4f9c:	cd b7       	in	r28, 0x3d	; 61
    4f9e:	de b7       	in	r29, 0x3e	; 62
    4fa0:	ca 1b       	sub	r28, r26
    4fa2:	db 0b       	sbc	r29, r27
    4fa4:	0f b6       	in	r0, 0x3f	; 63
    4fa6:	f8 94       	cli
    4fa8:	de bf       	out	0x3e, r29	; 62
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	cd bf       	out	0x3d, r28	; 61
    4fae:	09 94       	ijmp

00004fb0 <__epilogue_restores__>:
    4fb0:	2a 88       	ldd	r2, Y+18	; 0x12
    4fb2:	39 88       	ldd	r3, Y+17	; 0x11
    4fb4:	48 88       	ldd	r4, Y+16	; 0x10
    4fb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fba:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fc2:	b9 84       	ldd	r11, Y+9	; 0x09
    4fc4:	c8 84       	ldd	r12, Y+8	; 0x08
    4fc6:	df 80       	ldd	r13, Y+7	; 0x07
    4fc8:	ee 80       	ldd	r14, Y+6	; 0x06
    4fca:	fd 80       	ldd	r15, Y+5	; 0x05
    4fcc:	0c 81       	ldd	r16, Y+4	; 0x04
    4fce:	1b 81       	ldd	r17, Y+3	; 0x03
    4fd0:	aa 81       	ldd	r26, Y+2	; 0x02
    4fd2:	b9 81       	ldd	r27, Y+1	; 0x01
    4fd4:	ce 0f       	add	r28, r30
    4fd6:	d1 1d       	adc	r29, r1
    4fd8:	0f b6       	in	r0, 0x3f	; 63
    4fda:	f8 94       	cli
    4fdc:	de bf       	out	0x3e, r29	; 62
    4fde:	0f be       	out	0x3f, r0	; 63
    4fe0:	cd bf       	out	0x3d, r28	; 61
    4fe2:	ed 01       	movw	r28, r26
    4fe4:	08 95       	ret

00004fe6 <itoa>:
    4fe6:	fb 01       	movw	r30, r22
    4fe8:	9f 01       	movw	r18, r30
    4fea:	e8 94       	clt
    4fec:	42 30       	cpi	r20, 0x02	; 2
    4fee:	c4 f0       	brlt	.+48     	; 0x5020 <itoa+0x3a>
    4ff0:	45 32       	cpi	r20, 0x25	; 37
    4ff2:	b4 f4       	brge	.+44     	; 0x5020 <itoa+0x3a>
    4ff4:	4a 30       	cpi	r20, 0x0A	; 10
    4ff6:	29 f4       	brne	.+10     	; 0x5002 <itoa+0x1c>
    4ff8:	97 fb       	bst	r25, 7
    4ffa:	1e f4       	brtc	.+6      	; 0x5002 <itoa+0x1c>
    4ffc:	90 95       	com	r25
    4ffe:	81 95       	neg	r24
    5000:	9f 4f       	sbci	r25, 0xFF	; 255
    5002:	64 2f       	mov	r22, r20
    5004:	77 27       	eor	r23, r23
    5006:	0e 94 24 28 	call	0x5048	; 0x5048 <__udivmodhi4>
    500a:	80 5d       	subi	r24, 0xD0	; 208
    500c:	8a 33       	cpi	r24, 0x3A	; 58
    500e:	0c f0       	brlt	.+2      	; 0x5012 <itoa+0x2c>
    5010:	89 5d       	subi	r24, 0xD9	; 217
    5012:	81 93       	st	Z+, r24
    5014:	cb 01       	movw	r24, r22
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	a1 f7       	brne	.-24     	; 0x5002 <itoa+0x1c>
    501a:	16 f4       	brtc	.+4      	; 0x5020 <itoa+0x3a>
    501c:	5d e2       	ldi	r21, 0x2D	; 45
    501e:	51 93       	st	Z+, r21
    5020:	10 82       	st	Z, r1
    5022:	c9 01       	movw	r24, r18
    5024:	0c 94 14 28 	jmp	0x5028	; 0x5028 <strrev>

00005028 <strrev>:
    5028:	dc 01       	movw	r26, r24
    502a:	fc 01       	movw	r30, r24
    502c:	67 2f       	mov	r22, r23
    502e:	71 91       	ld	r23, Z+
    5030:	77 23       	and	r23, r23
    5032:	e1 f7       	brne	.-8      	; 0x502c <strrev+0x4>
    5034:	32 97       	sbiw	r30, 0x02	; 2
    5036:	04 c0       	rjmp	.+8      	; 0x5040 <strrev+0x18>
    5038:	7c 91       	ld	r23, X
    503a:	6d 93       	st	X+, r22
    503c:	70 83       	st	Z, r23
    503e:	62 91       	ld	r22, -Z
    5040:	ae 17       	cp	r26, r30
    5042:	bf 07       	cpc	r27, r31
    5044:	c8 f3       	brcs	.-14     	; 0x5038 <strrev+0x10>
    5046:	08 95       	ret

00005048 <__udivmodhi4>:
    5048:	aa 1b       	sub	r26, r26
    504a:	bb 1b       	sub	r27, r27
    504c:	51 e1       	ldi	r21, 0x11	; 17
    504e:	07 c0       	rjmp	.+14     	; 0x505e <__udivmodhi4_ep>

00005050 <__udivmodhi4_loop>:
    5050:	aa 1f       	adc	r26, r26
    5052:	bb 1f       	adc	r27, r27
    5054:	a6 17       	cp	r26, r22
    5056:	b7 07       	cpc	r27, r23
    5058:	10 f0       	brcs	.+4      	; 0x505e <__udivmodhi4_ep>
    505a:	a6 1b       	sub	r26, r22
    505c:	b7 0b       	sbc	r27, r23

0000505e <__udivmodhi4_ep>:
    505e:	88 1f       	adc	r24, r24
    5060:	99 1f       	adc	r25, r25
    5062:	5a 95       	dec	r21
    5064:	a9 f7       	brne	.-22     	; 0x5050 <__udivmodhi4_loop>
    5066:	80 95       	com	r24
    5068:	90 95       	com	r25
    506a:	bc 01       	movw	r22, r24
    506c:	cd 01       	movw	r24, r26
    506e:	08 95       	ret

00005070 <_exit>:
    5070:	f8 94       	cli

00005072 <__stop_program>:
    5072:	ff cf       	rjmp	.-2      	; 0x5072 <__stop_program>
